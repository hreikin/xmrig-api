from sqlalchemy import Column, Integer, String, Boolean, Float, JSON, ForeignKey, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

# // TODO: Add Memory ORM model with relationship to Resources
# // TODO: Add copy of data in JSON format to the sub-tables
# // TODO: Finish models for, opencl, cuda, tls, and dns in config.json
# // TODO: Fix models so all backends data is contained within the same table
# // TODO: Double check all values from the json are included within the models
# // TODO: Switch id/uid in models to be consistent with the JSON data
# // TODO: Double check all values have correct types based on the XMRig documentation for config.json 
# // TODO: and the JSON data for summary and backends
# // TODO: Check if the types are correct for the marked columns in the models (those columns can hold 
# // TODO: multiple types) - use JSON type for those columns ?
# // TODO: Add a BenchmarkConfig model based on benchmark section of the documentation
# // TODO: Remove relationships from the models, use JSON type for the copy of the dictionary and use dot notation for the names of the columns for the data items contained within the dictionaries

Base = declarative_base()

class Summary(Base):
    __tablename__ = "summary"
    uid = Column(Integer, primary_key=True)
    miner_name = Column(String)
    timestamp = Column(DateTime, default=datetime.now)
    full_json = Column(JSON)
    id = Column(String)
    worker_id = Column(String)
    uptime = Column(Integer)
    restricted = Column(Boolean)
    resources = Column(JSON)
    resources_memory = Column(JSON, name="resources.memory")
    resources_memory_free = Column(Integer, name="resources.memory.free")
    resources_memory_total = Column(Integer, name="resources.memory.total")
    resources_memory_rsm = Column(Integer, name="resources.memory.resident_set_memory")
    resources_load_average = Column(JSON, name="resources.load_average")
    resources_hardware_concurrency = Column(Integer, name="resources.hardware_concurrency")
    features = Column(JSON)
    results = Column(JSON)
    results_diff_current = Column(Integer, name="results.diff_current")
    results_shares_good = Column(Integer, name="results.shares_good")
    results_shares_total = Column(Integer, name="results.shares_total")
    results_avg_time = Column(Integer, name="results.avg_time")
    results_avg_time_ms = Column(Integer, name="results.avg_time_ms")
    results_hashes_total = Column(Integer, name="results.hashes_total")
    results_best = Column(JSON, name="results.best")
    algo = Column(String)
    connection = Column(JSON)
    connection_pool = Column(String, name="connection.pool")
    connection_ip = Column(String, name="connection.ip")
    connection_uptime = Column(Integer, name="connection.uptime")
    connection_uptime_ms = Column(Integer, name="connection.uptime_ms")
    connection_ping = Column(Integer, name="connection.ping")
    connection_failures = Column(Integer, name="connection.failures")
    connection_tls = Column(JSON, name="connection.tls")
    connection_tls_fingerprint = Column(JSON, name="connection.tls_fingerprint")
    connection_algo = Column(String, name="connection.algo")
    connection_diff = Column(Integer, name="connection.diff")
    connection_accepted = Column(Integer, name="connection.accepted")
    connection_rejected = Column(Integer, name="connection.rejected")
    connection_avg_time = Column(Integer, name="connection.avg_time")
    connection_avg_time_ms = Column(Integer, name="connection.avg_time_ms")
    connection_hashes_total = Column(Integer, name="connection.hashes_total")
    version = Column(String)
    kind = Column(String)
    ua = Column(String)
    cpu = Column(JSON)
    cpu_brand = Column(String, name="cpu.brand")
    cpu_family = Column(Integer, name="cpu.family")
    cpu_model = Column(Integer, name="cpu.model")
    cpu_stepping = Column(Integer, name="cpu.stepping")
    cpu_proc_info = Column(Integer, name="cpu.proc_info")
    cpu_aes = Column(Boolean, name="cpu.aes")
    cpu_avx2 = Column(Boolean, name="cpu.avx2")
    cpu_x64 = Column(Boolean, name="cpu.x64")
    cpu_64_bit = Column(Boolean, name="cpu.64_bit")
    cpu_l2 = Column(Integer, name="cpu.l2")
    cpu_l3 = Column(Integer, name="cpu.l3")
    cpu_cores = Column(Integer, name="cpu.cores")
    cpu_threads = Column(Integer, name="cpu.threads")
    cpu_packages = Column(Integer, name="cpu.packages")
    cpu_nodes = Column(Integer, name="cpu.nodes")
    cpu_backend = Column(String, name="cpu.backend")
    cpu_msr = Column(String, name="cpu.msr")
    cpu_assembly = Column(String, name="cpu.assembly")
    cpu_arch = Column(String, name="cpu.arch")
    cpu_flags = Column(JSON, name="cpu.flags")
    donate_level = Column(Integer)
    paused = Column(Boolean)
    algorithms = Column(JSON)
    hashrate = Column(JSON)
    hashrate_total = Column(JSON, name="hashrate.total")
    hashrate_highest = Column(Float, name="hashrate.highest")
    hugepages = Column(JSON)

class Config(Base):
    __tablename__ = "config"
    uid = Column(Integer, primary_key=True)
    miner_name = Column(String)
    timestamp = Column(DateTime, default=datetime.now)
    full_json = Column(JSON)
    api = Column(JSON)
    api_id = Column(String, name="api.id")
    api_worker_id = Column(String, name="api.worker_id")
    http = Column(JSON)
    http_enabled = Column(Boolean, name="http.enabled")
    http_host = Column(String, name="http.host")
    http_port = Column(Integer, name="http.port")
    http_access_token = Column(String, name="http.access_token")
    http_restricted = Column(Boolean, name="http.restricted")
    autosave = Column(Boolean)
    background = Column(Boolean)
    colors = Column(Boolean)
    title = Column(JSON)
    randomx = Column(JSON)
    randomx_init = Column(Integer, name="randomx.init")
    randomx_init_avx2 = Column(Integer, name="randomx.init_avx2")
    randomx_mode = Column(String, name="randomx.mode")
    randomx_1gb_pages = Column(Boolean, name="randomx.1gb_pages")
    randomx_rdmsr = Column(Boolean, name="randomx.rdmsr")
    randomx_wrmsr = Column(JSON, name="randomx.wrmsr")
    randomx_cache_qos = Column(Boolean, name="randomx.cache_qos")
    randomx_numa = Column(Boolean, name="randomx.numa")
    randomx_scratchpad_prefetch_mode = Column(Integer, name="randomx.scratchpad_prefetch_mode")
    cpu = Column(JSON)
    cpu_enabled = Column(Boolean, name="cpu.enabled")
    cpu_huge_pages = Column(JSON, name="cpu.huge_pages")
    cpu_huge_pages_jit = Column(Boolean, name="cpu.huge_pages_jit")
    cpu_hw_aes = Column(Boolean, name="cpu.hw_aes")
    cpu_priority = Column(Integer, name="cpu.priority")
    cpu_memory_pool = Column(JSON, name="cpu.memory_pool")
    cpu_yield = Column(Boolean, name="cpu.yield")
    cpu_max_threads_hint = Column(Integer, name="cpu.max_threads_hint")
    cpu_asm = Column(JSON, name="cpu.asm")
    cpu_argon2_impl = Column(String, name="cpu.argon2_impl")
    opencl = Column(JSON)
    opencl_enabled = Column(Boolean, name="opencl.enabled")
    opencl_cache = Column(Boolean, name="opencl.cache")
    opencl_loader = Column(String, name="opencl.loader")
    opencl_platform = Column(JSON, name="opencl.platform")
    opencl_adl = Column(Boolean, name="opencl.adl")
    cuda = Column(JSON)
    cuda_enabled = Column(Boolean, name="cuda.enabled")
    cuda_loader = Column(String, name="cuda.loader")
    cuda_nvml = Column(Boolean, name="cuda.nvml")
    donate_level = Column(Integer)
    donate_over_proxy = Column(Integer)
    log_file = Column(String)
    pools = Column(JSON)
    print_time = Column(Integer)
    health_print_time = Column(Integer)
    dmi = Column(Boolean)
    retries = Column(Integer)
    retry_pause = Column(Integer)
    syslog = Column(Boolean)
    tls = Column(JSON)
    tls_enabled = Column(Boolean, name="tls.enabled")
    tls_protocols = Column(String, name="tls.protocols")
    tls_cert = Column(String, name="tls.cert")
    tls_cert_key = Column(String, name="tls.cert_key")
    tls_ciphers = Column(String, name="tls.ciphers")
    tls_ciphersuites = Column(String, name="tls.ciphersuites")
    tls_dhparam = Column(String, name="tls.dhparam")
    dns = Column(JSON)
    dns_ipv6 = Column(Boolean, name="dns.ipv6")
    dns_ttl = Column(Integer, name="dns.ttl")
    user_agent = Column(String)
    verbose = Column(Integer)
    watch = Column(Boolean)
    rebench_algo = Column(Boolean)
    bench_algo_time = Column(Integer)
    pause_on_battery = Column(Boolean)
    pause_on_active = Column(JSON)
    benchmark = Column(JSON)
    benchmark_size = Column(String, name="benchmark.size")
    benchmark_algo = Column(String, name="benchmark.algo")
    benchmark_submit = Column(Boolean, name="benchmark.submit")
    benchmark_verify = Column(String, name="benchmark.verify")
    benchmark_seed = Column(String, name="benchmark.seed")
    benchmark_hash_num = Column(String, name="benchmark.hash_num")

class Backends(Base):
    __tablename__ = "backends"
    uid = Column(Integer, primary_key=True)
    miner_name = Column(String)
    timestamp = Column(DateTime, default=datetime.now)
    full_json = Column(JSON)
    cpu = Column(JSON)
    cpu_type = Column(String, name="cpu.type")
    cpu_enabled = Column(Boolean, name="cpu.enabled")
    cpu_algo = Column(String, name="cpu.algo")
    cpu_profile = Column(String, name="cpu.profile")
    cpu_hw_aes = Column(Boolean, name="cpu.hw_aes")
    cpu_priority = Column(Integer, name="cpu.priority")
    cpu_msr = Column(Boolean, name="cpu.msr")
    cpu_asm = Column(String, name="cpu.asm")
    cpu_argon2_impl = Column(String, name="cpu.argon2_impl")
    cpu_hugepages = Column(JSON, name="cpu.hugepages")
    cpu_memory = Column(Integer, name="cpu.memory")
    cpu_hashrate = Column(JSON, name="cpu.hashrate")
    cpu_threads = Column(JSON, name="cpu.threads")
    opencl = Column(JSON)
    opencl_type = Column(String, name="opencl.type")
    opencl_enabled = Column(Boolean, name="opencl.enabled")
    opencl_algo = Column(String, name="opencl.algo")
    opencl_profile = Column(String, name="opencl.profile")
    opencl_platform = Column(JSON, name="opencl.platform")
    opencl_platform_index = Column(Integer, name="opencl.platform.index")
    opencl_platform_profile = Column(String, name="opencl.platform.profile")
    opencl_platform_version = Column(String, name="opencl.platform.version")
    opencl_platform_name = Column(String, name="opencl.platform.name")
    opencl_platform_vendor = Column(String, name="opencl.platform.vendor")
    opencl_platform_extensions = Column(String, name="opencl.platform.extensions")
    opencl_hashrate = Column(JSON, name="opencl.hashrate")
    opencl_threads = Column(JSON, name="opencl.threads")
    cuda = Column(JSON)
    cuda_type = Column(String, name="cuda.type")
    cuda_enabled = Column(Boolean, name="cuda.enabled")
    cuda_algo = Column(String, name="cuda.algo")
    cuda_profile = Column(String, name="cuda.profile")
    cuda_versions = Column(JSON, name="cuda.versions")
    cuda_versions_cuda_runtime = Column(String, name="cuda.versions.cuda_runtime")
    cuda_versions_cuda_driver = Column(String, name="cuda.versions.cuda_driver")
    cuda_versions_plugin = Column(String, name="cuda.versions.plugin")
    cuda_hashrate = Column(JSON, name="cuda.hashrate")
    cuda_threads = Column(JSON, name="cuda.threads")