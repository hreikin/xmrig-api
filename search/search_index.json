{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"XMRig-API","text":"<p><code>XMRig-API</code> is a Python module that enables seamless interaction with the XMRig API, offering a range of features designed to enhance usability, flexibility, and reliability. Detailed documentation is available here, and can also be built locally if needed.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with <code>XMRig-API</code>, visit the Usage page for a quick installation and usage guide. For an in-depth overview of the module\u2019s capabilities, consult the reference pages available at the documentation site.  </p> <p>For more examples, visit the Examples page. Additionally, you can refer to the Logging section for details on how to enable and configure logging.</p>"},{"location":"#features","title":"Features","text":"<p><code>XMRig-API</code> includes several powerful features:</p> <ul> <li>Support for Multiple Miners: Configure and manage multiple miners from a single instance.</li> <li>Data Persistence: Store and manage miner data in a database to ensure resilience and prevent data loss during API or miner restarts.</li> <li>Getting Started Examples: Practical examples to help new users quickly understand and use the tool.</li> <li>Reference Documentation: Detailed documentation to guide you through all features and functions.  </li> <li>Logging: Configurable logging for better debugging and monitoring.</li> <li>Custom Exceptions: Specific exceptions for handling API errors, authorization errors, and connection errors.</li> <li>API Interaction: Fetch status, manage configurations, and control the mining process.</li> <li>Data Caching: Retrieve and cache various properties and statistics from the XMRig miner's API responses.</li> <li>Database Operations: Insert and delete miner-related data in the database.</li> <li>Enhanced Data Persistence: Improved database support with more detailed data storage and retrieval options.</li> <li>XMRig-MO API Coverage: Support for additional XMRig API data and functionalities from the MoneroOcean fork of XMRig.</li> <li>Advanced Configuration Management: More flexible and powerful configuration management capabilities.</li> <li>Test Coverage: A basic test suite for enhanced reliability and easier development.</li> </ul>"},{"location":"#planned-features","title":"Planned Features","text":"<ul> <li>Extended API Coverage: Support for additional XMRig API endpoints, data and functionalities from other forks, e.g. <code>xmrig-proxy</code>.</li> <li>Performance Optimization: Enhancements to improve the performance and efficiency of the module.</li> <li>Improved Error Handling: More robust error handling and recovery mechanisms.</li> <li>Comprehensive Test Coverage: A robust test suite for enhanced reliability and easier development.</li> </ul> <p>These features make <code>XMRig-API</code> an ideal solution for both miners and developers seeking a user-friendly and robust tool.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are always welcome and greatly appreciated! To learn more about how you can contribute, check out the Contributing page.  </p>"},{"location":"#credits-and-acknowledgments","title":"Credits and Acknowledgments","text":"<p><code>XMRig-API</code> originated as a fork of the python-xmrig project. While the original project provided the foundation, <code>XMRig-API</code> has evolved into a distinct tool with its own unique features and direction.  </p> <p>Special thanks to the creators of python-xmrig for their foundational work, which inspired the development of this project.  </p>"},{"location":"#donations","title":"Donations","text":"<p>If you find <code>XMRig-API</code> useful and would like to support its development, consider sending a donation in XMR to the following address:  </p> <p><code>49ipjnJgoRnPsX8v5LVzUvfpSou6agomvKZnqD8zqFVqG6aqeUvKPyJ4WXhodiBPSvAuPNEmhF5QSiaJ59ZgFKwq9bXzCjz</code> </p> <p>Your support is greatly appreciated!</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#contributing","title":"Contributing","text":"<p>Contributions are both encouraged and greatly appreciated.</p> <p>To contribute content, fork this repo and make a pull request to the master branch including your changes.</p> <ul> <li>On GitHub, fork the xmrig-api repo</li> <li>Clone your newly created repo. (Note: replace your-username with your GitHub username)</li> </ul> <p>via ssh:</p> <pre><code>git clone git@github.com:your-username/xmrig-api\n</code></pre> <p>via https:</p> <pre><code>git clone https://github.com/your-username/xmrig-api\n</code></pre> <ul> <li>Navigate to the repo and create a new topic branch</li> </ul> <pre><code>cd xmrig-api\ngit checkout -b foobar\n</code></pre> <ul> <li>After making modifications, commit and push your changes to your topic branch</li> <li>Open a PR against the xmrig-api branch</li> </ul>"},{"location":"CONTRIBUTING/#run-the-documentation-server-locally","title":"Run the documentation server locally","text":"<p>This documentation can be built and run locally.</p> <ul> <li>The build process for mkdocs utilizes Python</li> <li>It is recommended to install python pip dependencies inside of a Virtual Environment (venv)</li> </ul> <p>Note: You may need to first install <code>python3-venv</code> or the equivalent for your distribution</p> <ul> <li>Navigate to your <code>xmrig-api</code> repo</li> <li>Create the python virtual environment</li> </ul> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <ul> <li>Install mkdocs dependencies to the venv</li> </ul> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li>Run the documentation server locally</li> </ul> <pre><code>mkdocs serve\n</code></pre> <ul> <li>View your changes at http://localhost:8000</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>This page provides detailed examples of how to use the <code>xmrig</code> API. Each example demonstrates a specific functionality. </p>"},{"location":"examples/#examples-list","title":"Examples List","text":"<ol> <li>Add Miners</li> <li>List All Miners</li> <li>Get Individual Miners</li> <li>Update Config</li> <li>Update Individual Miners Endpoints</li> <li>Update All Endpoints for All Miners</li> <li>Start/Stop All Miners</li> <li>Pause/Resume All Miners</li> <li>Remove Miner</li> <li>Access Properties</li> <li>Full Example</li> </ol>"},{"location":"examples/#add-miners","title":"Add Miners","text":"<p>This example demonstrates how to add XMRig miners to the XMRigManager. It shows how to configure logging and add miners to the manager.</p> add_miners.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\n</code></pre>"},{"location":"examples/#list-all-miners","title":"List All Miners","text":"<p>This example demonstrates how to list all XMRig miners managed by the XMRigManager. It shows how to configure logging, add miners to the manager, and list all miners.</p> list_all_miners.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nlog.info(\"Retrieving individual miners...\")\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(f\"Retrieved miner: {miner_a._miner_name}\")\nlog.info(f\"Retrieved miner: {miner_b._miner_name}\")\n</code></pre>"},{"location":"examples/#get-individual-miners","title":"Get Individual Miners","text":"<p>This example demonstrates how to retrieve individual XMRig miners from the XMRigManager. It shows how to configure logging, add miners to the manager, and retrieve individual miners.</p> get_individual_miners.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nlog.info(\"Retrieving individual miners...\")\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(f\"Retrieved miner: {miner_a._miner_name}\")\nlog.info(f\"Retrieved miner: {miner_b._miner_name}\")\n</code></pre>"},{"location":"examples/#update-config","title":"Update Config","text":"<p>This example demonstrates how to update the configuration of an XMRig miner using the XMRigManager. It shows how to configure logging, add miners to the manager, retrieve the current config, modify it, and post the updated config.</p> update_config.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(\"Retrieving individual miner\")\nminer_a = manager.get_miner(\"MinerB\")\nminer_a.get_endpoint(\"config\")\nconfig = miner_a.config\nlog.info(\"Updating miner configuration\")\nconfig[\"api\"][\"worker-id\"] = \"NEW_WORKER_ID\"\nminer_a.post_config(config)\n</code></pre>"},{"location":"examples/#update-individual-miners-endpoints","title":"Update Individual Miners Endpoints","text":"<p>This example demonstrates how to update the endpoints for individual XMRig miners using the XMRigManager. It shows how to configure logging, add miners to the manager, and update the summary, backends, and config endpoints for each miner.</p> update_individual_miners_endpoints.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nlog.info(\"Retrieving individual miners...\")\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(f\"Updating endpoints for {name_a}\")\nminer_a.get_endpoint(\"summary\")\nminer_a.get_endpoint(\"backends\")\nminer_a.get_endpoint(\"config\")\nlog.info(f\"Updating endpoints for {name_b}\")\nminer_b.get_endpoint(\"summary\")\nminer_b.get_endpoint(\"backends\")\nminer_b.get_endpoint(\"config\")\n</code></pre>"},{"location":"examples/#update-all-endpoints-for-all-miners","title":"Update All Endpoints for All Miners","text":"<p>This example demonstrates how to update all endpoints for all XMRig miners using the XMRigManager. It shows how to configure logging, add miners to the manager, and update all endpoints for all miners in the manager.</p> update_all_miners.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(\"Updating all endpoints for all miners\")\nmanager.update_miners()\nlog.info(\"Updating a single endpoint for all miners\")\nmanager.update_miners(\"summary\")\n</code></pre>"},{"location":"examples/#start-or-stop-all-miners","title":"Start Or Stop All Miners","text":"<p>This example demonstrates how to start and stop all XMRig miners using the XMRigManager. It shows how to configure logging, add miners to the manager, and perform start/stop actions on all miners.</p> start_stop_all_miners.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(\"Stopping all miners\")\nmanager.perform_action_on_all(\"stop\")\nlog.info(\"Starting all miners\")\nmanager.perform_action_on_all(\"start\")\n</code></pre>"},{"location":"examples/#pause-or-resume-all-miners","title":"Pause Or Resume All Miners","text":"<p>This example demonstrates how to pause and resume all XMRig miners using the XMRigManager. It shows how to configure logging, add miners to the manager, and perform pause/resume actions on all miners.</p> pause_resume_all_miners.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(\"Pausing all miners\")\nmanager.perform_action_on_all(\"pause\")\nlog.info(\"Resuming all miners\")\nmanager.perform_action_on_all(\"resume\")\n</code></pre>"},{"location":"examples/#remove-miner","title":"Remove Miner","text":"<p>This example demonstrates how to remove an XMRig miner from the XMRigManager. It shows how to configure logging, add miners to the manager, list all miners, remove a miner, and list all miners again.</p> remove_miner.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(\"Listing all miners\")\nlog.info(manager.list_miners())\nlog.info(\"Removing MinerB\")\nmanager.remove_miner(\"MinerB\")\nlog.info(\"Listing all miners after removal\")\nlog.info(manager.list_miners())\n</code></pre>"},{"location":"examples/#access-properties","title":"Access Properties","text":"<p>This example demonstrates how to use the XMRigManager to manage multiple XMRig miners. It shows how to configure logging, add miners to the manager, and retrieve data from individual miners. The example logs various properties of the miners, such as summary, backends, config, hashrates, and job counters.</p> access_properties.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nminer_a = manager.get_miner(name_a)\nlog.info(f\"{miner_a._miner_name} Full JSON Data Examples\")\nlog.info(f\"Summary Endpoint: {miner_a.summary}\")\nlog.info(f\"Backends Endpoint: {miner_a.backends}\")\nlog.info(f\"Config Endpoint: {miner_a.config}\")\nminer_b = manager.get_miner(name_b)\nlog.info(f\"{miner_b._miner_name} Individual Data Examples\")\nlog.info(f\"Hashrates: {miner_b.sum_hashrate}\")\nlog.info(f\"Accepted Jobs: {miner_b.sum_pool_accepted_jobs}\")\nlog.info(f\"Rejected Jobs: {miner_b.sum_pool_rejected_jobs}\")\n</code></pre>"},{"location":"examples/#full-example","title":"Full Example","text":"<p>This full example demonstrates various functionalities of the XMRigManager. It shows how to configure logging, add and remove miners, list all miners, update endpoints, pause/resume miners, start/stop miners, and update the miner's config.</p> full_example.py<pre><code>from env import log, name_a, ip_a, port_a, access_token_a, tls_enabled_a, name_b, ip_b, port_b, access_token_b, tls_enabled_b\nfrom xmrig import XMRigManager\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nlog.info(\"Retrieving individual miners...\")\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(f\"Retrieved miner: {miner_a._miner_name}\")\nlog.info(f\"Retrieved miner: {miner_b._miner_name}\")\n\n# List all miners\nlog.info(\"Listing all miners...\")\nlog.info(manager.list_miners())\n# Remove miners\nlog.info(f\"Removing miner: {name_a}\")\nmanager.remove_miner(name_a)\n# List all miners\nlog.info(\"Listing all miners...\")\nlog.info(manager.list_miners())\n# Add back for rest of example code\nlog.info(f\"Adding miner back: {name_a}\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\n# Get individual miners\nlog.info(\"Retrieving individual miners...\")\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(f\"Retrieved miner: {miner_a._miner_name}\")\nlog.info(f\"Retrieved miner: {miner_b._miner_name}\")\n# Update an individual miner's endpoints\nlog.info(f\"Updating endpoints for miner: {miner_a._miner_name}\")\nminer_a.get_endpoint(\"summary\")\nminer_a.get_endpoint(\"backends\")\nminer_a.get_endpoint(\"config\")\nlog.info(f\"Updating endpoints for miner: {miner_b._miner_name}\")\nminer_b.get_endpoint(\"summary\")\nminer_b.get_endpoint(\"backends\")\nminer_b.get_endpoint(\"config\")\n# Update all endpoints for all miners\nlog.info(\"Updating all endpoints for all miners...\")\nmanager.update_miners()\n# Pause all miners\nlog.info(\"Pausing all miners...\")\nmanager.perform_action_on_all(\"pause\")\nlog.info(\"Resuming all miners...\")\nmanager.perform_action_on_all(\"resume\")\n# Start/stop a specific miner\nlog.info(f\"Stopping miner: {miner_a._miner_name}\")\nminer_a.perform_action(\"stop\")\nlog.info(f\"Starting miner: {miner_a._miner_name}\")\nminer_a.perform_action(\"start\")\n# Pause/Resume a specific miner\nlog.info(f\"Pausing miner: {miner_b._miner_name}\")\nminer_b.perform_action(\"pause\")\nlog.info(f\"Resuming miner: {miner_b._miner_name}\")\nminer_b.perform_action(\"resume\")\n# Edit and update the miners `config.json` via the HTTP API.\nlog.info(f\"Editing config for miner: {miner_a._miner_name}\")\nminer_a.get_endpoint(\"config\")\nconfig = miner_a.config\nconfig[\"api\"][\"worker-id\"] = \"NEW_WORKER_ID\"\nminer_a.post_config(config)\n# Summary and Backends API data is available as properties in either full or individual format.\nlog.info(f\"Summary data for miner: {miner_b._miner_name}\")\nlog.info(miner_b.summary)\nlog.info(f\"Hashrates for miner: {miner_b._miner_name}\")\nlog.info(miner_b.sum_hashrate)\nlog.info(f\"Accepted jobs for miner: {miner_b._miner_name}\")\nlog.info(miner_b.sum_pool_accepted_jobs)\nlog.info(f\"Rejected jobs for miner: {miner_b._miner_name}\")\nlog.info(miner_b.sum_pool_rejected_jobs)\nlog.info(f\"Current difficulty for miner: {miner_b._miner_name}\")\nlog.info(miner_b.sum_current_difficulty)\n</code></pre>"},{"location":"logger/","title":"Logging","text":"<p>To enable logging within your project and get detailed information from the XMRig-API library, you can configure the logging module in your Python script. Here is an example of how to set up logging:</p> <pre><code>import logging\n\n# Configure the logging\nlogging.basicConfig(\n    level=logging.INFO,  # Set the log level for the entire application, change to DEBUG to print all responses.\n    format='[%(asctime)s - %(name)s] - %(levelname)s - %(message)s',  # Consistent format\n    handlers=[\n        logging.FileHandler(\"app.log\"),  # Log to a file\n        logging.StreamHandler()  # Log to console\n    ]\n)\n\nlog = logging.getLogger(\"MyLogger\")\n\n# Import the XMRigManager class\nfrom xmrig.manager import XMRigManager\n\n# Example usage\nmanager = XMRigManager()\nlog.info(\"Adding miner\")\nmanager.add_miner(\"miner1\", \"127.0.0.1\", 8080)\n</code></pre> <p>This configuration will output detailed debug information to the console, including timestamps, logger names, log levels, and log messages.</p>"},{"location":"properties/","title":"Properties","text":"<p>Many properties have been created to enable you to access any data from any of the endpoint responses. The properties will first check the cache and if the cache is not available for any reason it will fallback to the database, if the property isn't available in either it will return the string \"N/A\".</p>"},{"location":"properties/#availability","title":"Availability","text":"<p>There are currently 264 properties available, however not every property will be available depending on which fork of <code>xmrig</code> you are using. Here is a table that shows which properties are supported by which fork.</p> Property Name XMRig XMRig-MO <code>summary</code> YES YES <code>backends</code> YES YES <code>config</code> YES YES <code>sum_id</code> YES YES <code>sum_worker_id</code> YES YES <code>sum_uptime</code> YES YES <code>sum_uptime_readable</code> YES YES <code>sum_restricted</code> YES YES <code>sum_resources</code> YES YES <code>sum_memory_usage</code> YES YES <code>sum_free_memory</code> YES YES <code>sum_total_memory</code> YES YES <code>sum_resident_set_memory</code> YES YES <code>sum_load_average</code> YES YES <code>sum_hardware_concurrency</code> YES YES <code>sum_features</code> YES YES <code>sum_results</code> YES YES <code>sum_current_difficulty</code> YES YES <code>sum_good_shares</code> YES YES <code>sum_total_shares</code> YES YES <code>sum_avg_time</code> YES YES <code>sum_avg_time_ms</code> YES YES <code>sum_total_hashes</code> YES YES <code>sum_best_results</code> YES YES <code>sum_algorithm</code> YES YES <code>sum_connection</code> YES YES <code>sum_pool_info</code> YES YES <code>sum_pool_ip_address</code> YES YES <code>sum_pool_uptime</code> YES YES <code>sum_pool_uptime_ms</code> YES YES <code>sum_pool_ping</code> YES YES <code>sum_pool_failures</code> YES YES <code>sum_pool_tls</code> YES YES <code>sum_pool_tls_fingerprint</code> YES YES <code>sum_pool_algo</code> YES YES <code>sum_pool_diff</code> YES YES <code>sum_pool_accepted_jobs</code> YES YES <code>sum_pool_rejected_jobs</code> YES YES <code>sum_pool_average_time</code> YES YES <code>sum_pool_average_time_ms</code> YES YES <code>sum_pool_total_hashes</code> YES YES <code>sum_version</code> YES YES <code>sum_kind</code> YES YES <code>sum_ua</code> YES YES <code>sum_cpu_info</code> YES YES <code>sum_cpu_brand</code> YES YES <code>sum_cpu_family</code> YES YES <code>sum_cpu_model</code> YES YES <code>sum_cpu_stepping</code> YES YES <code>sum_cpu_proc_info</code> YES YES <code>sum_cpu_aes</code> YES YES <code>sum_cpu_avx2</code> YES YES <code>sum_cpu_x64</code> YES YES <code>sum_cpu_64_bit</code> YES YES <code>sum_cpu_l2</code> YES YES <code>sum_cpu_l3</code> YES YES <code>sum_cpu_cores</code> YES YES <code>sum_cpu_threads</code> YES YES <code>sum_cpu_packages</code> YES YES <code>sum_cpu_nodes</code> YES YES <code>sum_cpu_backend</code> YES YES <code>sum_cpu_msr</code> YES YES <code>sum_cpu_assembly</code> YES YES <code>sum_cpu_arch</code> YES YES <code>sum_cpu_flags</code> YES YES <code>sum_donate_level</code> YES YES <code>sum_paused</code> YES YES <code>sum_algorithms</code> YES YES <code>sum_hashrate</code> YES YES <code>sum_hashrate_total</code> YES YES <code>sum_hashrate_10s</code> YES YES <code>sum_hashrate_1m</code> YES YES <code>sum_hashrate_15m</code> YES YES <code>sum_hashrate_highest</code> YES YES <code>sum_hugepages</code> YES YES <code>enabled_backends</code> YES YES <code>be_cpu_type</code> YES YES <code>be_cpu_enabled</code> YES YES <code>be_cpu_algo</code> YES YES <code>be_cpu_profile</code> YES YES <code>be_cpu_hw_aes</code> YES YES <code>be_cpu_priority</code> YES YES <code>be_cpu_msr</code> YES YES <code>be_cpu_asm</code> YES YES <code>be_cpu_argon2_impl</code> YES YES <code>be_cpu_hugepages</code> YES YES <code>be_cpu_memory</code> YES YES <code>be_cpu_hashrates</code> YES YES <code>be_cpu_hashrate_10s</code> YES YES <code>be_cpu_hashrate_1m</code> YES YES <code>be_cpu_hashrate_15m</code> YES YES <code>be_cpu_threads</code> YES YES <code>be_cpu_threads_intensity</code> YES YES <code>be_cpu_threads_affinity</code> YES YES <code>be_cpu_threads_av</code> YES YES <code>be_cpu_threads_hashrates</code> YES YES <code>be_cpu_threads_hashrates_10s</code> YES YES <code>be_cpu_threads_hashrates_1m</code> YES YES <code>be_cpu_threads_hashrates_15m</code> YES YES <code>be_opencl_type</code> NO YES <code>be_opencl_enabled</code> NO YES <code>be_opencl_algo</code> NO YES <code>be_opencl_profile</code> NO YES <code>be_opencl_platform</code> NO YES <code>be_opencl_platform_index</code> NO YES <code>be_opencl_platform_profile</code> NO YES <code>be_opencl_platform_version</code> NO YES <code>be_opencl_platform_name</code> NO YES <code>be_opencl_platform_vendor</code> NO YES <code>be_opencl_platform_extensions</code> NO YES <code>be_opencl_hashrates</code> NO YES <code>be_opencl_hashrate_10s</code> NO YES <code>be_opencl_hashrate_1m</code> NO YES <code>be_opencl_hashrate_15m</code> NO YES <code>be_opencl_threads</code> NO YES <code>be_opencl_threads_index</code> NO YES <code>be_opencl_threads_intensity</code> NO YES <code>be_opencl_threads_worksize</code> NO YES <code>be_opencl_threads_unroll</code> NO YES <code>be_opencl_threads_affinity</code> NO YES <code>be_opencl_threads_hashrates</code> NO YES <code>be_opencl_threads_hashrate_10s</code> NO YES <code>be_opencl_threads_hashrate_1m</code> NO YES <code>be_opencl_threads_hashrate_15m</code> NO YES <code>be_opencl_threads_board</code> NO YES <code>be_opencl_threads_name</code> NO YES <code>be_opencl_threads_bus_id</code> NO YES <code>be_opencl_threads_cu</code> NO YES <code>be_opencl_threads_global_mem</code> NO YES <code>be_opencl_threads_health</code> NO YES <code>be_opencl_threads_health_temp</code> NO YES <code>be_opencl_threads_health_power</code> NO YES <code>be_opencl_threads_health_clock</code> NO YES <code>be_opencl_threads_health_mem_clock</code> NO YES <code>be_opencl_threads_health_rpm</code> NO YES <code>be_cuda_type</code> NO YES <code>be_cuda_enabled</code> NO YES <code>be_cuda_algo</code> NO YES <code>be_cuda_profile</code> NO YES <code>be_cuda_versions</code> NO YES <code>be_cuda_runtime</code> NO YES <code>be_cuda_driver</code> NO YES <code>be_cuda_plugin</code> NO YES <code>be_cuda_hashrates</code> NO YES <code>be_cuda_hashrate_10s</code> NO YES <code>be_cuda_hashrate_1m</code> NO YES <code>be_cuda_hashrate_15m</code> NO YES <code>be_cuda_threads</code> NO YES <code>be_cuda_threads_index</code> NO YES <code>be_cuda_threads_blocks</code> NO YES <code>be_cuda_threads_bfactor</code> NO YES <code>be_cuda_threads_bsleep</code> NO YES <code>be_cuda_threads_affinity</code> NO YES <code>be_cuda_threads_dataset_host</code> NO YES <code>be_cuda_threads_hashrates</code> NO YES <code>be_cuda_threads_hashrate_10s</code> NO YES <code>be_cuda_threads_hashrate_1m</code> NO YES <code>be_cuda_threads_hashrate_15m</code> NO YES <code>be_cuda_threads_name</code> NO YES <code>be_cuda_threads_bus_id</code> NO YES <code>be_cuda_threads_smx</code> NO YES <code>be_cuda_threads_arch</code> NO YES <code>be_cuda_threads_global_mem</code> NO YES <code>be_cuda_threads_clock</code> NO YES <code>be_cuda_threads_memory_clock</code> NO YES <code>conf_api_property</code> YES YES <code>conf_api_id_property</code> YES YES <code>conf_api_worker_id_property</code> YES YES <code>conf_http_property</code> YES YES <code>conf_http_enabled_property</code> YES YES <code>conf_http_host_property</code> YES YES <code>conf_http_port_property</code> YES YES <code>conf_http_access_token_property</code> YES YES <code>conf_http_restricted_property</code> YES YES <code>conf_autosave_property</code> YES YES <code>conf_background_property</code> YES YES <code>conf_colors_property</code> YES YES <code>conf_title_property</code> YES YES <code>conf_randomx_property</code> YES YES <code>conf_randomx_init_property</code> YES YES <code>conf_randomx_init_avx2_property</code> YES YES <code>conf_randomx_mode_property</code> YES YES <code>conf_randomx_1gb_pages_property</code> YES YES <code>conf_randomx_rdmsr_property</code> YES YES <code>conf_randomx_wrmsr_property</code> YES YES <code>conf_randomx_cache_qos_property</code> YES YES <code>conf_randomx_numa_property</code> YES YES <code>conf_randomx_scratchpad_prefetch_mode_property</code> YES YES <code>conf_cpu_property</code> YES YES <code>conf_cpu_enabled_property</code> YES YES <code>conf_cpu_huge_pages_property</code> YES YES <code>conf_cpu_huge_pages_jit_property</code> YES YES <code>conf_cpu_hw_aes_property</code> YES YES <code>conf_cpu_priority_property</code> YES YES <code>conf_cpu_memory_pool_property</code> YES YES <code>conf_cpu_yield_property</code> YES YES <code>conf_cpu_max_threads_hint_property</code> YES YES <code>conf_cpu_asm_property</code> YES YES <code>conf_cpu_argon2_impl_property</code> YES YES <code>conf_opencl_property</code> YES YES <code>conf_opencl_enabled_property</code> YES YES <code>conf_opencl_cache_property</code> YES YES <code>conf_opencl_loader_property</code> YES YES <code>conf_opencl_platform_property</code> YES YES <code>conf_opencl_adl_property</code> YES YES <code>conf_cuda_property</code> YES YES <code>conf_cuda_enabled_property</code> YES YES <code>conf_cuda_loader_property</code> YES YES <code>conf_cuda_nvml_property</code> YES YES <code>conf_log_file_property</code> YES YES <code>conf_donate_level_property</code> YES YES <code>conf_donate_over_proxy_property</code> YES YES <code>conf_pools_property</code> YES YES <code>conf_pools_algo_property</code> YES YES <code>conf_pools_coin_property</code> YES YES <code>conf_pools_url_property</code> YES YES <code>conf_pools_user_property</code> YES YES <code>conf_pools_pass_property</code> YES YES <code>conf_pools_rig_id_property</code> YES YES <code>conf_pools_nicehash_property</code> YES YES <code>conf_pools_keepalive_property</code> YES YES <code>conf_pools_enabled_property</code> YES YES <code>conf_pools_tls_property</code> YES YES <code>conf_pools_sni_property</code> YES YES <code>conf_pools_spend_secret_key_property</code> YES YES <code>conf_pools_tls_fingerprint_property</code> YES YES <code>conf_pools_daemon_property</code> YES YES <code>conf_pools_daemon_poll_interval_property</code> YES YES <code>conf_pools_daemon_job_timeout_property</code> YES YES <code>conf_pools_daemon_zmq_port_property</code> YES YES <code>conf_pools_socks5_property</code> YES YES <code>conf_pools_self_select_property</code> YES YES <code>conf_pools_submit_to_origin_property</code> YES YES <code>conf_retries_property</code> YES YES <code>conf_retry_pause_property</code> YES YES <code>conf_print_time_property</code> YES YES <code>conf_health_print_time_property</code> YES YES <code>conf_dmi_property</code> YES YES <code>conf_syslog_property</code> YES YES <code>conf_tls_property</code> YES YES <code>conf_tls_enabled_property</code> YES YES <code>conf_tls_protocols_property</code> YES YES <code>conf_tls_cert_property</code> YES YES <code>conf_tls_cert_key_property</code> YES YES <code>conf_tls_ciphers_property</code> YES YES <code>conf_tls_ciphersuites_property</code> YES YES <code>conf_tls_dhparam_property</code> YES YES <code>conf_dns_property</code> YES YES <code>conf_dns_ipv6_property</code> YES YES <code>conf_dns_ttl_property</code> YES YES <code>conf_user_agent_property</code> YES YES <code>conf_verbose_property</code> YES YES <code>conf_watch_property</code> YES YES <code>conf_rebench_algo_property</code> YES YES <code>conf_bench_algo_time_property</code> YES YES <code>conf_pause_on_battery_property</code> YES YES <code>conf_pause_on_active_property</code> YES YES <code>conf_benchmark_property</code> YES YES <code>conf_benchmark_size_property</code> YES YES <code>conf_benchmark_algo_property</code> YES YES <code>conf_benchmark_submit_property</code> YES YES <code>conf_benchmark_verify_property</code> YES YES <code>conf_benchmark_seed_property</code> YES YES <code>conf_benchmark_hash_property</code> YES YES"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>The module can be installed from PyPi or Github with pip:</p> <pre><code>pip install xmrig-api\n\n# Or to install from the Github repository\npip install xmrig-api@git+https://github.com/hreikin/xmrig-api.git@main     # Can use a tag, commit hash, branch, etc\n</code></pre>"},{"location":"usage/#usage","title":"Usage","text":"<p>Here is a basic implementation of the API Wrapper now dubbed XMRigAPI.</p> <pre><code>import logging\nfrom xmrig import XMRigManager\n\n# Configure the root logger\nlogging.basicConfig(\n    level=logging.INFO,  # Set the log level for the entire application, change to DEBUG to print all responses.\n    format='[%(asctime)s - %(name)s] - %(levelname)s - %(message)s',  # Consistent format\n    handlers=[\n        logging.FileHandler(\"app.log\"),  # Log to a file\n        logging.StreamHandler()  # Log to console\n    ]\n)\nlog = logging.getLogger(\"ExampleLog\")\nname_a = \"MinerA\"\nip_a = \"127.0.0.1\"\nport_a = \"37841\"\naccess_token_a = \"SECRET\"\ntls_enabled_a = False\nname_b = \"MinerB\"\nip_b = \"127.0.0.1\"\nport_b = \"37842\"\naccess_token_b = \"SECRET\"\ntls_enabled_b = False\n\nmanager = XMRigManager()\nlog.info(\"Adding miners to the manager...\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\nmanager.add_miner(name_b, ip_b, port_b, access_token_b, tls_enabled_b)\nlog.info(\"Retrieving individual miners...\")\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(f\"Retrieved miner: {miner_a._miner_name}\")\nlog.info(f\"Retrieved miner: {miner_b._miner_name}\")\n\n# List all miners\nlog.info(\"Listing all miners...\")\nlog.info(manager.list_miners())\n# Remove miners\nlog.info(f\"Removing miner: {name_a}\")\nmanager.remove_miner(name_a)\n# List all miners\nlog.info(\"Listing all miners...\")\nlog.info(manager.list_miners())\n# Add back for rest of example code\nlog.info(f\"Adding miner back: {name_a}\")\nmanager.add_miner(name_a, ip_a, port_a, access_token_a, tls_enabled_a)\n# Get individual miners\nlog.info(\"Retrieving individual miners...\")\nminer_a = manager.get_miner(name_a)\nminer_b = manager.get_miner(name_b)\nlog.info(f\"Retrieved miner: {miner_a._miner_name}\")\nlog.info(f\"Retrieved miner: {miner_b._miner_name}\")\n# Update an individual miner's endpoints\nlog.info(f\"Updating endpoints for miner: {miner_a._miner_name}\")\nminer_a.get_endpoint(\"summary\")\nminer_a.get_endpoint(\"backends\")\nminer_a.get_endpoint(\"config\")\nlog.info(f\"Updating endpoints for miner: {miner_b._miner_name}\")\nminer_b.get_endpoint(\"summary\")\nminer_b.get_endpoint(\"backends\")\nminer_b.get_endpoint(\"config\")\n# Update all endpoints for all miners\nlog.info(\"Updating all endpoints for all miners...\")\nmanager.update_miners()\n# Pause all miners\nlog.info(\"Pausing all miners...\")\nmanager.perform_action_on_all(\"pause\")\nlog.info(\"Resuming all miners...\")\nmanager.perform_action_on_all(\"resume\")\n# Start/stop a specific miner\nlog.info(f\"Stopping miner: {miner_a._miner_name}\")\nminer_a.perform_action(\"stop\")\nlog.info(f\"Starting miner: {miner_a._miner_name}\")\nminer_a.perform_action(\"start\")\n# Pause/Resume a specific miner\nlog.info(f\"Pausing miner: {miner_b._miner_name}\")\nminer_b.perform_action(\"pause\")\nlog.info(f\"Resuming miner: {miner_b._miner_name}\")\nminer_b.perform_action(\"resume\")\n# Edit and update the miners `config.json` via the HTTP API.\nlog.info(f\"Editing config for miner: {miner_a._miner_name}\")\nminer_a.get_endpoint(\"config\")\nconfig = miner_a.config\nconfig[\"api\"][\"worker-id\"] = \"NEW_WORKER_ID\"\nminer_a.post_config(config)\n# Summary and Backends API data is available as properties in either full or individual format.\nlog.info(f\"Summary data for miner: {miner_b._miner_name}\")\nlog.info(miner_b.summary)\nlog.info(f\"Hashrates for miner: {miner_b._miner_name}\")\nlog.info(miner_b.sum_hashrate)\nlog.info(f\"Accepted jobs for miner: {miner_b._miner_name}\")\nlog.info(miner_b.sum_pool_accepted_jobs)\nlog.info(f\"Rejected jobs for miner: {miner_b._miner_name}\")\nlog.info(miner_b.sum_pool_rejected_jobs)\nlog.info(f\"Current difficulty for miner: {miner_b._miner_name}\")\nlog.info(miner_b.sum_current_difficulty)\n</code></pre> <p>For more examples, visit the Examples page.</p>"},{"location":"reference/classes/api/","title":"XMRigAPI","text":"<p>A class to interact with the XMRig miner API.</p> <p>Attributes:</p> Name Type Description <code>_miner_name</code> <code>str</code> <p>Unique name for the miner.</p> <code>_ip</code> <code>str</code> <p>IP address of the XMRig API.</p> <code>_port</code> <code>int</code> <p>Port of the XMRig API.</p> <code>_access_token</code> <code>str</code> <p>Access token for authorization.</p> <code>_base_url</code> <code>str</code> <p>Base URL for the XMRig API.</p> <code>_json_rpc_url</code> <code>str</code> <p>URL for the JSON RPC.</p> <code>_summary_url</code> <code>str</code> <p>URL for the summary endpoint.</p> <code>_backends_url</code> <code>str</code> <p>URL for the backends endpoint.</p> <code>_config_url</code> <code>str</code> <p>URL for the config endpoint.</p> <code>_headers</code> <code>dict</code> <p>Headers for all API/RPC requests.</p> <code>_json_rpc_payload</code> <code>dict</code> <p>Default payload to send with RPC request.</p> <code>_summary_cache</code> <code>dict</code> <p>Cached summary endpoint data.</p> <code>_backends_cache</code> <code>list</code> <p>Cached backends endpoint data.</p> <code>_config_cache</code> <code>dict</code> <p>Cached config endpoint data.</p> <code>_summary_table_name</code> <code>str</code> <p>Table name for summary data.</p> <code>_backends_table_name</code> <code>str</code> <p>Table name for backends data.</p> <code>_config_table_name</code> <code>str</code> <p>Table name for config data.</p> Source code in <code>xmrig/api.py</code> <pre><code>class XMRigAPI:\n    \"\"\"\n    A class to interact with the XMRig miner API.\n\n    Attributes:\n        _miner_name (str): Unique name for the miner.\n        _ip (str): IP address of the XMRig API.\n        _port (int): Port of the XMRig API.\n        _access_token (str): Access token for authorization.\n        _base_url (str): Base URL for the XMRig API.\n        _json_rpc_url (str): URL for the JSON RPC.\n        _summary_url (str): URL for the summary endpoint.\n        _backends_url (str): URL for the backends endpoint.\n        _config_url (str): URL for the config endpoint.\n        _headers (dict): Headers for all API/RPC requests.\n        _json_rpc_payload (dict): Default payload to send with RPC request.\n        _summary_cache (dict): Cached summary endpoint data.\n        _backends_cache (list): Cached backends endpoint data.\n        _config_cache (dict): Cached config endpoint data.\n        _summary_table_name (str): Table name for summary data.\n        _backends_table_name (str): Table name for backends data.\n        _config_table_name (str): Table name for config data.\n    \"\"\"\n\n    def __init__(self, miner_name, ip, port, access_token = None, tls_enabled = False, db_url = None):\n        \"\"\"\n        Initializes the XMRig instance with the provided IP, port, and access token.\n\n        The `ip` can be either an IP address or domain name with its TLD (e.g. `example.com`). The schema is not \n        required and the appropriate one will be chosen based on the `tls_enabled` value.\n\n        Args:\n            miner_name (str): A unique name for the miner.\n            ip (str): IP address or domain of the XMRig API.\n            port (int): Port of the XMRig API.\n            access_token (str, optional): Access token for authorization. Defaults to None.\n            tls_enabled (bool, optional): TLS status of the miner/API. Defaults to False.\n            db_url (str, optional): Database URL for storing miner data. Defaults to None.\n        \"\"\"\n        self._miner_name = miner_name\n        self._ip = ip\n        self._port = port\n        self._access_token = access_token\n        self._tls_enabled = tls_enabled\n        self._base_url = f\"https://{ip}:{port}\" if self._tls_enabled else f\"http://{ip}:{port}\"\n        self._db_url = db_url\n        self._json_rpc_url = f\"{self._base_url}/json_rpc\"\n        self._summary_url = f\"{self._base_url}/2/summary\"\n        self._backends_url = f\"{self._base_url}/2/backends\"\n        self._config_url = f\"{self._base_url}/2/config\"\n        self._summary_cache = None\n        self._backends_cache = None\n        self._config_cache = None\n        self._summary_table_name = \"summary\"\n        self._backends_table_name = \"backends\"\n        self._config_table_name = \"config\"\n        self._headers = {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Host\": f\"{self._base_url}\",\n            \"Connection\": \"keep-alive\",\n            \"Authorization\": f\"Bearer {self._access_token}\"\n        }\n        self._json_rpc_payload = {\n            \"method\": None,\n            \"jsonrpc\": \"2.0\",\n            \"id\": 1,\n        }\n        self.get_all_responses()\n        log.info(f\"XMRigAPI initialized for {self._base_url}\")\n\n    def _update_cache(self, response, endpoint):\n        \"\"\"\n        Updates the cached data for an endpoint with the supplied response data.\n\n        Args:\n            response (dict | list): The response data.\n            endpoint (str): The endpoint from which the data is retrieved.\n        \"\"\"\n        if endpoint == \"summary\":\n            self._summary_cache = response\n        if endpoint == \"backends\":\n            self._backends_cache = response\n        if endpoint == \"config\":\n            self._config_cache = response\n\n    def _get_data_from_cache(self, response, keys, table_name, selection):\n        \"\"\"\n        Retrieves the data from the response using the provided keys. Falls back to the database if the data is not available.\n\n        Args:\n            response (dict | list): The response data.\n            keys (list): The keys to use to retrieve the data.\n            table_name (str | list): The table name or list of table names to use for fallback database retrieval.\n            selection (str): Column to select from the table.\n\n        Returns:\n            Any: The retrieved data, or a default string value of \"N/A\" if not available.\n\n        Raises:\n            JSONDecodeError: If there is an error decoding the JSON response.\n            KeyError: If a key is not found in the response data.\n            XMRigDatabaseError: If there is an error retrieving data from the database.\n        \"\"\"\n        data = \"N/A\"\n        try:\n            if response == None:\n                # TODO: Use this exception or requests.exceptions.JSONDecodeError ?\n                raise JSONDecodeError(\"No response data available, trying database.\", \"\", 0)\n            else:\n                data = response\n                if len(keys) &gt; 0:\n                    for key in keys:\n                        data = data[key]\n        except JSONDecodeError as e:\n            if self._db_url is not None:\n                try:\n                    return self._fallback_to_db(table_name, selection)\n                except XMRigDatabaseError as db_e:\n                    log.error(f\"An error occurred fetching the backends data from the database: {db_e}\")\n                    data = \"N/A\"\n        except KeyError as e:\n            log.error(f\"Key not found in the response data: {e}\")\n            data = \"N/A\"\n        return data\n\n    def _fallback_to_db(self, table_name, selection):\n        \"\"\"\n        Fallback to the database if the data is not available in the cache.\n\n        Args:\n            db_url (str): Database URL for creating the engine.\n            table_name (str): Name of the table to retrieve data from.\n            selection (str): Column to select from the table.\n\n        Returns:\n            Any: The retrieved data, or a default string value of \"N/A\" if not available.\n        \"\"\"\n        result = XMRigDatabase.retrieve_data_from_db(self._db_url, table_name, self._miner_name, selection)\n        return result[0].get(selection, \"N/A\") if len(result) &gt; 0 else \"N/A\"\n\n    def get_from_db(self, table_name, selection):\n        \"\"\"\n        Retrieve data from the database.\n\n        Args:\n            table_name (str): Name of the table to retrieve data from.\n            selection (str): Column to select from the table.\n\n        Returns:\n            list: List of dictionaries containing the retrieved data.\n        \"\"\"\n        return XMRigDatabase.retrieve_data_from_db(self._db_url, table_name, self._miner_name, selection)\n\n    def set_auth_header(self):\n        \"\"\"\n        Update the Authorization header for the HTTP requests.\n\n        Returns:\n            bool: True if the Authorization header was changed, or False if an error occurred.\n\n        Raises:\n            XMRigAuthorizationError: An error occurred setting the Authorization Header.\n        \"\"\"\n        try:\n            self._headers[\"Authorization\"] = f\"Bearer {self._access_token}\"\n            log.debug(f\"Authorization header successfully changed.\")\n            return True\n        except XMRigAuthorizationError as e:\n            raise XMRigAuthorizationError(e, traceback.format_exc(), f\"An error occurred setting the Authorization Header: {e}\") from e\n\n    def get_endpoint(self, endpoint):\n        \"\"\"\n        Updates the cached data from the specified XMRig API endpoint.\n\n        Args:\n            endpoint (str): The endpoint to fetch data from. Should be one of 'summary', 'backends', or 'config'.\n\n        Returns:\n            bool: True if the cached data is successfully updated or False if an error occurred.\n\n        Raises:\n            XMRigAuthorizationError: If an authorization error occurs.\n            XMRigConnectionError: If a connection error occurs.\n            XMRigAPIError: If a general API error occurs.\n        \"\"\"\n        url_map = {\n            \"summary\": self._summary_url,\n            \"backends\": self._backends_url,\n            \"config\": self._config_url\n        }\n        try:\n            response = requests.get(url_map[endpoint], headers=self._headers)\n            if response.status_code == 401:\n                raise XMRigAuthorizationError(message = \"401 UNAUTHORIZED\")\n            response.raise_for_status()\n            try:\n                json_response = response.json()\n            except requests.exceptions.JSONDecodeError as e:\n                json_response = None\n                raise requests.exceptions.JSONDecodeError(\"JSON decode error\", response.text, response.status_code)\n            else:\n                self._update_cache(json_response, endpoint)\n                log.debug(f\"{endpoint.capitalize()} endpoint successfully fetched.\")\n                if self._db_url is not None:\n                    XMRigDatabase._insert_data_to_db(json_response, self._miner_name, endpoint, self._db_url)\n                return True\n        except requests.exceptions.JSONDecodeError as e:\n            # INFO: Due to a bug in XMRig, the first 15 minutes a miner is running/restarted its backends \n            # INFO: endpoint will return a malformed JSON response, allow the program to continue running \n            # INFO: to bypass this bug for now until a fix is provided by the XMRig developers.\n            log.error(\"Due to a bug in XMRig, the first 15 minutes a miner is running/restarted its backends endpoint will return a malformed JSON response. If that is the case then this error/warning can be safely ignored.\")\n            log.error(f\"An error occurred decoding the {endpoint} response: {e}\")\n            return False\n        except requests.exceptions.RequestException as e:\n            raise XMRigConnectionError(e, traceback.format_exc(), f\"An error occurred while connecting to {url_map[endpoint]}:\") from e\n        except XMRigAuthorizationError as e:\n            raise XMRigAuthorizationError(e, traceback.format_exc(), f\"An authorization error occurred updating the {endpoint} endpoint, please provide a valid access token:\") from e\n        except Exception as e:\n            raise XMRigAPIError(e, traceback.format_exc(), f\"An error occurred updating the {endpoint} endpoint:\") from e\n\n    def post_config(self, config):\n        \"\"\"\n        Updates the miners config data via the XMRig API.\n\n        Args:\n            config (dict): Configuration data to update.\n\n        Returns:\n            bool: True if the config was changed successfully, or False if an error occurred.\n\n        Raises:\n            XMRigAuthorizationError: If an authorization error occurs.\n            XMRigConnectionError: If a connection error occurs.\n            XMRigAPIError: If a general API error occurs.\n        \"\"\"\n        try:\n            response = requests.post(self._config_url, json = config, headers = self._headers)\n            if response.status_code == 401:\n                raise XMRigAuthorizationError()\n            # Raise an HTTPError for bad responses (4xx and 5xx)\n            response.raise_for_status()\n            # Get the updated config data from the endpoint and update the cached data\n            self.get_endpoint(\"config\")\n            log.debug(f\"Config endpoint successfully updated.\")\n            return True\n        except requests.exceptions.JSONDecodeError as e:\n            raise requests.exceptions.JSONDecodeError(\"JSON decode error\", response.text, response.status_code)\n        except requests.exceptions.RequestException as e:\n            raise XMRigConnectionError(e, traceback.format_exc(), f\"An error occurred while connecting to {self._config_url}:\") from e\n        except XMRigAuthorizationError as e:\n            raise XMRigAuthorizationError(e, traceback.format_exc(), f\"An authorization error occurred posting the config, please provide a valid access token:\") from e\n        except Exception as e:\n            raise XMRigAPIError(e, traceback.format_exc(), f\"An error occurred posting the config:\") from e\n\n    def get_all_responses(self):\n        \"\"\"\n        Retrieves all responses from the API.\n\n        Returns:\n            bool: True if successful, or False if an error occurred.\n\n        Raises:\n            XMRigAuthorizationError: If an authorization error occurs.\n            XMRigConnectionError: If a connection error occurs.\n            XMRigAPIError: If a general API error occurs.\n        \"\"\"\n        summary_success = self.get_endpoint(\"summary\")\n        backends_success = self.get_endpoint(\"backends\")\n        config_success = self.get_endpoint(\"config\")\n        return summary_success and backends_success and config_success\n\n    def perform_action(self, action):\n        \"\"\"\n        Controls the miner by performing the specified action.\n\n        Args:\n            action (str): The action to perform. Valid actions are 'pause', 'resume', 'stop', 'start'.\n\n        Returns:\n            bool: True if the action was successfully performed, or False if an error occurred.\n\n        Raises:\n            XMRigConnectionError: If a connection error occurs.\n            XMRigAPIError: If a general API error occurs.\n        \"\"\"\n        try:\n            # TODO: The `start` json RPC method is not implemented by XMRig yet, use alternative implementation \n            # TODO: until PR 3030 is merged, see the following issues and PRs for more information: \n            # TODO: https://github.com/xmrig/xmrig/issues/2826#issuecomment-1146465641\n            # TODO: https://github.com/xmrig/xmrig/issues/3220#issuecomment-1450691309\n            # TODO: https://github.com/xmrig/xmrig/pull/3030\n            if action == \"start\":\n                self.get_endpoint(\"config\")\n                self.post_config(self._config_cache)\n                log.debug(f\"Miner successfully started.\")\n            else:\n                url = f\"{self._json_rpc_url}\"\n                payload = self._json_rpc_payload\n                payload[\"method\"] = action\n                response = requests.post(url, json=payload, headers=self._headers)\n                response.raise_for_status()\n                log.debug(f\"Miner successfully {action}ed.\")\n            return True\n        except requests.exceptions.RequestException as e:\n            raise XMRigConnectionError(e, traceback.format_exc(), f\"A connection error occurred {action}ing the miner:\") from e\n        except Exception as e:\n            raise XMRigAPIError(e, traceback.format_exc(), f\"An error occurred {action}ing the miner:\") from e\n\n    ############################\n    # Full data from endpoints #\n    ############################\n\n    @property\n    def summary(self):\n        \"\"\"\n        Retrieves the entire cached summary endpoint data.\n\n        Returns:\n            dict: Current summary response, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [], self._summary_table_name, \"full_json\")\n\n    @property\n    def backends(self):\n        \"\"\"\n        Retrieves the entire cached backends endpoint data.\n\n        Returns:\n            list: Current backends response, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [], self._backends_table_name, \"full_json\")\n\n    @property\n    def config(self):\n        \"\"\"\n        Retrieves the entire cached config endpoint data.\n\n        Returns:\n            dict: Current config response, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [], self._config_table_name, \"full_json\")\n\n    ##############################\n    # Data from summary endpoint #\n    ##############################\n\n    @property\n    def sum_id(self):\n        \"\"\"\n        Retrieves the cached ID information from the summary data.\n\n        Returns:\n            str: ID information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"id\"], self._summary_table_name, \"id\")\n\n    @property\n    def sum_worker_id(self):\n        \"\"\"\n        Retrieves the cached worker ID information from the summary data.\n\n        Returns:\n            str: Worker ID information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"worker_id\"], self._summary_table_name, \"worker_id\")\n\n    @property\n    def sum_uptime(self):\n        \"\"\"\n        Retrieves the cached current uptime from the summary data.\n\n        Returns:\n            int: Current uptime in seconds, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"uptime\"], self._summary_table_name, \"uptime\")\n\n    @property\n    def sum_uptime_readable(self):\n        \"\"\"\n        Retrieves the cached uptime in a human-readable format from the summary data.\n\n        Returns:\n            str: Uptime in the format \"days, hours:minutes:seconds\", or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._summary_cache, [\"uptime\"], self._summary_table_name, \"uptime\")\n        return str(timedelta(seconds=result)) if result != \"N/A\" else result\n\n    @property\n    def sum_restricted(self):\n        \"\"\"\n        Retrieves the cached current restricted status from the summary data.\n\n        Returns:\n            bool: Current restricted status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"restricted\"], self._summary_table_name, \"restricted\")\n\n    @property\n    def sum_resources(self):\n        \"\"\"\n        Retrieves the cached resources information from the summary data.\n\n        Returns:\n            dict: Resources information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"resources\"], self._summary_table_name, \"full_json\")\n\n    @property\n    def sum_memory_usage(self):\n        \"\"\"\n        Retrieves the cached memory usage from the summary data.\n\n        Returns:\n            dict: Memory usage information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"resources\", \"memory\"], self._summary_table_name, \"resources_memory\")\n\n    @property\n    def sum_free_memory(self):\n        \"\"\"\n        Retrieves the cached free memory from the summary data.\n\n        Returns:\n            int: Free memory information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"resources\", \"memory\", \"free\"], self._summary_table_name, \"resources_memory_free\")\n\n    @property\n    def sum_total_memory(self):\n        \"\"\"\n        Retrieves the cached total memory from the summary data.\n\n        Returns:\n            int: Total memory information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"resources\", \"memory\", \"total\"], self._summary_table_name, \"resources_memory_total\")\n\n    @property\n    def sum_resident_set_memory(self):\n        \"\"\"\n        Retrieves the cached resident set memory from the summary data.\n\n        Returns:\n            int: Resident set memory information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"resources\", \"memory\", \"resident_set_memory\"], self._summary_table_name, \"resources_memory_rsm\")\n\n    @property\n    def sum_load_average(self):\n        \"\"\"\n        Retrieves the cached load average from the summary data.\n\n        Returns:\n            list: Load average information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"resources\", \"load_average\"], self._summary_table_name, \"resources_load_average\")\n\n    @property\n    def sum_hardware_concurrency(self):\n        \"\"\"\n        Retrieves the cached hardware concurrency from the summary data.\n\n        Returns:\n            int: Hardware concurrency information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"resources\", \"hardware_concurrency\"], self._summary_table_name, \"resources_hardware_concurrency\")\n\n    @property\n    def sum_features(self):\n        \"\"\"\n        Retrieves the cached supported features information from the summary data.\n\n        Returns:\n            list: Supported features information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"features\"], self._summary_table_name, \"features\")\n\n    @property\n    def sum_results(self):\n        \"\"\"\n        Retrieves the cached results information from the summary data.\n\n        Returns:\n            dict: Results information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"results\"], self._summary_table_name, \"results\")\n\n    @property\n    def sum_current_difficulty(self):\n        \"\"\"\n        Retrieves the cached current difficulty from the summary data.\n\n        Returns:\n            int: Current difficulty, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"results\", \"diff_current\"], self._summary_table_name, \"results_diff_current\")\n\n    @property\n    def sum_good_shares(self):\n        \"\"\"\n        Retrieves the cached good shares from the summary data.\n\n        Returns:\n            int: Good shares, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"results\", \"shares_good\"], self._summary_table_name, \"results_shares_good\")\n\n    @property\n    def sum_total_shares(self):\n        \"\"\"\n        Retrieves the cached total shares from the summary data.\n\n        Returns:\n            int: Total shares, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"results\", \"shares_total\"], self._summary_table_name, \"results_shares_total\")\n\n    @property\n    def sum_avg_time(self):\n        \"\"\"\n        Retrieves the cached average time information from the summary data.\n\n        Returns:\n            int: Average time information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"results\", \"avg_time\"], self._summary_table_name, \"results_avg_time\")\n\n    @property\n    def sum_avg_time_ms(self):\n        \"\"\"\n        Retrieves the cached average time in `ms` information from the summary data.\n\n        Returns:\n            int: Average time in `ms` information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"results\", \"avg_time_ms\"], self._summary_table_name, \"results_avg_time_ms\")\n\n    @property\n    def sum_total_hashes(self):\n        \"\"\"\n        Retrieves the cached total number of hashes from the summary data.\n\n        Returns:\n            int: Total number of hashes, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"results\", \"hashes_total\"], self._summary_table_name, \"results_hashes_total\")\n\n    @property\n    def sum_best_results(self):\n        \"\"\"\n        Retrieves the cached best results from the summary data.\n\n        Returns:\n            list: Best results, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"results\", \"best\"], self._summary_table_name, \"results_best\")\n\n    @property\n    def sum_algorithm(self):\n        \"\"\"\n        Retrieves the cached current mining algorithm from the summary data.\n\n        Returns:\n            str: Current mining algorithm, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"algo\"], self._summary_table_name, \"algo\")\n\n    @property\n    def sum_connection(self):\n        \"\"\"\n        Retrieves the cached connection information from the summary data.\n\n        Returns:\n            dict: Connection information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\"], self._summary_table_name, \"connection\")\n\n    @property\n    def sum_pool_info(self):\n        \"\"\"\n        Retrieves the cached pool information from the summary data.\n\n        Returns:\n            str: Pool information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"pool\"], self._summary_table_name, \"connection_pool\")\n\n    @property\n    def sum_pool_ip_address(self):\n        \"\"\"\n        Retrieves the cached IP address from the summary data.\n\n        Returns:\n            str: IP address, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"ip\"], self._summary_table_name, \"connection_ip\")\n\n    @property\n    def sum_pool_uptime(self):\n        \"\"\"\n        Retrieves the cached pool uptime information from the summary data.\n\n        Returns:\n            int: Pool uptime information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"uptime\"], self._summary_table_name, \"connection_uptime\")\n\n    @property\n    def sum_pool_uptime_ms(self):\n        \"\"\"\n        Retrieves the cached pool uptime in ms from the summary data.\n\n        Returns:\n            int: Pool uptime in ms, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"uptime_ms\"], self._summary_table_name, \"connection_uptime_ms\")\n\n    @property\n    def sum_pool_ping(self):\n        \"\"\"\n        Retrieves the cached pool ping information from the summary data.\n\n        Returns:\n            int: Pool ping information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"ping\"], self._summary_table_name, \"connection_ping\")\n\n    @property\n    def sum_pool_failures(self):\n        \"\"\"\n        Retrieves the cached pool failures information from the summary data.\n\n        Returns:\n            int: Pool failures information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"failures\"], self._summary_table_name, \"connection_failures\")\n\n    @property\n    def sum_pool_tls(self):\n        \"\"\"\n        Retrieves the cached pool tls status from the summary data.\n\n        Returns:\n            bool: Pool tls status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"tls\"], self._summary_table_name, \"connection_tls\")\n\n    @property\n    def sum_pool_tls_fingerprint(self):\n        \"\"\"\n        Retrieves the cached pool tls fingerprint information from the summary data.\n\n        Returns:\n            str: Pool tls fingerprint information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"tls-fingerprint\"], self._summary_table_name, \"connection_tls_fingerprint\")\n\n    @property\n    def sum_pool_algo(self):\n        \"\"\"\n        Retrieves the cached pool algorithm information from the summary data.\n\n        Returns:\n            str: Pool algorithm information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"algo\"], self._summary_table_name, \"connection_algo\")\n\n    @property\n    def sum_pool_diff(self):\n        \"\"\"\n        Retrieves the cached pool difficulty information from the summary data.\n\n        Returns:\n            int: Pool difficulty information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"diff\"], self._summary_table_name, \"connection_diff\")\n\n    @property\n    def sum_pool_accepted_jobs(self):\n        \"\"\"\n        Retrieves the cached number of accepted jobs from the summary data.\n\n        Returns:\n            int: Number of accepted jobs, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"accepted\"], self._summary_table_name, \"connection_accepted\")\n\n    @property\n    def sum_pool_rejected_jobs(self):\n        \"\"\"\n        Retrieves the cached number of rejected jobs from the summary data.\n\n        Returns:\n            int: Number of rejected jobs, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache,  [\"connection\", \"rejected\"], self._summary_table_name, \"connection_rejected\")\n\n    @property\n    def sum_pool_average_time(self):\n        \"\"\"\n        Retrieves the cached pool average time information from the summary data.\n\n        Returns:\n            int: Pool average time information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"avg_time\"], self._summary_table_name, \"connection_avg_time\")\n\n    @property\n    def sum_pool_average_time_ms(self):\n        \"\"\"\n        Retrieves the cached pool average time in ms from the summary data.\n\n        Returns:\n            int: Pool average time in ms, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"avg_time_ms\"], self._summary_table_name, \"connection_avg_time_ms\")\n\n    @property\n    def sum_pool_total_hashes(self):\n        \"\"\"\n        Retrieves the cached pool total hashes information from the summary data.\n\n        Returns:\n            int: Pool total hashes information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"connection\", \"hashes_total\"], self._summary_table_name, \"connection_hashes_total\")\n\n    @property\n    def sum_version(self):\n        \"\"\"\n        Retrieves the cached version information from the summary data.\n\n        Returns:\n            str: Version information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"version\"], self._summary_table_name, \"version\")\n\n    @property\n    def sum_kind(self):\n        \"\"\"\n        Retrieves the cached kind information from the summary data.\n\n        Returns:\n            str: Kind information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"kind\"], self._summary_table_name, \"kind\")\n\n    @property\n    def sum_ua(self):\n        \"\"\"\n        Retrieves the cached user agent information from the summary data.\n\n        Returns:\n            str: User agent information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"ua\"], self._summary_table_name, \"ua\")\n\n    @property\n    def sum_cpu_info(self):\n        \"\"\"\n        Retrieves the cached CPU information from the summary data.\n\n        Returns:\n            dict: CPU information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\"], self._summary_table_name, \"cpu\")\n\n    @property\n    def sum_cpu_brand(self):\n        \"\"\"\n        Retrieves the cached CPU brand information from the summary data.\n\n        Returns:\n            str: CPU brand information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"brand\"], self._summary_table_name, \"cpu_brand\")\n\n    @property\n    def sum_cpu_family(self):\n        \"\"\"\n        Retrieves the cached CPU family information from the summary data.\n\n        Returns:\n            int: CPU family information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"family\"], self._summary_table_name, \"cpu_family\")\n\n    @property\n    def sum_cpu_model(self):\n        \"\"\"\n        Retrieves the cached CPU model information from the summary data.\n\n        Returns:\n            int: CPU model information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"model\"], self._summary_table_name, \"cpu_model\")\n\n    @property\n    def sum_cpu_stepping(self):\n        \"\"\"\n        Retrieves the cached CPU stepping information from the summary data.\n\n        Returns:\n            int: CPU stepping information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache,  [\"cpu\", \"stepping\"], self._summary_table_name, \"cpu_stepping\")\n\n    @property\n    def sum_cpu_proc_info(self):\n        \"\"\"\n        Retrieves the cached CPU frequency information from the summary data.\n\n        Returns:\n            int: CPU frequency information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"proc_info\"], self._summary_table_name, \"cpu_proc_info\")\n\n    @property\n    def sum_cpu_aes(self):\n        \"\"\"\n        Retrieves the cached CPU AES support status from the summary data.\n\n        Returns:\n            bool: CPU AES support status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"aes\"], self._summary_table_name, \"cpu_aes\")\n\n    @property\n    def sum_cpu_avx2(self):\n        \"\"\"\n        Retrieves the cached CPU AVX2 support status from the summary data.\n\n        Returns:\n            bool: CPU AVX2 support status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"avx2\"], self._summary_table_name, \"cpu_avx2\")\n\n    @property\n    def sum_cpu_x64(self):\n        \"\"\"\n        Retrieves the cached CPU x64 support status from the summary data.\n\n        Returns:\n            bool: CPU x64 support status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"x64\"], self._summary_table_name, \"cpu_x64\")\n\n    @property\n    def sum_cpu_64_bit(self):\n        \"\"\"\n        Retrieves the cached CPU 64-bit support status from the summary data.\n\n        Returns:\n            bool: CPU 64-bit support status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"64_bit\"], self._summary_table_name, \"cpu_64_bit\")\n\n    @property\n    def sum_cpu_l2(self):\n        \"\"\"\n        Retrieves the cached CPU L2 cache size from the summary data.\n\n        Returns:\n            int: CPU L2 cache size, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"l2\"], self._summary_table_name, \"cpu_l2\")\n\n    @property\n    def sum_cpu_l3(self):\n        \"\"\"\n        Retrieves the cached CPU L3 cache size from the summary data.\n\n        Returns:\n            int: CPU L3 cache size, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"l3\"], self._summary_table_name, \"cpu_l3\")\n\n    @property\n    def sum_cpu_cores(self):\n        \"\"\"\n        Retrieves the cached CPU cores count from the summary data.\n\n        Returns:\n            int: CPU cores count, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"cores\"], self._summary_table_name, \"cpu_cores\")\n\n    @property\n    def sum_cpu_threads(self):\n        \"\"\"\n        Retrieves the cached CPU threads count from the summary data.\n\n        Returns:\n            int: CPU threads count, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"threads\"], self._summary_table_name, \"cpu_threads\")\n\n    @property\n    def sum_cpu_packages(self):\n        \"\"\"\n        Retrieves the cached CPU packages count from the summary data.\n\n        Returns:\n            int: CPU packages count, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"packages\"], self._summary_table_name, \"cpu_packages\")\n\n    @property\n    def sum_cpu_nodes(self):\n        \"\"\"\n        Retrieves the cached CPU nodes count from the summary data.\n\n        Returns:\n            int: CPU nodes count, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"nodes\"], self._summary_table_name, \"cpu_nodes\")\n\n    @property\n    def sum_cpu_backend(self):\n        \"\"\"\n        Retrieves the cached CPU backend information from the summary data.\n\n        Returns:\n            str: CPU backend information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache,  [\"cpu\", \"backend\"], self._summary_table_name, \"cpu_backend\")\n\n    @property\n    def sum_cpu_msr(self):\n        \"\"\"\n        Retrieves the cached CPU MSR information from the summary data.\n\n        Returns:\n            str: CPU MSR information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"msr\"], self._summary_table_name, \"cpu_msr\")\n\n    @property\n    def sum_cpu_assembly(self):\n        \"\"\"\n        Retrieves the cached CPU assembly information from the summary data.\n\n        Returns:\n            str: CPU assembly information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache,  [\"cpu\", \"assembly\"], self._summary_table_name, \"cpu_assembly\")\n\n    @property\n    def sum_cpu_arch(self):\n        \"\"\"\n        Retrieves the cached CPU architecture information from the summary data.\n\n        Returns:\n            str: CPU architecture information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"arch\"], self._summary_table_name, \"cpu_arch\")\n\n    @property\n    def sum_cpu_flags(self):\n        \"\"\"\n        Retrieves the cached CPU flags information from the summary data.\n\n        Returns:\n            list: CPU flags information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"cpu\", \"flags\"], self._summary_table_name, \"cpu_flags\")\n\n    @property\n    def sum_donate_level(self):\n        \"\"\"\n        Retrieves the cached donate level information from the summary data.\n\n        Returns:\n            int: Donate level information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"donate_level\"], self._summary_table_name, \"donate_level\")\n\n    @property\n    def sum_paused(self):\n        \"\"\"\n        Retrieves the cached paused status from the summary data.\n\n        Returns:\n            bool: Paused status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"paused\"], self._summary_table_name, \"paused\")\n\n    @property\n    def sum_algorithms(self):\n        \"\"\"\n        Retrieves the cached algorithms information from the summary data.\n\n        Returns:\n            list: Algorithms information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"algorithms\"], self._summary_table_name, \"algorithms\")\n\n    @property\n    def sum_hashrate(self):\n        \"\"\"\n        Retrieves the cached hashrate information from the summary data.\n\n        Returns:\n            dict: Hashrate information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"hashrate\"], self._summary_table_name, \"hashrate\")\n\n    @property\n    def sum_hashrate_total(self):\n        \"\"\"\n        Retrieves the cached hashrate toal information from the summary data.\n\n        Returns:\n            list: Hashrate total information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"hashrate\", \"total\"], self._summary_table_name, \"hashrate_total\")\n\n    @property\n    def sum_hashrate_10s(self):\n        \"\"\"\n        Retrieves the cached hashrate for the last 10 seconds from the summary data.\n\n        Returns:\n            float: Hashrate for the last 10 seconds, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._summary_cache, [\"hashrate\", \"total\"], self._summary_table_name, \"hashrate_total\")\n        return result[0] if result != \"N/A\" else result\n\n    @property\n    def sum_hashrate_1m(self):\n        \"\"\"\n        Retrieves the cached hashrate for the last 1 minute from the summary data.\n\n        Returns:\n            float: Hashrate for the last 1 minute, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._summary_cache, [\"hashrate\", \"total\"], self._summary_table_name, \"hashrate_total\")\n        return result[1] if result != \"N/A\" else result\n\n    @property\n    def sum_hashrate_15m(self):\n        \"\"\"\n        Retrieves the cached hashrate for the last 15 minutes from the summary data.\n\n        Returns:\n            float: Hashrate for the last 15 minutes, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._summary_cache, [\"hashrate\", \"total\"], self._summary_table_name, \"hashrate_total\")\n        return result[2] if result != \"N/A\" else result\n\n    @property\n    def sum_hashrate_highest(self):\n        \"\"\"\n        Retrieves the cached highest hashrate from the summary data.\n\n        Returns:\n            float: Highest hashrate, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"hashrate\", \"highest\"], self._summary_table_name, \"hashrate_highest\")\n\n    @property\n    def sum_hugepages(self):\n        \"\"\"\n        Retrieves the cached hugepages information from the summary data.\n\n        Returns:\n            list: Hugepages information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._summary_cache, [\"hugepages\"], self._summary_table_name, \"hugepages\")\n\n    ###############################\n    # Data from backends endpoint #\n    ###############################\n\n    @property\n    def enabled_backends(self):\n        \"\"\"\n        Retrieves the enabled backends from the backends data.\n\n        Returns:\n            list: Enabled backends, or \"N/A\" if not available.\n        \"\"\"\n        enabled_backends = []\n        if self._backends_cache and len(self._backends_cache) &gt;= 1:\n            if self._get_data_from_cache(self._backends_cache, [0, \"enabled\"], self._backends_table_name, \"cpu_enabled\"):\n                enabled_backends.append(self._get_data_from_cache(self._backends_cache, [0, \"type\"], self._backends_table_name, \"cpu_type\"))\n        if self._backends_cache and len(self._backends_cache) &gt;= 2:\n            if self._get_data_from_cache(self._backends_cache, [1, \"enabled\"], self._backends_table_name, \"opencl_enabled\"):\n                enabled_backends.append(self._get_data_from_cache(self._backends_cache, [1, \"type\"], self._backends_table_name, \"opencl_type\"))\n            if self._get_data_from_cache(self._backends_cache, [2, \"enabled\"], self._backends_table_name, \"cuda_enabled\"):\n                enabled_backends.append(self._get_data_from_cache(self._backends_cache, [2, \"type\"], self._backends_table_name, \"cuda_type\"))\n        return enabled_backends\n\n    @property\n    def be_cpu_type(self):\n        \"\"\"\n        Retrieves the CPU backend type from the backends data.\n\n        Returns:\n            str: CPU backend type, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"type\"], self._backends_table_name, \"cpu_type\")\n\n    @property\n    def be_cpu_enabled(self):\n        \"\"\"\n        Retrieves the CPU backend enabled status from the backends data.\n\n        Returns:\n            bool: CPU backend enabled status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"enabled\"], self._backends_table_name, \"cpu_enabled\")\n\n    @property\n    def be_cpu_algo(self):\n        \"\"\"\n        Retrieves the CPU backend algorithm from the backends data.\n\n        Returns:\n            str: CPU backend algorithm, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"algo\"], self._backends_table_name, \"cpu_algo\")\n\n    @property\n    def be_cpu_profile(self):\n        \"\"\"\n        Retrieves the CPU backend profile from the backends data.\n\n        Returns:\n            str: CPU backend profile, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"profile\"], self._backends_table_name, \"cpu_profile\")\n\n    @property\n    def be_cpu_hw_aes(self):\n        \"\"\"\n        Retrieves the CPU backend hardware AES support status from the backends data.\n\n        Returns:\n            bool: CPU backend hardware AES support status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"hw-aes\"], self._backends_table_name, \"cpu_hw_aes\")\n\n    @property\n    def be_cpu_priority(self):\n        \"\"\"\n        Retrieves the CPU backend priority from the backends data.\n\n        Returns:\n            int: CPU backend priority, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"priority\"], self._backends_table_name, \"cpu_priority\")\n\n    @property\n    def be_cpu_msr(self):\n        \"\"\"\n        Retrieves the CPU backend MSR support status from the backends data.\n\n        Returns:\n            bool: CPU backend MSR support status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"msr\"], self._backends_table_name, \"cpu_msr\")\n\n    @property\n    def be_cpu_asm(self):\n        \"\"\"\n        Retrieves the CPU backend assembly information from the backends data.\n\n        Returns:\n            str: CPU backend assembly information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"asm\"], self._backends_table_name, \"cpu_asm\")\n\n    @property\n    def be_cpu_argon2_impl(self):\n        \"\"\"\n        Retrieves the CPU backend Argon2 implementation from the backends data.\n\n        Returns:\n            str: CPU backend Argon2 implementation, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"argon2-impl\"], self._backends_table_name, \"cpu_argon2_impl\")\n\n    @property\n    def be_cpu_hugepages(self):\n        \"\"\"\n        Retrieves the CPU backend hugepages information from the backends data.\n\n        Returns:\n            list: CPU backend hugepages information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"hugepages\"], self._backends_table_name, \"cpu_hugepages\")\n\n    @property\n    def be_cpu_memory(self):\n        \"\"\"\n        Retrieves the CPU backend memory information from the backends data.\n\n        Returns:\n            int: CPU backend memory information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"memory\"], self._backends_table_name, \"cpu_memory\")\n\n    @property\n    def be_cpu_hashrates(self):\n        \"\"\"\n        Retrieves the CPU backend hashrates from the backends data.\n\n        Returns:\n            list: CPU backend hashrates, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"hashrate\"], self._backends_table_name, \"cpu_hashrate\")\n\n    @property\n    def be_cpu_hashrate_10s(self):\n        \"\"\"\n        Retrieves the CPU backend hashrate for the last 10 seconds from the backends data.\n\n        Returns:\n            float: CPU backend hashrate for the last 10 seconds, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._backends_cache, [0, \"hashrate\"], self._backends_table_name, \"cpu_hashrate\")\n        return result[0] if result != \"N/A\" else result\n\n    @property\n    def be_cpu_hashrate_1m(self):\n        \"\"\"\n        Retrieves the CPU backend hashrate for the last 1 minute from the backends data.\n\n        Returns:\n            float: CPU backend hashrate for the last 1 minute, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._backends_cache, [0, \"hashrate\"], self._backends_table_name, \"cpu_hashrate\")\n        return result[1] if result != \"N/A\" else result\n\n    @property\n    def be_cpu_hashrate_15m(self):\n        \"\"\"\n        Retrieves the CPU backend hashrate for the last 15 minutes from the backends data.\n\n        Returns:\n            float: CPU backend hashrate for the last 15 minutes, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._backends_cache, [0, \"hashrate\"], self._backends_table_name, \"cpu_hashrate\")\n        return result[2] if result != \"N/A\" else result\n\n    @property\n    def be_cpu_threads(self):\n        \"\"\"\n        Retrieves the CPU backend threads information from the backends data.\n\n        Returns:\n            list: CPU backend threads information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [0, \"threads\"], self._backends_table_name, \"cpu_threads\")\n\n    @property\n    def be_cpu_threads_intensity(self):\n        \"\"\"\n        Retrieves the CPU backend threads intensity information from the backends data.\n\n        Returns:\n            list: CPU backend threads intensity information, or \"N/A\" if not available.\n        \"\"\"\n        intensities = []\n        try:\n            threads = self._get_data_from_cache(self._backends_cache, [0, \"threads\"], self._backends_table_name, \"cpu_threads\")\n            for i in threads:\n                intensities.append(i[\"intensity\"])\n        except TypeError as e:\n            return \"N/A\"\n        return intensities\n\n    @property\n    def be_cpu_threads_affinity(self):\n        \"\"\"\n        Retrieves the CPU backend threads affinity information from the backends data.\n\n        Returns:\n            list: CPU backend threads affinity information, or \"N/A\" if not available.\n        \"\"\"\n        affinities = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [0, \"threads\"], self._backends_table_name, \"cpu_threads\"):\n                    affinities.append(i[\"affinity\"])\n        except TypeError as e:\n            return \"N/A\"\n        return affinities\n\n    @property\n    def be_cpu_threads_av(self):\n        \"\"\"\n        Retrieves the CPU backend threads AV information from the backends data.\n\n        Returns:\n            list: CPU backend threads AV information, or \"N/A\" if not available.\n        \"\"\"\n        avs = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [0, \"threads\"], self._backends_table_name, \"cpu_threads\"):\n                    avs.append(i[\"av\"])\n        except TypeError as e:\n            return \"N/A\"\n        return avs\n\n    @property\n    def be_cpu_threads_hashrates(self):\n        \"\"\"\n        Retrieves the CPU backend threads hashrates information from the backends data.\n\n        Returns:\n            list: CPU backend threads hashrates information, or \"N/A\" if not available.\n        \"\"\"\n        hashrates = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [0, \"threads\"], self._backends_table_name, \"cpu_threads\"):\n                    hashrates.append(i[\"hashrate\"])\n        except TypeError as e:\n            return \"N/A\"\n        return hashrates\n\n    @property\n    def be_cpu_threads_hashrates_10s(self):\n        \"\"\"\n        Retrieves the CPU backend threads hashrates for the last 10 seconds from the backends data.\n\n        Returns:\n            list: CPU backend threads hashrates for the last 10 seconds, or \"N/A\" if not available.\n        \"\"\"\n        hashrates_10s = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [0, \"threads\"], self._backends_table_name, \"cpu_threads\"):\n                    hashrates_10s.append(i[\"hashrate\"][0])\n        except TypeError as e:\n            return \"N/A\"\n        return hashrates_10s\n\n    @property\n    def be_cpu_threads_hashrates_1m(self):\n        \"\"\"\n        Retrieves the CPU backend threads hashrates for the last 1 minute from the backends data.\n\n        Returns:\n            list: CPU backend threads hashrates for the last 1 minute, or \"N/A\" if not available.\n        \"\"\"\n        hashrates_1m = []\n        try:\n           for i in self._get_data_from_cache(self._backends_cache, [0, \"threads\"], self._backends_table_name, \"cpu_threads\"):\n                    hashrates_1m.append(i[\"hashrate\"][1])\n        except TypeError as e:\n            return \"N/A\"\n        return hashrates_1m\n\n    @property\n    def be_cpu_threads_hashrates_15m(self):\n        \"\"\"\n        Retrieves the CPU backend threads hashrates for the last 15 minutes from the backends data.\n\n        Returns:\n            list: CPU backend threads hashrates for the last 15 minutes, or \"N/A\" if not available.\n        \"\"\"\n        hashrates_15m = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [0, \"threads\"], self._backends_table_name, \"cpu_threads\"):\n                    hashrates_15m.append(i[\"hashrate\"][2])\n        except TypeError as e:\n            return \"N/A\"\n        return hashrates_15m\n\n    @property\n    def be_opencl_type(self):\n        \"\"\"\n        Retrieves the OpenCL backend type from the backends data.\n\n        Returns:\n            str: OpenCL backend type, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"type\"], self._backends_table_name, \"opencl_type\")\n\n    @property\n    def be_opencl_enabled(self):\n        \"\"\"\n        Retrieves the OpenCL backend enabled status from the backends data.\n\n        Returns:\n            bool: OpenCL backend enabled status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"enabled\"], self._backends_table_name, \"opencl_enabled\")\n\n    @property\n    def be_opencl_algo(self):\n        \"\"\"\n        Retrieves the OpenCL backend algorithm from the backends data.\n\n        Returns:\n            str: OpenCL backend algorithm, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"algo\"], self._backends_table_name, \"opencl_algo\")\n\n    @property\n    def be_opencl_profile(self):\n        \"\"\"\n        Retrieves the OpenCL backend profile from the backends data.\n\n        Returns:\n            str: OpenCL backend profile, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"profile\"], self._backends_table_name, \"opencl_profile\")\n\n    @property\n    def be_opencl_platform(self):\n        \"\"\"\n        Retrieves the OpenCL backend platform information from the backends data.\n\n        Returns:\n            dict: OpenCL backend platform information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"platform\"], self._backends_table_name, \"opencl_platform\")\n\n    @property\n    def be_opencl_platform_index(self):\n        \"\"\"\n        Retrieves the OpenCL backend platform index from the backends data.\n\n        Returns:\n            int: OpenCL backend platform index, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"platform\", \"index\"], self._backends_table_name, \"opencl_platform_index\")\n\n    @property\n    def be_opencl_platform_profile(self):\n        \"\"\"\n        Retrieves the OpenCL backend platform profile from the backends data.\n\n        Returns:\n            str: OpenCL backend platform profile, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"platform\", \"profile\"], self._backends_table_name, \"opencl_platform_profile\")\n\n    @property\n    def be_opencl_platform_version(self):\n        \"\"\"\n        Retrieves the OpenCL backend platform version from the backends data.\n\n        Returns:\n            str: OpenCL backend platform version, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"platform\", \"version\"], self._backends_table_name, \"opencl_platform_version\")\n\n    @property\n    def be_opencl_platform_name(self):\n        \"\"\"\n        Retrieves the OpenCL backend platform name from the backends data.\n\n        Returns:\n            str: OpenCL backend platform name, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"platform\", \"name\"], self._backends_table_name, \"opencl_platform_name\")\n\n    @property\n    def be_opencl_platform_vendor(self):\n        \"\"\"\n        Retrieves the OpenCL backend platform vendor from the backends data.\n\n        Returns:\n            str: OpenCL backend platform vendor, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"platform\", \"vendor\"], self._backends_table_name, \"opencl_platform_vendor\")\n\n    @property\n    def be_opencl_platform_extensions(self):\n        \"\"\"\n        Retrieves the OpenCL backend platform extensions from the backends data.\n\n        Returns:\n            str: OpenCL backend platform extensions, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"platform\", \"extensions\"], self._backends_table_name, \"opencl_platform_extensions\")\n\n    @property\n    def be_opencl_hashrates(self):\n        \"\"\"\n        Retrieves the OpenCL backend hashrates from the backends data.\n\n        Returns:\n            list: OpenCL backend hashrates, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"hashrate\"], self._backends_table_name, \"opencl_hashrate\")\n\n    @property\n    def be_opencl_hashrate_10s(self):\n        \"\"\"\n        Retrieves the OpenCL backend hashrate for the last 10 seconds from the backends data.\n\n        Returns:\n            float: OpenCL backend hashrate for the last 10 seconds, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._backends_cache, [1, \"hashrate\"], self._backends_table_name, \"opencl_hashrate\")\n        return result[0] if result != \"N/A\" else result\n\n    @property\n    def be_opencl_hashrate_1m(self):\n        \"\"\"\n        Retrieves the OpenCL backend hashrate for the last 1 minute from the backends data.\n\n        Returns:\n            float: OpenCL backend hashrate for the last 1 minute, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._backends_cache, [1, \"hashrate\"], self._backends_table_name, \"opencl_hashrate\")\n        return result[1] if result != \"N/A\" else result\n\n    @property\n    def be_opencl_hashrate_15m(self):\n        \"\"\"\n        Retrieves the OpenCL backend hashrate for the last 15 minutes from the backends data.\n\n        Returns:\n            float: OpenCL backend hashrate for the last 15 minutes, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._backends_cache, [1, \"hashrate\"], self._backends_table_name, \"opencl_hashrate\")\n        return result[2] if result != \"N/A\" else result\n\n    @property\n    def be_opencl_threads(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads information from the backends data.\n\n        Returns:\n            list: OpenCL backend threads information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\")\n\n    @property\n    def be_opencl_threads_index(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads index from the backends data.\n\n        Returns:\n            list: OpenCL backend threads index, or \"N/A\" if not available.\n        \"\"\"\n        indexes = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                    indexes.append(i[\"index\"])\n        except TypeError as e:\n            return \"N/A\"\n        return indexes\n\n    @property\n    def be_opencl_threads_intensity(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads intensity from the backends data.\n\n        Returns:\n            list: OpenCL backend threads intensity, or \"N/A\" if not available.\n        \"\"\"\n        intensities = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                intensities.append(i[\"intensity\"])\n        except TypeError as e:\n            return \"N/A\"\n        return intensities\n\n    @property\n    def be_opencl_threads_worksize(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads worksize from the backends data.\n\n        Returns:\n            list: OpenCL backend threads worksize, or \"N/A\" if not available.\n        \"\"\"\n        worksizes = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                worksizes.append(i[\"worksize\"])\n        except TypeError as e:\n            return \"N/A\"\n        return worksizes\n\n    @property\n    def be_opencl_threads_unroll(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads unroll from the backends data.\n\n        Returns:\n            list: OpenCL backend threads unroll, or \"N/A\" if not available.\n        \"\"\"\n        unrolls = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                unrolls.append(i[\"unroll\"])\n        except TypeError as e:\n            return \"N/A\"\n        return unrolls\n\n    @property\n    def be_opencl_threads_affinity(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads affinity from the backends data.\n\n        Returns:\n            list: OpenCL backend threads affinity, or \"N/A\" if not available.\n        \"\"\"\n        affinities = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                affinities.append(i[\"affinity\"])\n        except TypeError as e:\n            return \"N/A\"\n        return affinities\n\n    @property\n    def be_opencl_threads_hashrates(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads hashrates from the backends data.\n\n        Returns:\n            list: OpenCL backend threads hashrates, or \"N/A\" if not available.\n        \"\"\"\n        hashrates = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                hashrates.append(i[\"hashrate\"])\n        except TypeError as e:\n            return \"N/A\"\n        return hashrates\n\n    @property\n    def be_opencl_threads_hashrate_10s(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads hashrate for the last 10 seconds from the backends data.\n\n        Returns:\n            list: OpenCL backend threads hashrate for the last 10 seconds, or \"N/A\" if not available.\n        \"\"\"\n        hashrates_10s = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                hashrates_10s.append(i[\"hashrate\"][0])\n        except KeyError:\n            return \"N/A\"\n        return hashrates_10s\n\n    @property\n    def be_opencl_threads_hashrate_1m(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads hashrate for the last 1 minute from the backends data.\n\n        Returns:\n            list: OpenCL backend threads hashrate for the last 1 minute, or \"N/A\" if not available.\n        \"\"\"\n        hashrates_1m = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                hashrates_1m.append(i[\"hashrate\"][1])\n        except KeyError:\n            return \"N/A\"\n        return hashrates_1m\n\n    @property\n    def be_opencl_threads_hashrate_15m(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads hashrate for the last 15 minutes from the backends data.\n\n        Returns:\n            list: OpenCL backend threads hashrate for the last 15 minutes, or \"N/A\" if not available.\n        \"\"\"\n        hashrates_15m = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                hashrates_15m.append(i[\"hashrate\"][2])\n        except KeyError:\n            return \"N/A\"\n        return hashrates_15m\n\n    @property\n    def be_opencl_threads_board(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads board information from the backends data.\n\n        Returns:\n            list: OpenCL backend threads board information, or \"N/A\" if not available.\n        \"\"\"\n        boards = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                boards.append(i[\"board\"])\n        except KeyError:\n            return \"N/A\"\n        return boards\n\n    @property\n    def be_opencl_threads_name(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads name from the backends data.\n\n        Returns:\n            list: OpenCL backend threads name, or \"N/A\" if not available.\n        \"\"\"\n        names = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                names.append(i[\"name\"])\n        except KeyError:\n            return \"N/A\"\n        return names\n\n    @property\n    def be_opencl_threads_bus_id(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads bus ID from the backends data.\n\n        Returns:\n            list: OpenCL backend threads bus ID, or \"N/A\" if not available.\n        \"\"\"\n        bus_ids = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                bus_ids.append(i[\"bus_id\"])\n        except KeyError:\n            return \"N/A\"\n        return bus_ids\n\n    @property\n    def be_opencl_threads_cu(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads compute units from the backends data.\n\n        Returns:\n            list: OpenCL backend threads compute units, or \"N/A\" if not available.\n        \"\"\"\n        cus = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                cus.append(i[\"cu\"])\n        except KeyError:\n            return \"N/A\"\n        return cus\n\n    @property\n    def be_opencl_threads_global_mem(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads global memory from the backends data.\n\n        Returns:\n            list: OpenCL backend threads global memory, or \"N/A\" if not available.\n        \"\"\"\n        global_mems = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                global_mems.append(i[\"global_mem\"])\n        except KeyError:\n            return \"N/A\"\n        return global_mems\n\n    @property\n    def be_opencl_threads_health(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads health information from the backends data.\n\n        Returns:\n            list: OpenCL backend threads health information, or \"N/A\" if not available.\n        \"\"\"\n        healths = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                healths.append(i[\"health\"])\n        except KeyError:\n            return \"N/A\"\n        return healths\n\n    @property\n    def be_opencl_threads_health_temp(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads health temperature from the backends data.\n\n        Returns:\n            list: OpenCL backend threads health temperature, or \"N/A\" if not available.\n        \"\"\"\n        temps = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                temps.append(i[\"health\"][\"temperature\"])\n        except KeyError:\n            return \"N/A\"\n        return temps\n\n    @property\n    def be_opencl_threads_health_power(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads health power from the backends data.\n\n        Returns:\n            list: OpenCL backend threads health power, or \"N/A\" if not available.\n        \"\"\"\n        powers = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                powers.append(i[\"health\"][\"power\"])\n        except KeyError:\n            return \"N/A\"\n        return powers\n\n    @property\n    def be_opencl_threads_health_clock(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads health clock from the backends data.\n\n        Returns:\n            list: OpenCL backend threads health clock, or \"N/A\" if not available.\n        \"\"\"\n        clocks = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                clocks.append(i[\"health\"][\"clock\"])\n        except KeyError:\n            return \"N/A\"\n        return clocks\n\n    @property\n    def be_opencl_threads_health_mem_clock(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads health memory clock from the backends data.\n\n        Returns:\n            list: OpenCL backend threads health memory clock, or \"N/A\" if not available.\n        \"\"\"\n        mem_clocks = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                mem_clocks.append(i[\"health\"][\"mem_clock\"])\n        except KeyError:\n            return \"N/A\"\n        return mem_clocks\n\n    @property\n    def be_opencl_threads_health_rpm(self):\n        \"\"\"\n        Retrieves the OpenCL backend threads health RPM from the backends data.\n\n        Returns:\n            list: OpenCL backend threads health RPM, or \"N/A\" if not available.\n        \"\"\"\n        rpms = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [1, \"threads\"], self._backends_table_name, \"opencl_threads\"):\n                rpms.append(i[\"health\"][\"rpm\"])\n        except KeyError:\n            return \"N/A\"\n        return rpms\n\n    @property\n    def be_cuda_type(self):\n        \"\"\"\n        Retrieves the CUDA backend type from the backends data.\n\n        Returns:\n            str: CUDA backend type, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"type\"], self._backends_table_name, \"cuda_type\")\n\n    @property\n    def be_cuda_enabled(self):\n        \"\"\"\n        Retrieves the CUDA backend enabled status from the backends data.\n\n        Returns:\n            bool: CUDA backend enabled status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"enabled\"], self._backends_table_name, \"cuda_enabled\")\n\n    @property\n    def be_cuda_algo(self):\n        \"\"\"\n        Retrieves the CUDA backend algorithm from the backends data.\n\n        Returns:\n            str: CUDA backend algorithm, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"algo\"], self._backends_table_name, \"cuda_algo\")\n\n    @property\n    def be_cuda_profile(self):\n        \"\"\"\n        Retrieves the CUDA backend profile from the backends data.\n\n        Returns:\n            str: CUDA backend profile, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"profile\"], self._backends_table_name, \"cuda_profile\")\n\n    @property\n    def be_cuda_versions(self):\n        \"\"\"\n        Retrieves the CUDA backend versions information from the backends data.\n\n        Returns:\n            dict: CUDA backend versions information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"versions\"], self._backends_table_name, \"cuda_versions\")\n\n    @property\n    def be_cuda_runtime(self):\n        \"\"\"\n        Retrieves the CUDA backend runtime version from the backends data.\n\n        Returns:\n            str: CUDA backend runtime version, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"versions\", \"cuda-runtime\"], self._backends_table_name, \"cuda_versions_cuda_runtime\")\n\n    @property\n    def be_cuda_driver(self):\n        \"\"\"\n        Retrieves the CUDA backend driver version from the backends data.\n\n        Returns:\n            str: CUDA backend driver version, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"versions\", \"cuda-driver\"], self._backends_table_name, \"cuda_versions_cuda_driver\")\n\n    @property\n    def be_cuda_plugin(self):\n        \"\"\"\n        Retrieves the CUDA backend plugin version from the backends data.\n\n        Returns:\n            str: CUDA backend plugin version, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"versions\", \"plugin\"], self._backends_table_name, \"cuda_versions_plugin\")\n\n    @property\n    def be_cuda_hashrates(self):\n        \"\"\"\n        Retrieves the CUDA backend hashrates from the backends data.\n\n        Returns:\n            list: CUDA backend hashrates, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"hashrate\"], self._backends_table_name, \"cuda_hashrate\")\n\n    @property\n    def be_cuda_hashrate_10s(self):\n        \"\"\"\n        Retrieves the CUDA backend hashrate for the last 10 seconds from the backends data.\n\n        Returns:\n            float: CUDA backend hashrate for the last 10 seconds, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._backends_cache, [2, \"hashrate\"], self._backends_table_name, \"cuda_hashrate\")\n        return result[0] if result != \"N/A\" else result\n\n    @property\n    def be_cuda_hashrate_1m(self):\n        \"\"\"\n        Retrieves the CUDA backend hashrate for the last 1 minute from the backends data.\n\n        Returns:\n            float: CUDA backend hashrate for the last 1 minute, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._backends_cache, [2, \"hashrate\"], self._backends_table_name, \"cuda_hashrate\")\n        return result[1] if result != \"N/A\" else result\n\n    @property\n    def be_cuda_hashrate_15m(self):\n        \"\"\"\n        Retrieves the CUDA backend hashrate for the last 15 minutes from the backends data.\n\n        Returns:\n            float: CUDA backend hashrate for the last 15 minutes, or \"N/A\" if not available.\n        \"\"\"\n        result = self._get_data_from_cache(self._backends_cache, [2, \"hashrate\"], self._backends_table_name, \"cuda_hashrate\")\n        return result[2] if result != \"N/A\" else result\n\n    @property\n    def be_cuda_threads(self):\n        \"\"\"\n        Retrieves the CUDA backend threads information from the backends data.\n\n        Returns:\n            list: CUDA backend threads information, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\")\n\n    @property\n    def be_cuda_threads_index(self):\n        \"\"\"\n        Retrieves the CUDA backend threads index from the backends data.\n\n        Returns:\n            list: CUDA backend threads index, or \"N/A\" if not available.\n        \"\"\"\n        indexes = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                indexes.append(i[\"index\"])\n        except KeyError:\n            return \"N/A\"\n        return indexes\n\n    @property\n    def be_cuda_threads_blocks(self):\n        \"\"\"\n        Retrieves the CUDA backend threads blocks from the backends data.\n\n        Returns:\n            list: CUDA backend threads blocks, or \"N/A\" if not available.\n        \"\"\"\n        blocks = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                blocks.append(i[\"blocks\"])\n        except KeyError:\n            return \"N/A\"\n        return blocks\n\n    @property\n    def be_cuda_threads_bfactor(self):\n        \"\"\"\n        Retrieves the CUDA backend threads bfactor from the backends data.\n\n        Returns:\n            list: CUDA backend threads bfactor, or \"N/A\" if not available.\n        \"\"\"\n        bfactors = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                bfactors.append(i[\"bfactor\"])\n        except KeyError:\n            return \"N/A\"\n        return bfactors\n\n    @property\n    def be_cuda_threads_bsleep(self):\n        \"\"\"\n        Retrieves the CUDA backend threads bsleep from the backends data.\n\n        Returns:\n            list: CUDA backend threads bsleep, or \"N/A\" if not available.\n        \"\"\"\n        bsleeps = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                bsleeps.append(i[\"bsleep\"])\n        except KeyError:\n            return \"N/A\"\n        return bsleeps\n\n    @property\n    def be_cuda_threads_affinity(self):\n        \"\"\"\n        Retrieves the CUDA backend threads affinity from the backends data.\n\n        Returns:\n            list: CUDA backend threads affinity, or \"N/A\" if not available.\n        \"\"\"\n        affinities = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                affinities.append(i[\"affinity\"])\n        except KeyError:\n            return \"N/A\"\n        return affinities\n\n    @property\n    def be_cuda_threads_dataset_host(self):\n        \"\"\"\n        Retrieves the CUDA backend threads dataset host status from the backends data.\n\n        Returns:\n            list: CUDA backend threads dataset host status, or \"N/A\" if not available.\n        \"\"\"\n        dataset_hosts = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                dataset_hosts.append(i[\"dataset_host\"])\n        except KeyError:\n            return \"N/A\"\n        return dataset_hosts\n\n    @property\n    def be_cuda_threads_hashrates(self):\n        \"\"\"\n        Retrieves the CUDA backend threads hashrates from the backends data.\n\n        Returns:\n            list: CUDA backend threads hashrates, or \"N/A\" if not available.\n        \"\"\"\n        hashrates = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                hashrates.append(i[\"hashrate\"])\n        except KeyError:\n            return \"N/A\"\n        return hashrates\n\n    @property\n    def be_cuda_threads_hashrate_10s(self):\n        \"\"\"\n        Retrieves the CUDA backend threads hashrate for the last 10 seconds from the backends data.\n\n        Returns:\n            list: CUDA backend threads hashrate for the last 10 seconds, or \"N/A\" if not available.\n        \"\"\"\n        hashrates_10s = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                hashrates_10s.append(i[\"hashrate\"][0])\n        except KeyError:\n            return \"N/A\"\n        return hashrates_10s\n\n    @property\n    def be_cuda_threads_hashrate_1m(self):\n        \"\"\"\n        Retrieves the CUDA backend threads hashrate for the last 1 minute from the backends data.\n\n        Returns:\n            list: CUDA backend threads hashrate for the last 1 minute, or \"N/A\" if not available.\n        \"\"\"\n        hashrates_1m = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                hashrates_1m.append(i[\"hashrate\"][1])\n        except KeyError:\n            return \"N/A\"\n        return hashrates_1m\n\n    @property\n    def be_cuda_threads_hashrate_15m(self):\n        \"\"\"\n        Retrieves the CUDA backend threads hashrate for the last 15 minutes from the backends data.\n\n        Returns:\n            list: CUDA backend threads hashrate for the last 15 minutes, or \"N/A\" if not available.\n        \"\"\"\n        hashrates_15m = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                hashrates_15m.append(i[\"hashrate\"][2])\n        except KeyError:\n            return \"N/A\"\n        return hashrates_15m\n\n    @property\n    def be_cuda_threads_name(self):\n        \"\"\"\n        Retrieves the CUDA backend threads name from the backends data.\n\n        Returns:\n            list: CUDA backend threads name, or \"N/A\" if not available.\n        \"\"\"\n        names = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                names.append(i[\"name\"])\n        except KeyError:\n            return \"N/A\"\n        return names\n\n    @property\n    def be_cuda_threads_bus_id(self):\n        \"\"\"\n        Retrieves the CUDA backend threads bus ID from the backends data.\n\n        Returns:\n            list: CUDA backend threads bus ID, or \"N/A\" if not available.\n        \"\"\"\n        bus_ids = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                bus_ids.append(i[\"bus_id\"])\n        except KeyError:\n            return \"N/A\"\n        return bus_ids\n\n    @property\n    def be_cuda_threads_smx(self):\n        \"\"\"\n        Retrieves the CUDA backend threads SMX count from the backends data.\n\n        Returns:\n            list: CUDA backend threads SMX count, or \"N/A\" if not available.\n        \"\"\"\n        smxs = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                smxs.append(i[\"smx\"])\n        except KeyError:\n            return \"N/A\"\n        return smxs\n\n    @property\n    def be_cuda_threads_arch(self):\n        \"\"\"\n        Retrieves the CUDA backend threads architecture from the backends data.\n\n        Returns:\n            list: CUDA backend threads architecture, or \"N/A\" if not available.\n        \"\"\"\n        archs = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                archs.append(i[\"arch\"])\n        except KeyError:\n            return \"N/A\"\n        return archs\n\n    @property\n    def be_cuda_threads_global_mem(self):\n        \"\"\"\n        Retrieves the CUDA backend threads global memory from the backends data.\n\n        Returns:\n            list: CUDA backend threads global memory, or \"N/A\" if not available.\n        \"\"\"\n        global_mems = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                global_mems.append(i[\"global_mem\"])\n        except KeyError:\n            return \"N/A\"\n        return global_mems\n\n    @property\n    def be_cuda_threads_clock(self):\n        \"\"\"\n        Retrieves the CUDA backend threads clock from the backends data.\n\n        Returns:\n            list: CUDA backend threads clock, or \"N/A\" if not available.\n        \"\"\"\n        clocks = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                clocks.append(i[\"clock\"])\n        except KeyError:\n            return \"N/A\"\n        return clocks\n\n    @property\n    def be_cuda_threads_memory_clock(self):\n        \"\"\"\n        Retrieves the CUDA backend threads memory clock from the backends data.\n\n        Returns:\n            list: CUDA backend threads memory clock, or \"N/A\" if not available.\n        \"\"\"\n        memory_clocks = []\n        try:\n            for i in self._get_data_from_cache(self._backends_cache, [2, \"threads\"], self._backends_table_name, \"cuda_threads\"):\n                memory_clocks.append(i[\"memory_clock\"])\n        except KeyError:\n            return \"N/A\"\n        return memory_clocks\n\n    #############################\n    # Data from config endpoint #\n    #############################\n\n    @property\n    def conf_api_property(self):\n        \"\"\"\n        Retrieves the API property from the config data.\n\n        Returns:\n            dict: API property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"api\"], self._config_table_name, \"api\")\n\n    @property\n    def conf_api_id_property(self):\n        \"\"\"\n        Retrieves the API ID property from the config data.\n\n        Returns:\n            str: API ID property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"api\", \"id\"], self._config_table_name, \"api_id\")\n\n    @property\n    def conf_api_worker_id_property(self):\n        \"\"\"\n        Retrieves the API worker ID property from the config data.\n\n        Returns:\n            str: API worker ID property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"api\", \"worker-id\"], self._config_table_name, \"api_worker_id\")\n\n    @property\n    def conf_http_property(self):\n        \"\"\"\n        Retrieves the HTTP property from the config data.\n\n        Returns:\n            dict: HTTP property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"http\"], self._config_table_name, \"http\")\n\n    @property\n    def conf_http_enabled_property(self):\n        \"\"\"\n        Retrieves the HTTP enabled property from the config data.\n\n        Returns:\n            bool: HTTP enabled property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"http\", \"enabled\"], self._config_table_name, \"http_enabled\")\n\n    @property\n    def conf_http_host_property(self):\n        \"\"\"\n        Retrieves the HTTP host property from the config data.\n\n        Returns:\n            str: HTTP host property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"http\", \"host\"], self._config_table_name, \"http_host\")\n\n    @property\n    def conf_http_port_property(self):\n        \"\"\"\n        Retrieves the HTTP port property from the config data.\n\n        Returns:\n            int: HTTP port property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"http\", \"port\"], self._config_table_name, \"http_port\")\n\n    @property\n    def conf_http_access_token_property(self):\n        \"\"\"\n        Retrieves the HTTP access token property from the config data.\n\n        Returns:\n            str: HTTP access token property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"http\", \"access-token\"], self._config_table_name, \"http_access_token\")\n\n    @property\n    def conf_http_restricted_property(self):\n        \"\"\"\n        Retrieves the HTTP restricted property from the config data.\n\n        Returns:\n            bool: HTTP restricted property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"http\", \"restricted\"], self._config_table_name, \"http_restricted\")\n\n    @property\n    def conf_autosave_property(self):\n        \"\"\"\n        Retrieves the autosave property from the config data.\n\n        Returns:\n            bool: Autosave property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"autosave\"], self._config_table_name, \"autosave\")\n\n    @property\n    def conf_background_property(self):\n        \"\"\"\n        Retrieves the background property from the config data.\n\n        Returns:\n            bool: Background property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"background\"], self._config_table_name, \"background\")\n\n    @property\n    def conf_colors_property(self):\n        \"\"\"\n        Retrieves the colors property from the config data.\n\n        Returns:\n            bool: Colors property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"colors\"], self._config_table_name, \"colors\")\n\n    @property\n    def conf_title_property(self):\n        \"\"\"\n        Retrieves the title property from the config data.\n\n        Returns:\n            bool: Title property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"title\"], self._config_table_name, \"title\")\n\n    @property\n    def conf_randomx_property(self):\n        \"\"\"\n        Retrieves the RandomX property from the config data.\n\n        Returns:\n            dict: RandomX property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\"], self._config_table_name, \"randomx\")\n\n    @property\n    def conf_randomx_init_property(self):\n        \"\"\"\n        Retrieves the RandomX init property from the config data.\n\n        Returns:\n            int: RandomX init property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\", \"init\"], self._config_table_name, \"randomx_init\")\n\n    @property\n    def conf_randomx_init_avx2_property(self):\n        \"\"\"\n        Retrieves the RandomX init AVX2 property from the config data.\n\n        Returns:\n            int: RandomX init AVX2 property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\", \"init-avx2\"], self._config_table_name, \"randomx_init_avx2\")\n\n    @property\n    def conf_randomx_mode_property(self):\n        \"\"\"\n        Retrieves the RandomX mode property from the config data.\n\n        Returns:\n            str: RandomX mode property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\", \"mode\"], self._config_table_name, \"randomx_mode\")\n\n    @property\n    def conf_randomx_1gb_pages_property(self):\n        \"\"\"\n        Retrieves the RandomX 1GB pages property from the config data.\n\n        Returns:\n            bool: RandomX 1GB pages property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\", \"1gb-pages\"], self._config_table_name, \"randomx_1gb_pages\")\n\n    @property\n    def conf_randomx_rdmsr_property(self):\n        \"\"\"\n        Retrieves the RandomX RDMSR property from the config data.\n\n        Returns:\n            bool: RandomX RDMSR property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\", \"rdmsr\"], self._config_table_name, \"randomx_rdmsr\")\n\n    @property\n    def conf_randomx_wrmsr_property(self):\n        \"\"\"\n        Retrieves the RandomX WRMSR property from the config data.\n\n        Returns:\n            bool: RandomX WRMSR property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\", \"wrmsr\"], self._config_table_name, \"randomx_wrmsr\")\n\n    @property\n    def conf_randomx_cache_qos_property(self):\n        \"\"\"\n        Retrieves the RandomX cache QoS property from the config data.\n\n        Returns:\n            bool: RandomX cache QoS property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\", \"cache_qos\"], self._config_table_name, \"randomx_cache_qos\")\n\n    @property\n    def conf_randomx_numa_property(self):\n        \"\"\"\n        Retrieves the RandomX NUMA property from the config data.\n\n        Returns:\n            bool: RandomX NUMA property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\", \"numa\"], self._config_table_name, \"randomx_numa\")\n\n    @property\n    def conf_randomx_scratchpad_prefetch_mode_property(self):\n        \"\"\"\n        Retrieves the RandomX scratchpad prefetch mode property from the config data.\n\n        Returns:\n            int: RandomX scratchpad prefetch mode property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"randomx\", \"scratchpad_prefetch_mode\"], self._config_table_name, \"randomx_scratchpad_prefetch_mode\")\n\n    @property\n    def conf_cpu_property(self):\n        \"\"\"\n        Retrieves the CPU property from the config data.\n\n        Returns:\n            dict: CPU property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\"], self._config_table_name, \"cpu\")\n\n    @property\n    def conf_cpu_enabled_property(self):\n        \"\"\"\n        Retrieves the CPU enabled property from the config data.\n\n        Returns:\n            bool: CPU enabled property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"enabled\"], self._config_table_name, \"cpu_enabled\")\n\n    @property\n    def conf_cpu_huge_pages_property(self):\n        \"\"\"\n        Retrieves the CPU huge pages property from the config data.\n\n        Returns:\n            bool: CPU huge pages property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"huge-pages\"], self._config_table_name, \"cpu_huge_pages\")\n\n    @property\n    def conf_cpu_huge_pages_jit_property(self):\n        \"\"\"\n        Retrieves the CPU huge pages JIT property from the config data.\n\n        Returns:\n            bool: CPU huge pages JIT property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"huge-pages-jit\"], self._config_table_name, \"cpu_huge_pages_jit\")\n\n    @property\n    def conf_cpu_hw_aes_property(self):\n        \"\"\"\n        Retrieves the CPU hardware AES property from the config data.\n\n        Returns:\n            bool: CPU hardware AES property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"hw-aes\"], self._config_table_name, \"cpu_hw_aes\")\n\n    @property\n    def conf_cpu_priority_property(self):\n        \"\"\"\n        Retrieves the CPU priority property from the config data.\n\n        Returns:\n            int: CPU priority property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"priority\"], self._config_table_name, \"cpu_priority\")\n\n    @property\n    def conf_cpu_memory_pool_property(self):\n        \"\"\"\n        Retrieves the CPU memory pool property from the config data.\n\n        Returns:\n            bool: CPU memory pool property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"memory-pool\"], self._config_table_name, \"cpu_memory_pool\")\n\n    @property\n    def conf_cpu_yield_property(self):\n        \"\"\"\n        Retrieves the CPU yield property from the config data.\n\n        Returns:\n            bool: CPU yield property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"yield\"], self._config_table_name, \"cpu_yield\")\n\n    @property\n    def conf_cpu_max_threads_hint_property(self):\n        \"\"\"\n        Retrieves the CPU max threads hint property from the config data.\n\n        Returns:\n            int: CPU max threads hint property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"max-threads-hint\"], self._config_table_name, \"cpu_max_threads_hint\")\n\n    @property\n    def conf_cpu_asm_property(self):\n        \"\"\"\n        Retrieves the CPU ASM property from the config data.\n\n        Returns:\n            bool: CPU ASM property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"asm\"], self._config_table_name, \"cpu_asm\")\n\n    @property\n    def conf_cpu_argon2_impl_property(self):\n        \"\"\"\n        Retrieves the CPU Argon2 implementation property from the config data.\n\n        Returns:\n            str: CPU Argon2 implementation property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cpu\", \"argon2-impl\"], self._config_table_name, \"cpu_argon2_impl\")\n\n    @property\n    def conf_opencl_property(self):\n        \"\"\"\n        Retrieves the OpenCL property from the config data.\n\n        Returns:\n            dict: OpenCL property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"opencl\"], self._config_table_name, \"opencl\")\n\n    @property\n    def conf_opencl_enabled_property(self):\n        \"\"\"\n        Retrieves the OpenCL enabled property from the config data.\n\n        Returns:\n            bool: OpenCL enabled property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"opencl\", \"enabled\"], self._config_table_name, \"opencl_enabled\")\n\n    @property\n    def conf_opencl_cache_property(self):\n        \"\"\"\n        Retrieves the OpenCL cache property from the config data.\n\n        Returns:\n            bool: OpenCL cache property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"opencl\", \"cache\"], self._config_table_name, \"opencl_cache\")\n\n    @property\n    def conf_opencl_loader_property(self):\n        \"\"\"\n        Retrieves the OpenCL loader property from the config data.\n\n        Returns:\n            str: OpenCL loader property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"opencl\", \"loader\"], self._config_table_name, \"opencl_loader\")\n\n    @property\n    def conf_opencl_platform_property(self):\n        \"\"\"\n        Retrieves the OpenCL platform property from the config data.\n\n        Returns:\n            str: OpenCL platform property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"opencl\", \"platform\"], self._config_table_name, \"opencl_platform\")\n\n    @property\n    def conf_opencl_adl_property(self):\n        \"\"\"\n        Retrieves the OpenCL ADL property from the config data.\n\n        Returns:\n            bool: OpenCL ADL property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"opencl\", \"adl\"], self._config_table_name, \"opencl_adl\")\n\n    @property\n    def conf_cuda_property(self):\n        \"\"\"\n        Retrieves the CUDA from the config data.\n\n        Returns:\n            dict: CUDA, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cuda\"], self._config_table_name, \"cuda\")\n\n    @property\n    def conf_cuda_enabled_property(self):\n        \"\"\"\n        Retrieves the CUDA enabled status from the config data.\n\n        Returns:\n            bool: CUDA enabled status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cuda\", \"enabled\"], self._config_table_name, \"cuda_enabled\")\n\n    @property\n    def conf_cuda_loader_property(self):\n        \"\"\"\n        Retrieves the CUDA loader from the config data.\n\n        Returns:\n            str: CUDA loader, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cuda\", \"loader\"], self._config_table_name, \"cuda_loader\")\n\n    @property\n    def conf_cuda_nvml_property(self):\n        \"\"\"\n        Retrieves the CUDA NVML from the config data.\n\n        Returns:\n            bool: CUDA NVML, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"cuda\", \"nvml\"], self._config_table_name, \"cuda_nvml\")\n\n    @property\n    def conf_log_file_property(self):\n        \"\"\"\n        Retrieves the log file from the config data.\n\n        Returns:\n            str: Log file, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"log-file\"], self._config_table_name, \"log_file\")\n\n    @property\n    def conf_donate_level_property(self):\n        \"\"\"\n        Retrieves the donate level from the config data.\n\n        Returns:\n            int: Donate level, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"donate-level\"], self._config_table_name, \"donate_level\")\n\n    @property\n    def conf_donate_over_proxy_property(self):\n        \"\"\"\n        Retrieves the donate over proxy from the config data.\n\n        Returns:\n            int: Donate over proxy, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"donate-over-proxy\"], self._config_table_name, \"donate_over_proxy\")\n\n    @property\n    def conf_pools_property(self):\n        \"\"\"\n        Retrieves the pools from the config data.\n\n        Returns:\n            list: Pools, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\")\n\n    @property\n    def conf_pools_algo_property(self):\n        \"\"\"\n        Retrieves the pools algorithm from the config data.\n\n        Returns:\n            list: Pools algorithm, or \"N/A\" if not available.\n        \"\"\"\n        algos = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                algos.append(i[\"algo\"])\n        except KeyError:\n            return \"N/A\"\n        return algos\n\n    @property\n    def conf_pools_coin_property(self):\n        \"\"\"\n        Retrieves the pools coin from the config data.\n\n        Returns:\n            list: Pools coin, or \"N/A\" if not available.\n        \"\"\"\n        coins = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                coins.append(i[\"coin\"])\n        except KeyError:\n            return \"N/A\"\n        return coins\n\n    @property\n    def conf_pools_url_property(self):\n        \"\"\"\n        Retrieves the pools URL from the config data.\n\n        Returns:\n            list: Pools URL, or \"N/A\" if not available.\n        \"\"\"\n        urls = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                urls.append(i[\"url\"])\n        except KeyError:\n            return \"N/A\"\n        return urls\n\n    @property\n    def conf_pools_user_property(self):\n        \"\"\"\n        Retrieves the pools user from the config data.\n\n        Returns:\n            list: Pools user, or \"N/A\" if not available.\n        \"\"\"\n        users = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                users.append(i[\"user\"])\n        except KeyError:\n            return \"N/A\"\n        return users\n\n    @property\n    def conf_pools_pass_property(self):\n        \"\"\"\n        Retrieves the pools password from the config data.\n\n        Returns:\n            list: Pools password, or \"N/A\" if not available.\n        \"\"\"\n        passwords = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                passwords.append(i[\"pass\"])\n        except KeyError:\n            return \"N/A\"\n        return passwords\n\n    @property\n    def conf_pools_rig_id_property(self):\n        \"\"\"\n        Retrieves the pools rig ID from the config data.\n\n        Returns:\n            list: Pools rig ID, or \"N/A\" if not available.\n        \"\"\"\n        rig_ids = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                rig_ids.append(i[\"rig-id\"])\n        except KeyError:\n            return \"N/A\"\n        return rig_ids\n\n    @property\n    def conf_pools_nicehash_property(self):\n        \"\"\"\n        Retrieves the pools NiceHash status from the config data.\n\n        Returns:\n            list: Pools NiceHash status, or \"N/A\" if not available.\n        \"\"\"\n        nicehash_statuses = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                nicehash_statuses.append(i[\"nicehash\"])\n        except KeyError:\n            return \"N/A\"\n        return nicehash_statuses\n\n    @property\n    def conf_pools_keepalive_property(self):\n        \"\"\"\n        Retrieves the pools keepalive status from the config data.\n\n        Returns:\n            list: Pools keepalive status, or \"N/A\" if not available.\n        \"\"\"\n        keepalive_statuses = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                keepalive_statuses.append(i[\"keepalive\"])\n        except KeyError:\n            return \"N/A\"\n        return keepalive_statuses\n\n    @property\n    def conf_pools_enabled_property(self):\n        \"\"\"\n        Retrieves the pools enabled status from the config data.\n\n        Returns:\n            list: Pools enabled status, or \"N/A\" if not available.\n        \"\"\"\n        enabled_statuses = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                enabled_statuses.append(i[\"enabled\"])\n        except KeyError:\n            return \"N/A\"\n        return enabled_statuses\n\n    @property\n    def conf_pools_tls_property(self):\n        \"\"\"\n        Retrieves the pools TLS status from the config data.\n\n        Returns:\n            list: Pools TLS status, or \"N/A\" if not available.\n        \"\"\"\n        tls_statuses = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                tls_statuses.append(i[\"tls\"])\n        except KeyError:\n            return \"N/A\"\n        return tls_statuses\n\n    @property\n    def conf_pools_sni_property(self):\n        \"\"\"\n        Retrieves the pools SNI status from the config data.\n\n        Returns:\n            list: Pools SNI status, or \"N/A\" if not available.\n        \"\"\"\n        sni_statuses = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                sni_statuses.append(i[\"sni\"])\n        except KeyError:\n            return \"N/A\"\n        return sni_statuses\n\n    @property\n    def conf_pools_spend_secret_key_property(self):\n        \"\"\"\n        Retrieves the pools spend secret key status from the config data.\n\n        Returns:\n            list: Pools spend secret key status, or \"N/A\" if not available.\n        \"\"\"\n        spend_secret_key_statuses = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                spend_secret_key_statuses.append(i[\"spend-secret-key\"])\n        except KeyError:\n            return \"N/A\"\n        return spend_secret_key_statuses\n\n    @property\n    def conf_pools_tls_fingerprint_property(self):\n        \"\"\"\n        Retrieves the pools TLS fingerprint from the config data.\n\n        Returns:\n            list: Pools TLS fingerprint, or \"N/A\" if not available.\n        \"\"\"\n        tls_fingerprints = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                tls_fingerprints.append(i[\"tls-fingerprint\"])\n        except KeyError:\n            return \"N/A\"\n        return tls_fingerprints\n\n    @property\n    def conf_pools_daemon_property(self):\n        \"\"\"\n        Retrieves the pools daemon status from the config data.\n\n        Returns:\n            list: Pools daemon status, or \"N/A\" if not available.\n        \"\"\"\n        daemon_statuses = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                daemon_statuses.append(i[\"daemon\"])\n        except KeyError:\n            return \"N/A\"\n        return daemon_statuses\n\n    @property\n    def conf_pools_daemon_poll_interval_property(self):\n        \"\"\"\n        Retrieves the pools daemon poll interval from the config data.\n\n        Returns:\n            list: Pools daemon poll interval, or \"N/A\" if not available.\n        \"\"\"\n        daemon_poll_intervals = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                daemon_poll_intervals.append(i[\"daemon-poll-interval\"])\n        except KeyError:\n            return \"N/A\"\n        return daemon_poll_intervals\n\n    @property\n    def conf_pools_daemon_job_timeout_property(self):\n        \"\"\"\n        Retrieves the pools daemon job timeout from the config data.\n\n        Returns:\n            list: Pools daemon job timeout, or \"N/A\" if not available.\n        \"\"\"\n        daemon_job_timeouts = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                daemon_job_timeouts.append(i[\"daemon-job-timeout\"])\n        except KeyError:\n            return \"N/A\"\n        return daemon_job_timeouts\n\n    @property\n    def conf_pools_daemon_zmq_port_property(self):\n        \"\"\"\n        Retrieves the pools daemon ZMQ port from the config data.\n\n        Returns:\n            list: Pools daemon ZMQ port, or \"N/A\" if not available.\n        \"\"\"\n        daemon_zmq_ports = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                daemon_zmq_ports.append(i[\"daemon-zmq-port\"])\n        except KeyError:\n            return \"N/A\"\n        return daemon_zmq_ports\n\n    @property\n    def conf_pools_socks5_property(self):\n        \"\"\"\n        Retrieves the pools SOCKS5 from the config data.\n\n        Returns:\n            list: Pools SOCKS5, or \"N/A\" if not available.\n        \"\"\"\n        socks5_values = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                socks5_values.append(i[\"socks5\"])\n        except KeyError:\n            return \"N/A\"\n        return socks5_values\n\n    @property\n    def conf_pools_self_select_property(self):\n        \"\"\"\n        Retrieves the pools self-select from the config data.\n\n        Returns:\n            list: Pools self-select, or \"N/A\" if not available.\n        \"\"\"\n        self_selects = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                self_selects.append(i[\"self-select\"])\n        except KeyError:\n            return \"N/A\"\n        return self_selects\n\n    @property\n    def conf_pools_submit_to_origin_property(self):\n        \"\"\"\n        Retrieves the pools submit to origin status from the config data.\n\n        Returns:\n            list: Pools submit to origin status, or \"N/A\" if not available.\n        \"\"\"\n        submit_to_origins = []\n        try:\n            for i in self._get_data_from_cache(self._config_cache, [\"pools\"], self._config_table_name, \"pools\"):\n                submit_to_origins.append(i[\"submit-to-origin\"])\n        except KeyError:\n            return \"N/A\"\n        return submit_to_origins\n\n    @property\n    def conf_retries_property(self):\n        \"\"\"\n        Retrieves the retries from the config data.\n\n        Returns:\n            int: Retries, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"retries\"], self._config_table_name, \"retries\")\n\n    @property\n    def conf_retry_pause_property(self):\n        \"\"\"\n        Retrieves the retry pause from the config data.\n\n        Returns:\n            int: Retry pause, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"retry-pause\"], self._config_table_name, \"retry_pause\")\n\n    @property\n    def conf_print_time_property(self):\n        \"\"\"\n        Retrieves the print time from the config data.\n\n        Returns:\n            int: Print time, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"print-time\"], self._config_table_name, \"print_time\")\n\n    @property\n    def conf_health_print_time_property(self):\n        \"\"\"\n        Retrieves the health print time from the config data.\n\n        Returns:\n            int: Health print time, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"health-print-time\"], self._config_table_name, \"health_print_time\")\n\n    @property\n    def conf_dmi_property(self):\n        \"\"\"\n        Retrieves the DMI status from the config data.\n\n        Returns:\n            bool: DMI status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"dmi\"], self._config_table_name, \"dmi\")\n\n    @property\n    def conf_syslog_property(self):\n        \"\"\"\n        Retrieves the syslog status from the config data.\n\n        Returns:\n            bool: Syslog status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"syslog\"], self._config_table_name, \"syslog\")\n\n    @property\n    def conf_tls_property(self):\n        \"\"\"\n        Retrieves the TLS property from the config data.\n\n        Returns:\n            dict: TLS property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"tls\"], self._config_table_name, \"tls\")\n\n    @property\n    def conf_tls_enabled_property(self):\n        \"\"\"\n        Retrieves the TLS enabled status from the config data.\n\n        Returns:\n            bool: TLS enabled status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"tls\", \"enabled\"], self._config_table_name, \"tls_enabled\")\n\n    @property\n    def conf_tls_protocols_property(self):\n        \"\"\"\n        Retrieves the TLS protocols from the config data.\n\n        Returns:\n            str: TLS protocols, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"tls\", \"protocols\"], self._config_table_name, \"tls_protocols\")\n\n    @property\n    def conf_tls_cert_property(self):\n        \"\"\"\n        Retrieves the TLS certificate from the config data.\n\n        Returns:\n            str: TLS certificate, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"tls\", \"cert\"], self._config_table_name, \"tls_cert\")\n\n    @property\n    def conf_tls_cert_key_property(self):\n        \"\"\"\n        Retrieves the TLS certificate key from the config data.\n\n        Returns:\n            str: TLS certificate key, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"tls\", \"cert_key\"], self._config_table_name, \"tls_cert_key\")\n\n    @property\n    def conf_tls_ciphers_property(self):\n        \"\"\"\n        Retrieves the TLS ciphers from the config data.\n\n        Returns:\n            str: TLS ciphers, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"tls\", \"ciphers\"], self._config_table_name, \"tls_ciphers\")\n\n    @property\n    def conf_tls_ciphersuites_property(self):\n        \"\"\"\n        Retrieves the TLS ciphersuites from the config data.\n\n        Returns:\n            str: TLS ciphersuites, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"tls\", \"ciphersuites\"], self._config_table_name, \"tls_ciphersuites\")\n\n    @property\n    def conf_tls_dhparam_property(self):\n        \"\"\"\n        Retrieves the TLS DH parameter from the config data.\n\n        Returns:\n            str: TLS DH parameter, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"tls\", \"dhparam\"], self._config_table_name, \"tls_dhparam\")\n\n    @property\n    def conf_dns_property(self):\n        \"\"\"\n        Retrieves the DNS property from the config data.\n\n        Returns:\n            dict: DNS property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"dns\"], self._config_table_name, \"dns\")\n\n    @property\n    def conf_dns_ipv6_property(self):\n        \"\"\"\n        Retrieves the DNS IPv6 status from the config data.\n\n        Returns:\n            bool: DNS IPv6 status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"dns\", \"ipv6\"], self._config_table_name, \"dns_ipv6\")\n\n    @property\n    def conf_dns_ttl_property(self):\n        \"\"\"\n        Retrieves the DNS TTL from the config data.\n\n        Returns:\n            int: DNS TTL, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"dns\", \"ttl\"], self._config_table_name, \"dns_ttl\")\n\n    @property\n    def conf_user_agent_property(self):\n        \"\"\"\n        Retrieves the user agent from the config data.\n\n        Returns:\n            str: User agent, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"user-agent\"], self._config_table_name, \"user_agent\")\n\n    @property\n    def conf_verbose_property(self):\n        \"\"\"\n        Retrieves the verbose level from the config data.\n\n        Returns:\n            int: Verbose level, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"verbose\"], self._config_table_name, \"verbose\")\n\n    @property\n    def conf_watch_property(self):\n        \"\"\"\n        Retrieves the watch status from the config data.\n\n        Returns:\n            bool: Watch status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"watch\"], self._config_table_name, \"watch\")\n\n    @property\n    def conf_rebench_algo_property(self):\n        \"\"\"\n        Retrieves the rebench algorithm status from the config data.\n\n        Returns:\n            bool: Rebench algorithm status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"rebench-algo\"], self._config_table_name, \"rebench_algo\")\n\n    @property\n    def conf_bench_algo_time_property(self):\n        \"\"\"\n        Retrieves the bench algorithm time from the config data.\n\n        Returns:\n            int: Bench algorithm time, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"bench-algo-time\"], self._config_table_name, \"bench_algo_time\")\n\n    @property\n    def conf_pause_on_battery_property(self):\n        \"\"\"\n        Retrieves the pause on battery status from the config data.\n\n        Returns:\n            bool: Pause on battery status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"pause-on-battery\"], self._config_table_name, \"pause_on_battery\")\n\n    @property\n    def conf_pause_on_active_property(self):\n        \"\"\"\n        Retrieves the pause on active status from the config data.\n\n        Returns:\n            bool: Pause on active status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"pause-on-active\"], self._config_table_name, \"pause_on_active\")\n\n    @property\n    def conf_benchmark_property(self):\n        \"\"\"\n        Retrieves the benchmark property from the config data.\n\n        Returns:\n            dict: Benchmark property, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"benchmark\"], self._config_table_name, \"benchmark\")\n\n    @property\n    def conf_benchmark_size_property(self):\n        \"\"\"\n        Retrieves the benchmark size from the config data.\n\n        Returns:\n            str: Benchmark size, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"benchmark\", \"size\"], self._config_table_name, \"benchmark_size\")\n\n    @property\n    def conf_benchmark_algo_property(self):\n        \"\"\"\n        Retrieves the benchmark algorithm from the config data.\n\n        Returns:\n            str: Benchmark algorithm, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"benchmark\", \"algo\"], self._config_table_name, \"benchmark_algo\")\n\n    @property\n    def conf_benchmark_submit_property(self):\n        \"\"\"\n        Retrieves the benchmark submit status from the config data.\n\n        Returns:\n            bool: Benchmark submit status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"benchmark\", \"submit\"], self._config_table_name, \"benchmark_submit\")\n\n    @property\n    def conf_benchmark_verify_property(self):\n        \"\"\"\n        Retrieves the benchmark verify status from the config data.\n\n        Returns:\n            str: Benchmark verify status, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"benchmark\", \"verify\"], self._config_table_name, \"benchmark_verify\")\n\n    @property\n    def conf_benchmark_seed_property(self):\n        \"\"\"\n        Retrieves the benchmark seed from the config data.\n\n        Returns:\n            str: Benchmark seed, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"benchmark\", \"seed\"], self._config_table_name, \"benchmark_seed\")\n\n    @property\n    def conf_benchmark_hash_property(self):\n        \"\"\"\n        Retrieves the benchmark hash from the config data.\n\n        Returns:\n            str: Benchmark hash, or \"N/A\" if not available.\n        \"\"\"\n        return self._get_data_from_cache(self._config_cache, [\"benchmark\", \"hash\"], self._config_table_name, \"benchmark_hash\")\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.backends","title":"<code>backends</code>  <code>property</code>","text":"<p>Retrieves the entire cached backends endpoint data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Current backends response, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_algo","title":"<code>be_cpu_algo</code>  <code>property</code>","text":"<p>Retrieves the CPU backend algorithm from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU backend algorithm, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_argon2_impl","title":"<code>be_cpu_argon2_impl</code>  <code>property</code>","text":"<p>Retrieves the CPU backend Argon2 implementation from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU backend Argon2 implementation, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_asm","title":"<code>be_cpu_asm</code>  <code>property</code>","text":"<p>Retrieves the CPU backend assembly information from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU backend assembly information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_enabled","title":"<code>be_cpu_enabled</code>  <code>property</code>","text":"<p>Retrieves the CPU backend enabled status from the backends data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU backend enabled status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_hashrate_10s","title":"<code>be_cpu_hashrate_10s</code>  <code>property</code>","text":"<p>Retrieves the CPU backend hashrate for the last 10 seconds from the backends data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>CPU backend hashrate for the last 10 seconds, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_hashrate_15m","title":"<code>be_cpu_hashrate_15m</code>  <code>property</code>","text":"<p>Retrieves the CPU backend hashrate for the last 15 minutes from the backends data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>CPU backend hashrate for the last 15 minutes, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_hashrate_1m","title":"<code>be_cpu_hashrate_1m</code>  <code>property</code>","text":"<p>Retrieves the CPU backend hashrate for the last 1 minute from the backends data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>CPU backend hashrate for the last 1 minute, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_hashrates","title":"<code>be_cpu_hashrates</code>  <code>property</code>","text":"<p>Retrieves the CPU backend hashrates from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend hashrates, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_hugepages","title":"<code>be_cpu_hugepages</code>  <code>property</code>","text":"<p>Retrieves the CPU backend hugepages information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend hugepages information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_hw_aes","title":"<code>be_cpu_hw_aes</code>  <code>property</code>","text":"<p>Retrieves the CPU backend hardware AES support status from the backends data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU backend hardware AES support status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_memory","title":"<code>be_cpu_memory</code>  <code>property</code>","text":"<p>Retrieves the CPU backend memory information from the backends data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU backend memory information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_msr","title":"<code>be_cpu_msr</code>  <code>property</code>","text":"<p>Retrieves the CPU backend MSR support status from the backends data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU backend MSR support status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_priority","title":"<code>be_cpu_priority</code>  <code>property</code>","text":"<p>Retrieves the CPU backend priority from the backends data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU backend priority, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_profile","title":"<code>be_cpu_profile</code>  <code>property</code>","text":"<p>Retrieves the CPU backend profile from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU backend profile, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_threads","title":"<code>be_cpu_threads</code>  <code>property</code>","text":"<p>Retrieves the CPU backend threads information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend threads information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_threads_affinity","title":"<code>be_cpu_threads_affinity</code>  <code>property</code>","text":"<p>Retrieves the CPU backend threads affinity information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend threads affinity information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_threads_av","title":"<code>be_cpu_threads_av</code>  <code>property</code>","text":"<p>Retrieves the CPU backend threads AV information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend threads AV information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_threads_hashrates","title":"<code>be_cpu_threads_hashrates</code>  <code>property</code>","text":"<p>Retrieves the CPU backend threads hashrates information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend threads hashrates information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_threads_hashrates_10s","title":"<code>be_cpu_threads_hashrates_10s</code>  <code>property</code>","text":"<p>Retrieves the CPU backend threads hashrates for the last 10 seconds from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend threads hashrates for the last 10 seconds, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_threads_hashrates_15m","title":"<code>be_cpu_threads_hashrates_15m</code>  <code>property</code>","text":"<p>Retrieves the CPU backend threads hashrates for the last 15 minutes from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend threads hashrates for the last 15 minutes, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_threads_hashrates_1m","title":"<code>be_cpu_threads_hashrates_1m</code>  <code>property</code>","text":"<p>Retrieves the CPU backend threads hashrates for the last 1 minute from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend threads hashrates for the last 1 minute, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_threads_intensity","title":"<code>be_cpu_threads_intensity</code>  <code>property</code>","text":"<p>Retrieves the CPU backend threads intensity information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU backend threads intensity information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cpu_type","title":"<code>be_cpu_type</code>  <code>property</code>","text":"<p>Retrieves the CPU backend type from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU backend type, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_algo","title":"<code>be_cuda_algo</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend algorithm from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CUDA backend algorithm, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_driver","title":"<code>be_cuda_driver</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend driver version from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CUDA backend driver version, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_enabled","title":"<code>be_cuda_enabled</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend enabled status from the backends data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CUDA backend enabled status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_hashrate_10s","title":"<code>be_cuda_hashrate_10s</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend hashrate for the last 10 seconds from the backends data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>CUDA backend hashrate for the last 10 seconds, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_hashrate_15m","title":"<code>be_cuda_hashrate_15m</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend hashrate for the last 15 minutes from the backends data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>CUDA backend hashrate for the last 15 minutes, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_hashrate_1m","title":"<code>be_cuda_hashrate_1m</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend hashrate for the last 1 minute from the backends data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>CUDA backend hashrate for the last 1 minute, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_hashrates","title":"<code>be_cuda_hashrates</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend hashrates from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend hashrates, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_plugin","title":"<code>be_cuda_plugin</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend plugin version from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CUDA backend plugin version, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_profile","title":"<code>be_cuda_profile</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend profile from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CUDA backend profile, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_runtime","title":"<code>be_cuda_runtime</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend runtime version from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CUDA backend runtime version, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads","title":"<code>be_cuda_threads</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_affinity","title":"<code>be_cuda_threads_affinity</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads affinity from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads affinity, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_arch","title":"<code>be_cuda_threads_arch</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads architecture from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads architecture, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_bfactor","title":"<code>be_cuda_threads_bfactor</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads bfactor from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads bfactor, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_blocks","title":"<code>be_cuda_threads_blocks</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads blocks from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads blocks, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_bsleep","title":"<code>be_cuda_threads_bsleep</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads bsleep from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads bsleep, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_bus_id","title":"<code>be_cuda_threads_bus_id</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads bus ID from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads bus ID, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_clock","title":"<code>be_cuda_threads_clock</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads clock from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads clock, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_dataset_host","title":"<code>be_cuda_threads_dataset_host</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads dataset host status from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads dataset host status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_global_mem","title":"<code>be_cuda_threads_global_mem</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads global memory from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads global memory, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_hashrate_10s","title":"<code>be_cuda_threads_hashrate_10s</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads hashrate for the last 10 seconds from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads hashrate for the last 10 seconds, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_hashrate_15m","title":"<code>be_cuda_threads_hashrate_15m</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads hashrate for the last 15 minutes from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads hashrate for the last 15 minutes, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_hashrate_1m","title":"<code>be_cuda_threads_hashrate_1m</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads hashrate for the last 1 minute from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads hashrate for the last 1 minute, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_hashrates","title":"<code>be_cuda_threads_hashrates</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads hashrates from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads hashrates, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_index","title":"<code>be_cuda_threads_index</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads index from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads index, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_memory_clock","title":"<code>be_cuda_threads_memory_clock</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads memory clock from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads memory clock, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_name","title":"<code>be_cuda_threads_name</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads name from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads name, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_threads_smx","title":"<code>be_cuda_threads_smx</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend threads SMX count from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CUDA backend threads SMX count, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_type","title":"<code>be_cuda_type</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend type from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CUDA backend type, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_cuda_versions","title":"<code>be_cuda_versions</code>  <code>property</code>","text":"<p>Retrieves the CUDA backend versions information from the backends data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>CUDA backend versions information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_algo","title":"<code>be_opencl_algo</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend algorithm from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL backend algorithm, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_enabled","title":"<code>be_opencl_enabled</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend enabled status from the backends data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>OpenCL backend enabled status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_hashrate_10s","title":"<code>be_opencl_hashrate_10s</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend hashrate for the last 10 seconds from the backends data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>OpenCL backend hashrate for the last 10 seconds, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_hashrate_15m","title":"<code>be_opencl_hashrate_15m</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend hashrate for the last 15 minutes from the backends data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>OpenCL backend hashrate for the last 15 minutes, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_hashrate_1m","title":"<code>be_opencl_hashrate_1m</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend hashrate for the last 1 minute from the backends data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>OpenCL backend hashrate for the last 1 minute, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_hashrates","title":"<code>be_opencl_hashrates</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend hashrates from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend hashrates, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_platform","title":"<code>be_opencl_platform</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend platform information from the backends data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>OpenCL backend platform information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_platform_extensions","title":"<code>be_opencl_platform_extensions</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend platform extensions from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL backend platform extensions, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_platform_index","title":"<code>be_opencl_platform_index</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend platform index from the backends data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>OpenCL backend platform index, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_platform_name","title":"<code>be_opencl_platform_name</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend platform name from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL backend platform name, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_platform_profile","title":"<code>be_opencl_platform_profile</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend platform profile from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL backend platform profile, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_platform_vendor","title":"<code>be_opencl_platform_vendor</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend platform vendor from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL backend platform vendor, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_platform_version","title":"<code>be_opencl_platform_version</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend platform version from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL backend platform version, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_profile","title":"<code>be_opencl_profile</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend profile from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL backend profile, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads","title":"<code>be_opencl_threads</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_affinity","title":"<code>be_opencl_threads_affinity</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads affinity from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads affinity, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_board","title":"<code>be_opencl_threads_board</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads board information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads board information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_bus_id","title":"<code>be_opencl_threads_bus_id</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads bus ID from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads bus ID, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_cu","title":"<code>be_opencl_threads_cu</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads compute units from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads compute units, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_global_mem","title":"<code>be_opencl_threads_global_mem</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads global memory from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads global memory, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_hashrate_10s","title":"<code>be_opencl_threads_hashrate_10s</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads hashrate for the last 10 seconds from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads hashrate for the last 10 seconds, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_hashrate_15m","title":"<code>be_opencl_threads_hashrate_15m</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads hashrate for the last 15 minutes from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads hashrate for the last 15 minutes, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_hashrate_1m","title":"<code>be_opencl_threads_hashrate_1m</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads hashrate for the last 1 minute from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads hashrate for the last 1 minute, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_hashrates","title":"<code>be_opencl_threads_hashrates</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads hashrates from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads hashrates, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_health","title":"<code>be_opencl_threads_health</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads health information from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads health information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_health_clock","title":"<code>be_opencl_threads_health_clock</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads health clock from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads health clock, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_health_mem_clock","title":"<code>be_opencl_threads_health_mem_clock</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads health memory clock from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads health memory clock, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_health_power","title":"<code>be_opencl_threads_health_power</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads health power from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads health power, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_health_rpm","title":"<code>be_opencl_threads_health_rpm</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads health RPM from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads health RPM, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_health_temp","title":"<code>be_opencl_threads_health_temp</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads health temperature from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads health temperature, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_index","title":"<code>be_opencl_threads_index</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads index from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads index, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_intensity","title":"<code>be_opencl_threads_intensity</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads intensity from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads intensity, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_name","title":"<code>be_opencl_threads_name</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads name from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads name, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_unroll","title":"<code>be_opencl_threads_unroll</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads unroll from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads unroll, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_threads_worksize","title":"<code>be_opencl_threads_worksize</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend threads worksize from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>OpenCL backend threads worksize, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.be_opencl_type","title":"<code>be_opencl_type</code>  <code>property</code>","text":"<p>Retrieves the OpenCL backend type from the backends data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL backend type, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_api_id_property","title":"<code>conf_api_id_property</code>  <code>property</code>","text":"<p>Retrieves the API ID property from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>API ID property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_api_property","title":"<code>conf_api_property</code>  <code>property</code>","text":"<p>Retrieves the API property from the config data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>API property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_api_worker_id_property","title":"<code>conf_api_worker_id_property</code>  <code>property</code>","text":"<p>Retrieves the API worker ID property from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>API worker ID property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_autosave_property","title":"<code>conf_autosave_property</code>  <code>property</code>","text":"<p>Retrieves the autosave property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Autosave property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_background_property","title":"<code>conf_background_property</code>  <code>property</code>","text":"<p>Retrieves the background property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Background property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_bench_algo_time_property","title":"<code>conf_bench_algo_time_property</code>  <code>property</code>","text":"<p>Retrieves the bench algorithm time from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Bench algorithm time, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_benchmark_algo_property","title":"<code>conf_benchmark_algo_property</code>  <code>property</code>","text":"<p>Retrieves the benchmark algorithm from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Benchmark algorithm, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_benchmark_hash_property","title":"<code>conf_benchmark_hash_property</code>  <code>property</code>","text":"<p>Retrieves the benchmark hash from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Benchmark hash, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_benchmark_property","title":"<code>conf_benchmark_property</code>  <code>property</code>","text":"<p>Retrieves the benchmark property from the config data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Benchmark property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_benchmark_seed_property","title":"<code>conf_benchmark_seed_property</code>  <code>property</code>","text":"<p>Retrieves the benchmark seed from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Benchmark seed, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_benchmark_size_property","title":"<code>conf_benchmark_size_property</code>  <code>property</code>","text":"<p>Retrieves the benchmark size from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Benchmark size, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_benchmark_submit_property","title":"<code>conf_benchmark_submit_property</code>  <code>property</code>","text":"<p>Retrieves the benchmark submit status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Benchmark submit status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_benchmark_verify_property","title":"<code>conf_benchmark_verify_property</code>  <code>property</code>","text":"<p>Retrieves the benchmark verify status from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Benchmark verify status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_colors_property","title":"<code>conf_colors_property</code>  <code>property</code>","text":"<p>Retrieves the colors property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Colors property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_argon2_impl_property","title":"<code>conf_cpu_argon2_impl_property</code>  <code>property</code>","text":"<p>Retrieves the CPU Argon2 implementation property from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU Argon2 implementation property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_asm_property","title":"<code>conf_cpu_asm_property</code>  <code>property</code>","text":"<p>Retrieves the CPU ASM property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU ASM property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_enabled_property","title":"<code>conf_cpu_enabled_property</code>  <code>property</code>","text":"<p>Retrieves the CPU enabled property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU enabled property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_huge_pages_jit_property","title":"<code>conf_cpu_huge_pages_jit_property</code>  <code>property</code>","text":"<p>Retrieves the CPU huge pages JIT property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU huge pages JIT property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_huge_pages_property","title":"<code>conf_cpu_huge_pages_property</code>  <code>property</code>","text":"<p>Retrieves the CPU huge pages property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU huge pages property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_hw_aes_property","title":"<code>conf_cpu_hw_aes_property</code>  <code>property</code>","text":"<p>Retrieves the CPU hardware AES property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU hardware AES property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_max_threads_hint_property","title":"<code>conf_cpu_max_threads_hint_property</code>  <code>property</code>","text":"<p>Retrieves the CPU max threads hint property from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU max threads hint property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_memory_pool_property","title":"<code>conf_cpu_memory_pool_property</code>  <code>property</code>","text":"<p>Retrieves the CPU memory pool property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU memory pool property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_priority_property","title":"<code>conf_cpu_priority_property</code>  <code>property</code>","text":"<p>Retrieves the CPU priority property from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU priority property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_property","title":"<code>conf_cpu_property</code>  <code>property</code>","text":"<p>Retrieves the CPU property from the config data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>CPU property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cpu_yield_property","title":"<code>conf_cpu_yield_property</code>  <code>property</code>","text":"<p>Retrieves the CPU yield property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU yield property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cuda_enabled_property","title":"<code>conf_cuda_enabled_property</code>  <code>property</code>","text":"<p>Retrieves the CUDA enabled status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CUDA enabled status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cuda_loader_property","title":"<code>conf_cuda_loader_property</code>  <code>property</code>","text":"<p>Retrieves the CUDA loader from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CUDA loader, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cuda_nvml_property","title":"<code>conf_cuda_nvml_property</code>  <code>property</code>","text":"<p>Retrieves the CUDA NVML from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CUDA NVML, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_cuda_property","title":"<code>conf_cuda_property</code>  <code>property</code>","text":"<p>Retrieves the CUDA from the config data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>CUDA, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_dmi_property","title":"<code>conf_dmi_property</code>  <code>property</code>","text":"<p>Retrieves the DMI status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>DMI status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_dns_ipv6_property","title":"<code>conf_dns_ipv6_property</code>  <code>property</code>","text":"<p>Retrieves the DNS IPv6 status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>DNS IPv6 status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_dns_property","title":"<code>conf_dns_property</code>  <code>property</code>","text":"<p>Retrieves the DNS property from the config data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>DNS property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_dns_ttl_property","title":"<code>conf_dns_ttl_property</code>  <code>property</code>","text":"<p>Retrieves the DNS TTL from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>DNS TTL, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_donate_level_property","title":"<code>conf_donate_level_property</code>  <code>property</code>","text":"<p>Retrieves the donate level from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Donate level, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_donate_over_proxy_property","title":"<code>conf_donate_over_proxy_property</code>  <code>property</code>","text":"<p>Retrieves the donate over proxy from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Donate over proxy, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_health_print_time_property","title":"<code>conf_health_print_time_property</code>  <code>property</code>","text":"<p>Retrieves the health print time from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Health print time, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_http_access_token_property","title":"<code>conf_http_access_token_property</code>  <code>property</code>","text":"<p>Retrieves the HTTP access token property from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>HTTP access token property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_http_enabled_property","title":"<code>conf_http_enabled_property</code>  <code>property</code>","text":"<p>Retrieves the HTTP enabled property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>HTTP enabled property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_http_host_property","title":"<code>conf_http_host_property</code>  <code>property</code>","text":"<p>Retrieves the HTTP host property from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>HTTP host property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_http_port_property","title":"<code>conf_http_port_property</code>  <code>property</code>","text":"<p>Retrieves the HTTP port property from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>HTTP port property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_http_property","title":"<code>conf_http_property</code>  <code>property</code>","text":"<p>Retrieves the HTTP property from the config data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>HTTP property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_http_restricted_property","title":"<code>conf_http_restricted_property</code>  <code>property</code>","text":"<p>Retrieves the HTTP restricted property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>HTTP restricted property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_log_file_property","title":"<code>conf_log_file_property</code>  <code>property</code>","text":"<p>Retrieves the log file from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Log file, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_opencl_adl_property","title":"<code>conf_opencl_adl_property</code>  <code>property</code>","text":"<p>Retrieves the OpenCL ADL property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>OpenCL ADL property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_opencl_cache_property","title":"<code>conf_opencl_cache_property</code>  <code>property</code>","text":"<p>Retrieves the OpenCL cache property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>OpenCL cache property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_opencl_enabled_property","title":"<code>conf_opencl_enabled_property</code>  <code>property</code>","text":"<p>Retrieves the OpenCL enabled property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>OpenCL enabled property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_opencl_loader_property","title":"<code>conf_opencl_loader_property</code>  <code>property</code>","text":"<p>Retrieves the OpenCL loader property from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL loader property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_opencl_platform_property","title":"<code>conf_opencl_platform_property</code>  <code>property</code>","text":"<p>Retrieves the OpenCL platform property from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>OpenCL platform property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_opencl_property","title":"<code>conf_opencl_property</code>  <code>property</code>","text":"<p>Retrieves the OpenCL property from the config data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>OpenCL property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pause_on_active_property","title":"<code>conf_pause_on_active_property</code>  <code>property</code>","text":"<p>Retrieves the pause on active status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Pause on active status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pause_on_battery_property","title":"<code>conf_pause_on_battery_property</code>  <code>property</code>","text":"<p>Retrieves the pause on battery status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Pause on battery status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_algo_property","title":"<code>conf_pools_algo_property</code>  <code>property</code>","text":"<p>Retrieves the pools algorithm from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools algorithm, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_coin_property","title":"<code>conf_pools_coin_property</code>  <code>property</code>","text":"<p>Retrieves the pools coin from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools coin, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_daemon_job_timeout_property","title":"<code>conf_pools_daemon_job_timeout_property</code>  <code>property</code>","text":"<p>Retrieves the pools daemon job timeout from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools daemon job timeout, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_daemon_poll_interval_property","title":"<code>conf_pools_daemon_poll_interval_property</code>  <code>property</code>","text":"<p>Retrieves the pools daemon poll interval from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools daemon poll interval, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_daemon_property","title":"<code>conf_pools_daemon_property</code>  <code>property</code>","text":"<p>Retrieves the pools daemon status from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools daemon status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_daemon_zmq_port_property","title":"<code>conf_pools_daemon_zmq_port_property</code>  <code>property</code>","text":"<p>Retrieves the pools daemon ZMQ port from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools daemon ZMQ port, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_enabled_property","title":"<code>conf_pools_enabled_property</code>  <code>property</code>","text":"<p>Retrieves the pools enabled status from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools enabled status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_keepalive_property","title":"<code>conf_pools_keepalive_property</code>  <code>property</code>","text":"<p>Retrieves the pools keepalive status from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools keepalive status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_nicehash_property","title":"<code>conf_pools_nicehash_property</code>  <code>property</code>","text":"<p>Retrieves the pools NiceHash status from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools NiceHash status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_pass_property","title":"<code>conf_pools_pass_property</code>  <code>property</code>","text":"<p>Retrieves the pools password from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools password, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_property","title":"<code>conf_pools_property</code>  <code>property</code>","text":"<p>Retrieves the pools from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_rig_id_property","title":"<code>conf_pools_rig_id_property</code>  <code>property</code>","text":"<p>Retrieves the pools rig ID from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools rig ID, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_self_select_property","title":"<code>conf_pools_self_select_property</code>  <code>property</code>","text":"<p>Retrieves the pools self-select from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools self-select, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_sni_property","title":"<code>conf_pools_sni_property</code>  <code>property</code>","text":"<p>Retrieves the pools SNI status from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools SNI status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_socks5_property","title":"<code>conf_pools_socks5_property</code>  <code>property</code>","text":"<p>Retrieves the pools SOCKS5 from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools SOCKS5, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_spend_secret_key_property","title":"<code>conf_pools_spend_secret_key_property</code>  <code>property</code>","text":"<p>Retrieves the pools spend secret key status from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools spend secret key status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_submit_to_origin_property","title":"<code>conf_pools_submit_to_origin_property</code>  <code>property</code>","text":"<p>Retrieves the pools submit to origin status from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools submit to origin status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_tls_fingerprint_property","title":"<code>conf_pools_tls_fingerprint_property</code>  <code>property</code>","text":"<p>Retrieves the pools TLS fingerprint from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools TLS fingerprint, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_tls_property","title":"<code>conf_pools_tls_property</code>  <code>property</code>","text":"<p>Retrieves the pools TLS status from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools TLS status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_url_property","title":"<code>conf_pools_url_property</code>  <code>property</code>","text":"<p>Retrieves the pools URL from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools URL, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_pools_user_property","title":"<code>conf_pools_user_property</code>  <code>property</code>","text":"<p>Retrieves the pools user from the config data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Pools user, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_print_time_property","title":"<code>conf_print_time_property</code>  <code>property</code>","text":"<p>Retrieves the print time from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Print time, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_1gb_pages_property","title":"<code>conf_randomx_1gb_pages_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX 1GB pages property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>RandomX 1GB pages property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_cache_qos_property","title":"<code>conf_randomx_cache_qos_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX cache QoS property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>RandomX cache QoS property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_init_avx2_property","title":"<code>conf_randomx_init_avx2_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX init AVX2 property from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>RandomX init AVX2 property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_init_property","title":"<code>conf_randomx_init_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX init property from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>RandomX init property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_mode_property","title":"<code>conf_randomx_mode_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX mode property from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>RandomX mode property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_numa_property","title":"<code>conf_randomx_numa_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX NUMA property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>RandomX NUMA property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_property","title":"<code>conf_randomx_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX property from the config data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>RandomX property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_rdmsr_property","title":"<code>conf_randomx_rdmsr_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX RDMSR property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>RandomX RDMSR property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_scratchpad_prefetch_mode_property","title":"<code>conf_randomx_scratchpad_prefetch_mode_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX scratchpad prefetch mode property from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>RandomX scratchpad prefetch mode property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_randomx_wrmsr_property","title":"<code>conf_randomx_wrmsr_property</code>  <code>property</code>","text":"<p>Retrieves the RandomX WRMSR property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>RandomX WRMSR property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_rebench_algo_property","title":"<code>conf_rebench_algo_property</code>  <code>property</code>","text":"<p>Retrieves the rebench algorithm status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Rebench algorithm status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_retries_property","title":"<code>conf_retries_property</code>  <code>property</code>","text":"<p>Retrieves the retries from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Retries, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_retry_pause_property","title":"<code>conf_retry_pause_property</code>  <code>property</code>","text":"<p>Retrieves the retry pause from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Retry pause, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_syslog_property","title":"<code>conf_syslog_property</code>  <code>property</code>","text":"<p>Retrieves the syslog status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Syslog status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_title_property","title":"<code>conf_title_property</code>  <code>property</code>","text":"<p>Retrieves the title property from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Title property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_tls_cert_key_property","title":"<code>conf_tls_cert_key_property</code>  <code>property</code>","text":"<p>Retrieves the TLS certificate key from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>TLS certificate key, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_tls_cert_property","title":"<code>conf_tls_cert_property</code>  <code>property</code>","text":"<p>Retrieves the TLS certificate from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>TLS certificate, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_tls_ciphers_property","title":"<code>conf_tls_ciphers_property</code>  <code>property</code>","text":"<p>Retrieves the TLS ciphers from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>TLS ciphers, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_tls_ciphersuites_property","title":"<code>conf_tls_ciphersuites_property</code>  <code>property</code>","text":"<p>Retrieves the TLS ciphersuites from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>TLS ciphersuites, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_tls_dhparam_property","title":"<code>conf_tls_dhparam_property</code>  <code>property</code>","text":"<p>Retrieves the TLS DH parameter from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>TLS DH parameter, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_tls_enabled_property","title":"<code>conf_tls_enabled_property</code>  <code>property</code>","text":"<p>Retrieves the TLS enabled status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>TLS enabled status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_tls_property","title":"<code>conf_tls_property</code>  <code>property</code>","text":"<p>Retrieves the TLS property from the config data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>TLS property, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_tls_protocols_property","title":"<code>conf_tls_protocols_property</code>  <code>property</code>","text":"<p>Retrieves the TLS protocols from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>TLS protocols, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_user_agent_property","title":"<code>conf_user_agent_property</code>  <code>property</code>","text":"<p>Retrieves the user agent from the config data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>User agent, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_verbose_property","title":"<code>conf_verbose_property</code>  <code>property</code>","text":"<p>Retrieves the verbose level from the config data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Verbose level, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.conf_watch_property","title":"<code>conf_watch_property</code>  <code>property</code>","text":"<p>Retrieves the watch status from the config data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Watch status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.config","title":"<code>config</code>  <code>property</code>","text":"<p>Retrieves the entire cached config endpoint data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Current config response, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.enabled_backends","title":"<code>enabled_backends</code>  <code>property</code>","text":"<p>Retrieves the enabled backends from the backends data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Enabled backends, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_algorithm","title":"<code>sum_algorithm</code>  <code>property</code>","text":"<p>Retrieves the cached current mining algorithm from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Current mining algorithm, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_algorithms","title":"<code>sum_algorithms</code>  <code>property</code>","text":"<p>Retrieves the cached algorithms information from the summary data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Algorithms information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_avg_time","title":"<code>sum_avg_time</code>  <code>property</code>","text":"<p>Retrieves the cached average time information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Average time information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_avg_time_ms","title":"<code>sum_avg_time_ms</code>  <code>property</code>","text":"<p>Retrieves the cached average time in <code>ms</code> information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Average time in <code>ms</code> information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_best_results","title":"<code>sum_best_results</code>  <code>property</code>","text":"<p>Retrieves the cached best results from the summary data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Best results, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_connection","title":"<code>sum_connection</code>  <code>property</code>","text":"<p>Retrieves the cached connection information from the summary data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Connection information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_64_bit","title":"<code>sum_cpu_64_bit</code>  <code>property</code>","text":"<p>Retrieves the cached CPU 64-bit support status from the summary data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU 64-bit support status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_aes","title":"<code>sum_cpu_aes</code>  <code>property</code>","text":"<p>Retrieves the cached CPU AES support status from the summary data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU AES support status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_arch","title":"<code>sum_cpu_arch</code>  <code>property</code>","text":"<p>Retrieves the cached CPU architecture information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU architecture information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_assembly","title":"<code>sum_cpu_assembly</code>  <code>property</code>","text":"<p>Retrieves the cached CPU assembly information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU assembly information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_avx2","title":"<code>sum_cpu_avx2</code>  <code>property</code>","text":"<p>Retrieves the cached CPU AVX2 support status from the summary data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU AVX2 support status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_backend","title":"<code>sum_cpu_backend</code>  <code>property</code>","text":"<p>Retrieves the cached CPU backend information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU backend information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_brand","title":"<code>sum_cpu_brand</code>  <code>property</code>","text":"<p>Retrieves the cached CPU brand information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU brand information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_cores","title":"<code>sum_cpu_cores</code>  <code>property</code>","text":"<p>Retrieves the cached CPU cores count from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU cores count, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_family","title":"<code>sum_cpu_family</code>  <code>property</code>","text":"<p>Retrieves the cached CPU family information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU family information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_flags","title":"<code>sum_cpu_flags</code>  <code>property</code>","text":"<p>Retrieves the cached CPU flags information from the summary data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>CPU flags information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_info","title":"<code>sum_cpu_info</code>  <code>property</code>","text":"<p>Retrieves the cached CPU information from the summary data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>CPU information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_l2","title":"<code>sum_cpu_l2</code>  <code>property</code>","text":"<p>Retrieves the cached CPU L2 cache size from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU L2 cache size, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_l3","title":"<code>sum_cpu_l3</code>  <code>property</code>","text":"<p>Retrieves the cached CPU L3 cache size from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU L3 cache size, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_model","title":"<code>sum_cpu_model</code>  <code>property</code>","text":"<p>Retrieves the cached CPU model information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU model information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_msr","title":"<code>sum_cpu_msr</code>  <code>property</code>","text":"<p>Retrieves the cached CPU MSR information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>CPU MSR information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_nodes","title":"<code>sum_cpu_nodes</code>  <code>property</code>","text":"<p>Retrieves the cached CPU nodes count from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU nodes count, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_packages","title":"<code>sum_cpu_packages</code>  <code>property</code>","text":"<p>Retrieves the cached CPU packages count from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU packages count, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_proc_info","title":"<code>sum_cpu_proc_info</code>  <code>property</code>","text":"<p>Retrieves the cached CPU frequency information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU frequency information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_stepping","title":"<code>sum_cpu_stepping</code>  <code>property</code>","text":"<p>Retrieves the cached CPU stepping information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU stepping information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_threads","title":"<code>sum_cpu_threads</code>  <code>property</code>","text":"<p>Retrieves the cached CPU threads count from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>CPU threads count, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_cpu_x64","title":"<code>sum_cpu_x64</code>  <code>property</code>","text":"<p>Retrieves the cached CPU x64 support status from the summary data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>CPU x64 support status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_current_difficulty","title":"<code>sum_current_difficulty</code>  <code>property</code>","text":"<p>Retrieves the cached current difficulty from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Current difficulty, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_donate_level","title":"<code>sum_donate_level</code>  <code>property</code>","text":"<p>Retrieves the cached donate level information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Donate level information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_features","title":"<code>sum_features</code>  <code>property</code>","text":"<p>Retrieves the cached supported features information from the summary data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Supported features information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_free_memory","title":"<code>sum_free_memory</code>  <code>property</code>","text":"<p>Retrieves the cached free memory from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Free memory information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_good_shares","title":"<code>sum_good_shares</code>  <code>property</code>","text":"<p>Retrieves the cached good shares from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Good shares, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_hardware_concurrency","title":"<code>sum_hardware_concurrency</code>  <code>property</code>","text":"<p>Retrieves the cached hardware concurrency from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Hardware concurrency information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_hashrate","title":"<code>sum_hashrate</code>  <code>property</code>","text":"<p>Retrieves the cached hashrate information from the summary data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Hashrate information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_hashrate_10s","title":"<code>sum_hashrate_10s</code>  <code>property</code>","text":"<p>Retrieves the cached hashrate for the last 10 seconds from the summary data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Hashrate for the last 10 seconds, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_hashrate_15m","title":"<code>sum_hashrate_15m</code>  <code>property</code>","text":"<p>Retrieves the cached hashrate for the last 15 minutes from the summary data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Hashrate for the last 15 minutes, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_hashrate_1m","title":"<code>sum_hashrate_1m</code>  <code>property</code>","text":"<p>Retrieves the cached hashrate for the last 1 minute from the summary data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Hashrate for the last 1 minute, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_hashrate_highest","title":"<code>sum_hashrate_highest</code>  <code>property</code>","text":"<p>Retrieves the cached highest hashrate from the summary data.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Highest hashrate, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_hashrate_total","title":"<code>sum_hashrate_total</code>  <code>property</code>","text":"<p>Retrieves the cached hashrate toal information from the summary data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Hashrate total information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_hugepages","title":"<code>sum_hugepages</code>  <code>property</code>","text":"<p>Retrieves the cached hugepages information from the summary data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Hugepages information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_id","title":"<code>sum_id</code>  <code>property</code>","text":"<p>Retrieves the cached ID information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>ID information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_kind","title":"<code>sum_kind</code>  <code>property</code>","text":"<p>Retrieves the cached kind information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Kind information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_load_average","title":"<code>sum_load_average</code>  <code>property</code>","text":"<p>Retrieves the cached load average from the summary data.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>Load average information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_memory_usage","title":"<code>sum_memory_usage</code>  <code>property</code>","text":"<p>Retrieves the cached memory usage from the summary data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Memory usage information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_paused","title":"<code>sum_paused</code>  <code>property</code>","text":"<p>Retrieves the cached paused status from the summary data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Paused status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_accepted_jobs","title":"<code>sum_pool_accepted_jobs</code>  <code>property</code>","text":"<p>Retrieves the cached number of accepted jobs from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Number of accepted jobs, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_algo","title":"<code>sum_pool_algo</code>  <code>property</code>","text":"<p>Retrieves the cached pool algorithm information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Pool algorithm information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_average_time","title":"<code>sum_pool_average_time</code>  <code>property</code>","text":"<p>Retrieves the cached pool average time information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Pool average time information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_average_time_ms","title":"<code>sum_pool_average_time_ms</code>  <code>property</code>","text":"<p>Retrieves the cached pool average time in ms from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Pool average time in ms, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_diff","title":"<code>sum_pool_diff</code>  <code>property</code>","text":"<p>Retrieves the cached pool difficulty information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Pool difficulty information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_failures","title":"<code>sum_pool_failures</code>  <code>property</code>","text":"<p>Retrieves the cached pool failures information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Pool failures information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_info","title":"<code>sum_pool_info</code>  <code>property</code>","text":"<p>Retrieves the cached pool information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Pool information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_ip_address","title":"<code>sum_pool_ip_address</code>  <code>property</code>","text":"<p>Retrieves the cached IP address from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>IP address, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_ping","title":"<code>sum_pool_ping</code>  <code>property</code>","text":"<p>Retrieves the cached pool ping information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Pool ping information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_rejected_jobs","title":"<code>sum_pool_rejected_jobs</code>  <code>property</code>","text":"<p>Retrieves the cached number of rejected jobs from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Number of rejected jobs, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_tls","title":"<code>sum_pool_tls</code>  <code>property</code>","text":"<p>Retrieves the cached pool tls status from the summary data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Pool tls status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_tls_fingerprint","title":"<code>sum_pool_tls_fingerprint</code>  <code>property</code>","text":"<p>Retrieves the cached pool tls fingerprint information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Pool tls fingerprint information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_total_hashes","title":"<code>sum_pool_total_hashes</code>  <code>property</code>","text":"<p>Retrieves the cached pool total hashes information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Pool total hashes information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_uptime","title":"<code>sum_pool_uptime</code>  <code>property</code>","text":"<p>Retrieves the cached pool uptime information from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Pool uptime information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_pool_uptime_ms","title":"<code>sum_pool_uptime_ms</code>  <code>property</code>","text":"<p>Retrieves the cached pool uptime in ms from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Pool uptime in ms, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_resident_set_memory","title":"<code>sum_resident_set_memory</code>  <code>property</code>","text":"<p>Retrieves the cached resident set memory from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Resident set memory information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_resources","title":"<code>sum_resources</code>  <code>property</code>","text":"<p>Retrieves the cached resources information from the summary data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Resources information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_restricted","title":"<code>sum_restricted</code>  <code>property</code>","text":"<p>Retrieves the cached current restricted status from the summary data.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>Current restricted status, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_results","title":"<code>sum_results</code>  <code>property</code>","text":"<p>Retrieves the cached results information from the summary data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Results information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_total_hashes","title":"<code>sum_total_hashes</code>  <code>property</code>","text":"<p>Retrieves the cached total number of hashes from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Total number of hashes, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_total_memory","title":"<code>sum_total_memory</code>  <code>property</code>","text":"<p>Retrieves the cached total memory from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Total memory information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_total_shares","title":"<code>sum_total_shares</code>  <code>property</code>","text":"<p>Retrieves the cached total shares from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Total shares, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_ua","title":"<code>sum_ua</code>  <code>property</code>","text":"<p>Retrieves the cached user agent information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>User agent information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_uptime","title":"<code>sum_uptime</code>  <code>property</code>","text":"<p>Retrieves the cached current uptime from the summary data.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Current uptime in seconds, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_uptime_readable","title":"<code>sum_uptime_readable</code>  <code>property</code>","text":"<p>Retrieves the cached uptime in a human-readable format from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Uptime in the format \"days, hours:minutes:seconds\", or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_version","title":"<code>sum_version</code>  <code>property</code>","text":"<p>Retrieves the cached version information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Version information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.sum_worker_id","title":"<code>sum_worker_id</code>  <code>property</code>","text":"<p>Retrieves the cached worker ID information from the summary data.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Worker ID information, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.summary","title":"<code>summary</code>  <code>property</code>","text":"<p>Retrieves the entire cached summary endpoint data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Current summary response, or \"N/A\" if not available.</p>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.__init__","title":"<code>__init__(miner_name, ip, port, access_token=None, tls_enabled=False, db_url=None)</code>","text":"<p>Initializes the XMRig instance with the provided IP, port, and access token.</p> <p>The <code>ip</code> can be either an IP address or domain name with its TLD (e.g. <code>example.com</code>). The schema is not  required and the appropriate one will be chosen based on the <code>tls_enabled</code> value.</p> <p>Parameters:</p> Name Type Description Default <code>miner_name</code> <code>str</code> <p>A unique name for the miner.</p> required <code>ip</code> <code>str</code> <p>IP address or domain of the XMRig API.</p> required <code>port</code> <code>int</code> <p>Port of the XMRig API.</p> required <code>access_token</code> <code>str</code> <p>Access token for authorization. Defaults to None.</p> <code>None</code> <code>tls_enabled</code> <code>bool</code> <p>TLS status of the miner/API. Defaults to False.</p> <code>False</code> <code>db_url</code> <code>str</code> <p>Database URL for storing miner data. Defaults to None.</p> <code>None</code> Source code in <code>xmrig/api.py</code> <pre><code>def __init__(self, miner_name, ip, port, access_token = None, tls_enabled = False, db_url = None):\n    \"\"\"\n    Initializes the XMRig instance with the provided IP, port, and access token.\n\n    The `ip` can be either an IP address or domain name with its TLD (e.g. `example.com`). The schema is not \n    required and the appropriate one will be chosen based on the `tls_enabled` value.\n\n    Args:\n        miner_name (str): A unique name for the miner.\n        ip (str): IP address or domain of the XMRig API.\n        port (int): Port of the XMRig API.\n        access_token (str, optional): Access token for authorization. Defaults to None.\n        tls_enabled (bool, optional): TLS status of the miner/API. Defaults to False.\n        db_url (str, optional): Database URL for storing miner data. Defaults to None.\n    \"\"\"\n    self._miner_name = miner_name\n    self._ip = ip\n    self._port = port\n    self._access_token = access_token\n    self._tls_enabled = tls_enabled\n    self._base_url = f\"https://{ip}:{port}\" if self._tls_enabled else f\"http://{ip}:{port}\"\n    self._db_url = db_url\n    self._json_rpc_url = f\"{self._base_url}/json_rpc\"\n    self._summary_url = f\"{self._base_url}/2/summary\"\n    self._backends_url = f\"{self._base_url}/2/backends\"\n    self._config_url = f\"{self._base_url}/2/config\"\n    self._summary_cache = None\n    self._backends_cache = None\n    self._config_cache = None\n    self._summary_table_name = \"summary\"\n    self._backends_table_name = \"backends\"\n    self._config_table_name = \"config\"\n    self._headers = {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Host\": f\"{self._base_url}\",\n        \"Connection\": \"keep-alive\",\n        \"Authorization\": f\"Bearer {self._access_token}\"\n    }\n    self._json_rpc_payload = {\n        \"method\": None,\n        \"jsonrpc\": \"2.0\",\n        \"id\": 1,\n    }\n    self.get_all_responses()\n    log.info(f\"XMRigAPI initialized for {self._base_url}\")\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI._fallback_to_db","title":"<code>_fallback_to_db(table_name, selection)</code>","text":"<p>Fallback to the database if the data is not available in the cache.</p> <p>Parameters:</p> Name Type Description Default <code>db_url</code> <code>str</code> <p>Database URL for creating the engine.</p> required <code>table_name</code> <code>str</code> <p>Name of the table to retrieve data from.</p> required <code>selection</code> <code>str</code> <p>Column to select from the table.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>The retrieved data, or a default string value of \"N/A\" if not available.</p> Source code in <code>xmrig/api.py</code> <pre><code>def _fallback_to_db(self, table_name, selection):\n    \"\"\"\n    Fallback to the database if the data is not available in the cache.\n\n    Args:\n        db_url (str): Database URL for creating the engine.\n        table_name (str): Name of the table to retrieve data from.\n        selection (str): Column to select from the table.\n\n    Returns:\n        Any: The retrieved data, or a default string value of \"N/A\" if not available.\n    \"\"\"\n    result = XMRigDatabase.retrieve_data_from_db(self._db_url, table_name, self._miner_name, selection)\n    return result[0].get(selection, \"N/A\") if len(result) &gt; 0 else \"N/A\"\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI._get_data_from_cache","title":"<code>_get_data_from_cache(response, keys, table_name, selection)</code>","text":"<p>Retrieves the data from the response using the provided keys. Falls back to the database if the data is not available.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>dict | list</code> <p>The response data.</p> required <code>keys</code> <code>list</code> <p>The keys to use to retrieve the data.</p> required <code>table_name</code> <code>str | list</code> <p>The table name or list of table names to use for fallback database retrieval.</p> required <code>selection</code> <code>str</code> <p>Column to select from the table.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>The retrieved data, or a default string value of \"N/A\" if not available.</p> <p>Raises:</p> Type Description <code>JSONDecodeError</code> <p>If there is an error decoding the JSON response.</p> <code>KeyError</code> <p>If a key is not found in the response data.</p> <code>XMRigDatabaseError</code> <p>If there is an error retrieving data from the database.</p> Source code in <code>xmrig/api.py</code> <pre><code>def _get_data_from_cache(self, response, keys, table_name, selection):\n    \"\"\"\n    Retrieves the data from the response using the provided keys. Falls back to the database if the data is not available.\n\n    Args:\n        response (dict | list): The response data.\n        keys (list): The keys to use to retrieve the data.\n        table_name (str | list): The table name or list of table names to use for fallback database retrieval.\n        selection (str): Column to select from the table.\n\n    Returns:\n        Any: The retrieved data, or a default string value of \"N/A\" if not available.\n\n    Raises:\n        JSONDecodeError: If there is an error decoding the JSON response.\n        KeyError: If a key is not found in the response data.\n        XMRigDatabaseError: If there is an error retrieving data from the database.\n    \"\"\"\n    data = \"N/A\"\n    try:\n        if response == None:\n            # TODO: Use this exception or requests.exceptions.JSONDecodeError ?\n            raise JSONDecodeError(\"No response data available, trying database.\", \"\", 0)\n        else:\n            data = response\n            if len(keys) &gt; 0:\n                for key in keys:\n                    data = data[key]\n    except JSONDecodeError as e:\n        if self._db_url is not None:\n            try:\n                return self._fallback_to_db(table_name, selection)\n            except XMRigDatabaseError as db_e:\n                log.error(f\"An error occurred fetching the backends data from the database: {db_e}\")\n                data = \"N/A\"\n    except KeyError as e:\n        log.error(f\"Key not found in the response data: {e}\")\n        data = \"N/A\"\n    return data\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI._update_cache","title":"<code>_update_cache(response, endpoint)</code>","text":"<p>Updates the cached data for an endpoint with the supplied response data.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>dict | list</code> <p>The response data.</p> required <code>endpoint</code> <code>str</code> <p>The endpoint from which the data is retrieved.</p> required Source code in <code>xmrig/api.py</code> <pre><code>def _update_cache(self, response, endpoint):\n    \"\"\"\n    Updates the cached data for an endpoint with the supplied response data.\n\n    Args:\n        response (dict | list): The response data.\n        endpoint (str): The endpoint from which the data is retrieved.\n    \"\"\"\n    if endpoint == \"summary\":\n        self._summary_cache = response\n    if endpoint == \"backends\":\n        self._backends_cache = response\n    if endpoint == \"config\":\n        self._config_cache = response\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.get_all_responses","title":"<code>get_all_responses()</code>","text":"<p>Retrieves all responses from the API.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if successful, or False if an error occurred.</p> <p>Raises:</p> Type Description <code>XMRigAuthorizationError</code> <p>If an authorization error occurs.</p> <code>XMRigConnectionError</code> <p>If a connection error occurs.</p> <code>XMRigAPIError</code> <p>If a general API error occurs.</p> Source code in <code>xmrig/api.py</code> <pre><code>def get_all_responses(self):\n    \"\"\"\n    Retrieves all responses from the API.\n\n    Returns:\n        bool: True if successful, or False if an error occurred.\n\n    Raises:\n        XMRigAuthorizationError: If an authorization error occurs.\n        XMRigConnectionError: If a connection error occurs.\n        XMRigAPIError: If a general API error occurs.\n    \"\"\"\n    summary_success = self.get_endpoint(\"summary\")\n    backends_success = self.get_endpoint(\"backends\")\n    config_success = self.get_endpoint(\"config\")\n    return summary_success and backends_success and config_success\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.get_endpoint","title":"<code>get_endpoint(endpoint)</code>","text":"<p>Updates the cached data from the specified XMRig API endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint to fetch data from. Should be one of 'summary', 'backends', or 'config'.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the cached data is successfully updated or False if an error occurred.</p> <p>Raises:</p> Type Description <code>XMRigAuthorizationError</code> <p>If an authorization error occurs.</p> <code>XMRigConnectionError</code> <p>If a connection error occurs.</p> <code>XMRigAPIError</code> <p>If a general API error occurs.</p> Source code in <code>xmrig/api.py</code> <pre><code>def get_endpoint(self, endpoint):\n    \"\"\"\n    Updates the cached data from the specified XMRig API endpoint.\n\n    Args:\n        endpoint (str): The endpoint to fetch data from. Should be one of 'summary', 'backends', or 'config'.\n\n    Returns:\n        bool: True if the cached data is successfully updated or False if an error occurred.\n\n    Raises:\n        XMRigAuthorizationError: If an authorization error occurs.\n        XMRigConnectionError: If a connection error occurs.\n        XMRigAPIError: If a general API error occurs.\n    \"\"\"\n    url_map = {\n        \"summary\": self._summary_url,\n        \"backends\": self._backends_url,\n        \"config\": self._config_url\n    }\n    try:\n        response = requests.get(url_map[endpoint], headers=self._headers)\n        if response.status_code == 401:\n            raise XMRigAuthorizationError(message = \"401 UNAUTHORIZED\")\n        response.raise_for_status()\n        try:\n            json_response = response.json()\n        except requests.exceptions.JSONDecodeError as e:\n            json_response = None\n            raise requests.exceptions.JSONDecodeError(\"JSON decode error\", response.text, response.status_code)\n        else:\n            self._update_cache(json_response, endpoint)\n            log.debug(f\"{endpoint.capitalize()} endpoint successfully fetched.\")\n            if self._db_url is not None:\n                XMRigDatabase._insert_data_to_db(json_response, self._miner_name, endpoint, self._db_url)\n            return True\n    except requests.exceptions.JSONDecodeError as e:\n        # INFO: Due to a bug in XMRig, the first 15 minutes a miner is running/restarted its backends \n        # INFO: endpoint will return a malformed JSON response, allow the program to continue running \n        # INFO: to bypass this bug for now until a fix is provided by the XMRig developers.\n        log.error(\"Due to a bug in XMRig, the first 15 minutes a miner is running/restarted its backends endpoint will return a malformed JSON response. If that is the case then this error/warning can be safely ignored.\")\n        log.error(f\"An error occurred decoding the {endpoint} response: {e}\")\n        return False\n    except requests.exceptions.RequestException as e:\n        raise XMRigConnectionError(e, traceback.format_exc(), f\"An error occurred while connecting to {url_map[endpoint]}:\") from e\n    except XMRigAuthorizationError as e:\n        raise XMRigAuthorizationError(e, traceback.format_exc(), f\"An authorization error occurred updating the {endpoint} endpoint, please provide a valid access token:\") from e\n    except Exception as e:\n        raise XMRigAPIError(e, traceback.format_exc(), f\"An error occurred updating the {endpoint} endpoint:\") from e\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.get_from_db","title":"<code>get_from_db(table_name, selection)</code>","text":"<p>Retrieve data from the database.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>Name of the table to retrieve data from.</p> required <code>selection</code> <code>str</code> <p>Column to select from the table.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>List of dictionaries containing the retrieved data.</p> Source code in <code>xmrig/api.py</code> <pre><code>def get_from_db(self, table_name, selection):\n    \"\"\"\n    Retrieve data from the database.\n\n    Args:\n        table_name (str): Name of the table to retrieve data from.\n        selection (str): Column to select from the table.\n\n    Returns:\n        list: List of dictionaries containing the retrieved data.\n    \"\"\"\n    return XMRigDatabase.retrieve_data_from_db(self._db_url, table_name, self._miner_name, selection)\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.perform_action","title":"<code>perform_action(action)</code>","text":"<p>Controls the miner by performing the specified action.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>The action to perform. Valid actions are 'pause', 'resume', 'stop', 'start'.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the action was successfully performed, or False if an error occurred.</p> <p>Raises:</p> Type Description <code>XMRigConnectionError</code> <p>If a connection error occurs.</p> <code>XMRigAPIError</code> <p>If a general API error occurs.</p> Source code in <code>xmrig/api.py</code> <pre><code>def perform_action(self, action):\n    \"\"\"\n    Controls the miner by performing the specified action.\n\n    Args:\n        action (str): The action to perform. Valid actions are 'pause', 'resume', 'stop', 'start'.\n\n    Returns:\n        bool: True if the action was successfully performed, or False if an error occurred.\n\n    Raises:\n        XMRigConnectionError: If a connection error occurs.\n        XMRigAPIError: If a general API error occurs.\n    \"\"\"\n    try:\n        # TODO: The `start` json RPC method is not implemented by XMRig yet, use alternative implementation \n        # TODO: until PR 3030 is merged, see the following issues and PRs for more information: \n        # TODO: https://github.com/xmrig/xmrig/issues/2826#issuecomment-1146465641\n        # TODO: https://github.com/xmrig/xmrig/issues/3220#issuecomment-1450691309\n        # TODO: https://github.com/xmrig/xmrig/pull/3030\n        if action == \"start\":\n            self.get_endpoint(\"config\")\n            self.post_config(self._config_cache)\n            log.debug(f\"Miner successfully started.\")\n        else:\n            url = f\"{self._json_rpc_url}\"\n            payload = self._json_rpc_payload\n            payload[\"method\"] = action\n            response = requests.post(url, json=payload, headers=self._headers)\n            response.raise_for_status()\n            log.debug(f\"Miner successfully {action}ed.\")\n        return True\n    except requests.exceptions.RequestException as e:\n        raise XMRigConnectionError(e, traceback.format_exc(), f\"A connection error occurred {action}ing the miner:\") from e\n    except Exception as e:\n        raise XMRigAPIError(e, traceback.format_exc(), f\"An error occurred {action}ing the miner:\") from e\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.post_config","title":"<code>post_config(config)</code>","text":"<p>Updates the miners config data via the XMRig API.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>Configuration data to update.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the config was changed successfully, or False if an error occurred.</p> <p>Raises:</p> Type Description <code>XMRigAuthorizationError</code> <p>If an authorization error occurs.</p> <code>XMRigConnectionError</code> <p>If a connection error occurs.</p> <code>XMRigAPIError</code> <p>If a general API error occurs.</p> Source code in <code>xmrig/api.py</code> <pre><code>def post_config(self, config):\n    \"\"\"\n    Updates the miners config data via the XMRig API.\n\n    Args:\n        config (dict): Configuration data to update.\n\n    Returns:\n        bool: True if the config was changed successfully, or False if an error occurred.\n\n    Raises:\n        XMRigAuthorizationError: If an authorization error occurs.\n        XMRigConnectionError: If a connection error occurs.\n        XMRigAPIError: If a general API error occurs.\n    \"\"\"\n    try:\n        response = requests.post(self._config_url, json = config, headers = self._headers)\n        if response.status_code == 401:\n            raise XMRigAuthorizationError()\n        # Raise an HTTPError for bad responses (4xx and 5xx)\n        response.raise_for_status()\n        # Get the updated config data from the endpoint and update the cached data\n        self.get_endpoint(\"config\")\n        log.debug(f\"Config endpoint successfully updated.\")\n        return True\n    except requests.exceptions.JSONDecodeError as e:\n        raise requests.exceptions.JSONDecodeError(\"JSON decode error\", response.text, response.status_code)\n    except requests.exceptions.RequestException as e:\n        raise XMRigConnectionError(e, traceback.format_exc(), f\"An error occurred while connecting to {self._config_url}:\") from e\n    except XMRigAuthorizationError as e:\n        raise XMRigAuthorizationError(e, traceback.format_exc(), f\"An authorization error occurred posting the config, please provide a valid access token:\") from e\n    except Exception as e:\n        raise XMRigAPIError(e, traceback.format_exc(), f\"An error occurred posting the config:\") from e\n</code></pre>"},{"location":"reference/classes/api/#xmrig.api.XMRigAPI.set_auth_header","title":"<code>set_auth_header()</code>","text":"<p>Update the Authorization header for the HTTP requests.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the Authorization header was changed, or False if an error occurred.</p> <p>Raises:</p> Type Description <code>XMRigAuthorizationError</code> <p>An error occurred setting the Authorization Header.</p> Source code in <code>xmrig/api.py</code> <pre><code>def set_auth_header(self):\n    \"\"\"\n    Update the Authorization header for the HTTP requests.\n\n    Returns:\n        bool: True if the Authorization header was changed, or False if an error occurred.\n\n    Raises:\n        XMRigAuthorizationError: An error occurred setting the Authorization Header.\n    \"\"\"\n    try:\n        self._headers[\"Authorization\"] = f\"Bearer {self._access_token}\"\n        log.debug(f\"Authorization header successfully changed.\")\n        return True\n    except XMRigAuthorizationError as e:\n        raise XMRigAuthorizationError(e, traceback.format_exc(), f\"An error occurred setting the Authorization Header: {e}\") from e\n</code></pre>"},{"location":"reference/classes/db/","title":"XMRigDatabase","text":"<p>A class for handling database operations related to the XMRig miner.</p> <p>Attributes:</p> Name Type Description <code>_engines</code> <code>dict</code> <p>A dictionary to store database engines.</p> <code>_table_model_map</code> <code>dict</code> <p>A dictionary mapping table names to their corresponding ORM models.</p> Source code in <code>xmrig/db.py</code> <pre><code>class XMRigDatabase:\n    \"\"\"\n    A class for handling database operations related to the XMRig miner.\n\n    Attributes:\n        _engines (dict): A dictionary to store database engines.\n        _table_model_map (dict): A dictionary mapping table names to their corresponding ORM models.\n    \"\"\"\n\n    _engines = {}\n    _table_model_map = {\n        \"summary\": Summary,\n        \"config\": Config,\n        \"backends\": Backends,\n    }\n\n    @classmethod\n    def _init_db(cls, db_url):\n        \"\"\"\n        Initializes the database engine, if it already exists, it returns the existing engine.\n\n        Args:\n            db_url (str): Database URL for creating the engine.\n\n        Returns:\n            Engine: SQLAlchemy engine instance.\n\n        Raises:\n            XMRigDatabaseError: If an error occurs while initializing the database.\n        \"\"\"\n        try:\n            if db_url not in cls._engines:\n                engine = create_engine(db_url)\n                Base.metadata.create_all(engine)\n                cls._engines[db_url] = engine\n            return cls._engines[db_url]\n        except Exception as e:\n            raise XMRigDatabaseError(e, traceback.format_exc(), f\"An error occurred initializing the database:\") from e\n\n    @classmethod\n    def _get_db_session(cls, db_url):\n        \"\"\"\n        Returns a new session for the specified database URL.\n\n        Args:\n            db_url (str): Database URL for creating the session.\n\n        Returns:\n            Session: SQLAlchemy session instance.\n\n        Raises:\n            XMRigDatabaseError: If the database engine does not exist.\n        \"\"\"\n        try:\n            engine = cls._engines[db_url]\n            Session = sessionmaker(bind=engine)\n            return Session()\n        except KeyError as e:\n            raise XMRigDatabaseError(e, traceback.format_exc(), f\"Database engine for '{db_url}' does not exist. Please initialize the database first.\") from e\n\n    @classmethod\n    def _insert_data_to_db(cls, json_data, miner, endpoint, db_url):\n        \"\"\"\n        Inserts JSON data into the specified database table.\n\n        Args:\n            json_data (dict | list): JSON data to insert.\n            miner (str): Name of the miner.\n            endpoint (str): Endpoint from which the data is retrieved.\n            db_url (str): Database URL for creating the engine.\n\n        Raises:\n            XMRigDatabaseError: If an error occurs while inserting data into the database.\n        \"\"\"\n        try:\n            session = cls._get_db_session(db_url)\n            cur_time = datetime.now()\n            if endpoint == \"summary\":\n                cls._insert_summary_data(session, json_data, miner, cur_time)\n            elif endpoint == \"config\":\n                cls._insert_config_data(session, json_data, miner, cur_time)\n            elif endpoint == \"backends\":\n                cls._insert_backends_data(session, json_data, miner, cur_time)\n            session.commit()\n        except Exception as e:\n            session.rollback()\n            raise XMRigDatabaseError(e, traceback.format_exc(), f\"An error occurred inserting data to the database:\") from e\n        finally:\n            session.close()\n\n    @classmethod\n    def _insert_summary_data(cls, session, json_data, miner, cur_time):\n        \"\"\"\n        Inserts summary data into the database.\n\n        This method extracts various pieces of information from the provided JSON data\n        and creates a Summary object which is then added to the database session.\n\n        Args:\n            session (Session): The database session to add the summary data to.\n            json_data (dict): The JSON data containing the summary information.\n            miner (str): The name of the miner.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        resources_data = json_data.get(\"resources\", {})\n        memory_data = resources_data.get(\"memory\", {})\n        results_data = json_data.get(\"results\", {})\n        connection_data = json_data.get(\"connection\", {})\n        cpu_data = json_data.get(\"cpu\", {})\n        hashrate_data = json_data.get(\"hashrate\", {})\n        summary = Summary(\n            miner_name=miner,\n            timestamp=cur_time,\n            full_json=json_data,\n            id=json_data.get(\"id\"),\n            worker_id=json_data.get(\"worker_id\"),\n            uptime=json_data.get(\"uptime\"),\n            restricted=json_data.get(\"restricted\"),\n            resources=resources_data,\n            resources_memory=memory_data,\n            resources_memory_free=memory_data.get(\"free\"),\n            resources_memory_total=memory_data.get(\"total\"),\n            resources_memory_rsm=memory_data.get(\"resident_set_memory\"),\n            resources_load_average=resources_data.get(\"load_average\"),\n            resources_hardware_concurrency=resources_data.get(\"hardware_concurrency\"),\n            features=json_data.get(\"features\"),\n            results=results_data,\n            results_diff_current=results_data.get(\"diff_current\"),\n            results_shares_good=results_data.get(\"shares_good\"),\n            results_shares_total=results_data.get(\"shares_total\"),\n            results_avg_time=results_data.get(\"avg_time\"),\n            results_avg_time_ms=results_data.get(\"avg_time_ms\"),\n            results_hashes_total=results_data.get(\"hashes_total\"),\n            results_best=results_data.get(\"best\"),\n            algo=json_data.get(\"algo\"),\n            connection=connection_data,\n            connection_ip=connection_data.get(\"ip\"),\n            connection_uptime=connection_data.get(\"uptime\"),\n            connection_uptime_ms=connection_data.get(\"uptime_ms\"),\n            connection_ping=connection_data.get(\"ping\"),\n            connection_failures=connection_data.get(\"failures\"),\n            connection_tls=connection_data.get(\"tls\"),\n            connection_tls_fingerprint=connection_data.get(\"tls-fingerprint\"),\n            connection_algo=connection_data.get(\"algo\"),\n            connection_diff=connection_data.get(\"diff\"),\n            connection_accepted=connection_data.get(\"accepted\"),\n            connection_rejected=connection_data.get(\"rejected\"),\n            connection_avg_time=connection_data.get(\"avg_time\"),\n            connection_avg_time_ms=connection_data.get(\"avg_time_ms\"),\n            connection_hashes_total=connection_data.get(\"hashes_total\"),\n            version=json_data.get(\"version\"),\n            kind=json_data.get(\"kind\"),\n            ua=json_data.get(\"ua\"),\n            cpu=cpu_data,\n            cpu_brand=cpu_data.get(\"brand\"),\n            cpu_family=cpu_data.get(\"family\"),\n            cpu_model=cpu_data.get(\"model\"),\n            cpu_stepping=cpu_data.get(\"stepping\"),\n            cpu_proc_info=cpu_data.get(\"proc_info\"),\n            cpu_aes=cpu_data.get(\"aes\"),\n            cpu_avx2=cpu_data.get(\"avx2\"),\n            cpu_x64=cpu_data.get(\"x64\"),\n            cpu_64_bit=cpu_data.get(\"64_bit\"),\n            cpu_l2=cpu_data.get(\"l2\"),\n            cpu_l3=cpu_data.get(\"l3\"),\n            cpu_cores=cpu_data.get(\"cores\"),\n            cpu_threads=cpu_data.get(\"threads\"),\n            cpu_packages=cpu_data.get(\"packages\"),\n            cpu_nodes=cpu_data.get(\"nodes\"),\n            cpu_backend=cpu_data.get(\"backend\"),\n            cpu_msr=cpu_data.get(\"msr\"),\n            cpu_assembly=cpu_data.get(\"assembly\"),\n            cpu_arch=cpu_data.get(\"arch\"),\n            cpu_flags=cpu_data.get(\"flags\"),\n            donate_level=json_data.get(\"donate_level\"),\n            paused=json_data.get(\"paused\"),\n            algorithms=json_data.get(\"algorithms\"),\n            hashrate=hashrate_data,\n            hashrate_total=hashrate_data.get(\"total\"),\n            hashrate_highest=hashrate_data.get(\"highest\"),\n            hugepages=json_data.get(\"hugepages\"),\n        )\n        session.add(summary)\n\n    @classmethod\n    def _insert_config_data(cls, session, json_data, miner, cur_time):\n        \"\"\"\n        Inserts configuration data into the database.\n\n        This method extracts various configuration parameters from the provided JSON data\n        and creates a Config object which is then added to the database session.\n\n        Args:\n            session (Session): The database session to add the Config object to.\n            json_data (dict): The JSON data containing configuration parameters.\n            miner (str): The name of the miner.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        api_data = json_data.get(\"api\", {})\n        http_data = json_data.get(\"http\", {})\n        randomx_data = json_data.get(\"randomx\", {})\n        cpu_data = json_data.get(\"cpu\", {})\n        opencl_data = json_data.get(\"opencl\", {})\n        cuda_data = json_data.get(\"cuda\", {})\n        tls_data = json_data.get(\"tls\", {})\n        dns_data = json_data.get(\"dns\", {})\n        benchmark_data = json_data.get(\"benchmark\", {})\n        config = Config(\n            miner_name=miner,\n            timestamp=cur_time,\n            full_json=json_data,\n            api=api_data,\n            api_id=api_data.get(\"id\"),\n            api_worker_id=api_data.get(\"worker-id\"),\n            http=http_data,\n            http_enabled=http_data.get(\"enabled\"),\n            http_host=http_data.get(\"host\"),\n            http_port=http_data.get(\"port\"),\n            http_access_token=http_data.get(\"access-token\"),\n            http_restricted=http_data.get(\"restricted\"),\n            autosave=json_data.get(\"autosave\"),\n            background=json_data.get(\"background\"),\n            colors=json_data.get(\"colors\"),\n            title=json_data.get(\"title\"),\n            randomx=randomx_data,\n            randomx_init=randomx_data.get(\"init\"),\n            randomx_init_avx2=randomx_data.get(\"init-avx2\"),\n            randomx_mode=randomx_data.get(\"mode\"),\n            randomx_1gb_pages=randomx_data.get(\"1gb-pages\"),\n            randomx_rdmsr=randomx_data.get(\"rdmsr\"),\n            randomx_wrmsr=randomx_data.get(\"wrmsr\"),\n            randomx_cache_qos=randomx_data.get(\"cache_qos\"),\n            randomx_numa=randomx_data.get(\"numa\"),\n            randomx_scratchpad_prefetch_mode=randomx_data.get(\"scratchpad_prefetch_mode\"),\n            cpu=cpu_data,\n            cpu_enabled=cpu_data.get(\"enabled\"),\n            cpu_huge_pages=cpu_data.get(\"huge-pages\"),\n            cpu_huge_pages_jit=cpu_data.get(\"huge-pages-jit\"),\n            cpu_hw_aes=cpu_data.get(\"hw-aes\"),\n            cpu_priority=cpu_data.get(\"priority\"),\n            cpu_memory_pool=cpu_data.get(\"memory-pool\"),\n            cpu_yield=cpu_data.get(\"yield\"),\n            cpu_max_threads_hint=cpu_data.get(\"max-threads-hint\"),\n            cpu_asm=cpu_data.get(\"asm\"),\n            cpu_argon2_impl=cpu_data.get(\"argon2-impl\"),\n            opencl=opencl_data,\n            opencl_enabled=opencl_data.get(\"enabled\"),\n            opencl_cache=opencl_data.get(\"cache\"),\n            opencl_loader=opencl_data.get(\"loader\"),\n            opencl_platform=opencl_data.get(\"platform\"),\n            opencl_adl=opencl_data.get(\"adl\"),\n            cuda=cuda_data,\n            cuda_enabled=cuda_data.get(\"enabled\"),\n            cuda_loader=cuda_data.get(\"loader\"),\n            cuda_nvml=cuda_data.get(\"nvml\"),\n            donate_level=json_data.get(\"donate-level\"),\n            donate_over_proxy=json_data.get(\"donate-over-proxy\"),\n            log_file=json_data.get(\"log-file\"),\n            pools=json_data.get(\"pools\"),\n            print_time=json_data.get(\"print-time\"),\n            health_print_time=json_data.get(\"health-print-time\"),\n            dmi=json_data.get(\"dmi\"),\n            retries=json_data.get(\"retries\"),\n            retry_pause=json_data.get(\"retry-pause\"),\n            syslog=json_data.get(\"syslog\"),\n            tls=tls_data,\n            tls_enabled=tls_data.get(\"enabled\"),\n            tls_protocols=tls_data.get(\"protocols\"),\n            tls_cert=tls_data.get(\"cert\"),\n            tls_cert_key=tls_data.get(\"cert_key\"),\n            tls_ciphers=tls_data.get(\"ciphers\"),\n            tls_ciphersuites=tls_data.get(\"ciphersuites\"),\n            tls_dhparam=tls_data.get(\"dhparam\"),\n            dns=dns_data,\n            dns_ipv6=dns_data.get(\"ipv6\"),\n            dns_ttl=dns_data.get(\"ttl\"),\n            user_agent=json_data.get(\"user-agent\"),\n            verbose=json_data.get(\"verbose\"),\n            watch=json_data.get(\"watch\"),\n            rebench_algo=json_data.get(\"rebench-algo\"),\n            bench_algo_time=json_data.get(\"bench-algo-time\"),\n            pause_on_battery=json_data.get(\"pause-on-battery\"),\n            pause_on_active=json_data.get(\"pause-on-active\"),\n            benchmark=benchmark_data,\n            benchmark_size=benchmark_data.get(\"size\"),\n            benchmark_algo=benchmark_data.get(\"algo\"),\n            benchmark_submit=benchmark_data.get(\"submit\"),\n            benchmark_verify=benchmark_data.get(\"verify\"),\n            benchmark_seed=benchmark_data.get(\"seed\"),\n            benchmark_hash=benchmark_data.get(\"hash-num\"),\n        )\n        session.add(config)\n\n    @classmethod\n    def _insert_backends_data(cls, session, json_data, miner, cur_time):\n        \"\"\"\n        Inserts backend data into the database.\n\n        This method processes JSON data representing backend information and inserts it into the database.\n        It handles both single backend (CPU) and multiple backends (CPU, OpenCL, CUDA).\n\n        Args:\n            session (Session): The database session to use for the insertion.\n            json_data (list): A list of dictionaries containing backend data.\n            miner (str): The name of the miner.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        if len(json_data) == 1:\n            cpu_backend_data = json_data[0]\n            backends = Backends(\n                miner_name=miner,\n                timestamp=cur_time,\n                full_json=json_data,\n                cpu=cpu_backend_data,\n                cpu_type=cpu_backend_data.get(\"type\"),\n                cpu_enabled=cpu_backend_data.get(\"enabled\"),\n                cpu_algo=cpu_backend_data.get(\"algo\"),\n                cpu_profile=cpu_backend_data.get(\"profile\"),\n                cpu_hw_aes=cpu_backend_data.get(\"hw-aes\"),\n                cpu_priority=cpu_backend_data.get(\"priority\"),\n                cpu_msr=cpu_backend_data.get(\"msr\"),\n                cpu_asm=cpu_backend_data.get(\"asm\"),\n                cpu_argon2_impl=cpu_backend_data.get(\"argon2-impl\"),\n                cpu_hugepages=cpu_backend_data.get(\"hugepages\"),\n                cpu_memory=cpu_backend_data.get(\"memory\"),\n                cpu_hashrate=cpu_backend_data.get(\"hashrate\"),\n                cpu_threads=cpu_backend_data.get(\"threads\"),\n            )\n        elif len(json_data) &gt; 1:\n            cpu_backend_data = json_data[0]\n            opencl_backend_data = json_data[1]\n            cuda_backend_data = json_data[2]\n            backends = Backends(\n                miner_name=miner,\n                timestamp=cur_time,\n                full_json=json_data,\n                cpu=cpu_backend_data,\n                cpu_type=cpu_backend_data.get(\"type\"),\n                cpu_enabled=cpu_backend_data.get(\"enabled\"),\n                cpu_algo=cpu_backend_data.get(\"algo\"),\n                cpu_profile=cpu_backend_data.get(\"profile\"),\n                cpu_hw_aes=cpu_backend_data.get(\"hw-aes\"),\n                cpu_priority=cpu_backend_data.get(\"priority\"),\n                cpu_msr=cpu_backend_data.get(\"msr\"),\n                cpu_asm=cpu_backend_data.get(\"asm\"),\n                cpu_argon2_impl=cpu_backend_data.get(\"argon2-impl\"),\n                cpu_hugepages=cpu_backend_data.get(\"hugepages\"),\n                cpu_memory=cpu_backend_data.get(\"memory\"),\n                cpu_hashrate=cpu_backend_data.get(\"hashrate\"),\n                cpu_threads=cpu_backend_data.get(\"threads\"),\n                opencl=opencl_backend_data,\n                opencl_type=opencl_backend_data.get(\"type\"),\n                opencl_enabled=opencl_backend_data.get(\"enabled\"),\n                opencl_algo=opencl_backend_data.get(\"algo\"),\n                opencl_profile=opencl_backend_data.get(\"profile\"),\n                opencl_platform=opencl_backend_data.get(\"platform\"),\n                opencl_platform_index=opencl_backend_data[\"platform\"].get(\"index\") if opencl_backend_data.get(\"platform\") else None,\n                opencl_platform_profile=opencl_backend_data[\"platform\"].get(\"profile\") if opencl_backend_data.get(\"platform\") else None,\n                opencl_platform_version=opencl_backend_data[\"platform\"].get(\"version\") if opencl_backend_data.get(\"platform\") else None,\n                opencl_platform_name=opencl_backend_data[\"platform\"].get(\"name\") if opencl_backend_data.get(\"platform\") else None,\n                opencl_platform_vendor=opencl_backend_data[\"platform\"].get(\"vendor\") if opencl_backend_data.get(\"platform\") else None,\n                opencl_platform_extensions=opencl_backend_data[\"platform\"].get(\"extensions\") if opencl_backend_data.get(\"platform\") else None,\n                opencl_hashrate=opencl_backend_data.get(\"hashrate\"),\n                opencl_threads=opencl_backend_data.get(\"threads\"),\n                cuda=cuda_backend_data,\n                cuda_type=cuda_backend_data.get(\"type\"),\n                cuda_enabled=cuda_backend_data.get(\"enabled\"),\n                cuda_algo=cuda_backend_data.get(\"algo\"),\n                cuda_profile=cuda_backend_data.get(\"profile\"),\n                cuda_versions=cuda_backend_data.get(\"versions\"),\n                cuda_versions_cuda_runtime=cuda_backend_data[\"versions\"].get(\"cuda_runtime\") if cuda_backend_data.get(\"versions\") else None,\n                cuda_versions_cuda_driver=cuda_backend_data[\"versions\"].get(\"cuda_driver\") if cuda_backend_data.get(\"versions\") else None,\n                cuda_versions_plugin=cuda_backend_data[\"versions\"].get(\"plugin\") if cuda_backend_data.get(\"versions\") else None,\n                cuda_hashrate=cuda_backend_data.get(\"hashrate\"),\n                cuda_threads=cuda_backend_data.get(\"threads\"),\n            )\n        session.add(backends)\n\n    @classmethod\n    def retrieve_data_from_db(cls, db_url, table_name, miner_name = None, selection = \"*\", start_time = None, end_time = None, limit = 1):\n        \"\"\"\n        Retrieves data from the specified database table within the given timeframe.\n\n        Args:\n            db_url (str): Database URL for creating the engine.\n            table_name (str): Name of the table to retrieve data from.\n            miner_name (str): Name of the miner to filter data by.\n            selection (str, optional): Column(s) to select from the table. Defaults to \"*\".\n            start_time (datetime, optional): Start time for the data retrieval. Defaults to None.\n            end_time (datetime, optional): End time for the data retrieval. Defaults to None.\n            limit (int, optional): Limit the number of rows retrieved. Defaults to 1.\n\n        Returns:\n            list: List of dictionaries containing the retrieved data or \"N/A\" if no data is found.\n\n        Raises:\n            XMRigDatabaseError: If an error occurs while retrieving data from the database.\n        \"\"\"\n        data = \"N/A\"\n        try:\n            session = cls._get_db_session(db_url)\n\n            model_class = cls._table_model_map.get(table_name)\n            if not model_class:\n                raise ValueError(f\"Table '{table_name}' does not have a corresponding ORM model class.\")\n\n            # Build the query\n            query = session.query(model_class)\n\n            # Apply selection\n            if selection != \"*\":\n                if isinstance(selection, list):\n                    query = query.with_entities(*[getattr(model_class, col) for col in selection])\n                else:\n                    query = query.with_entities(getattr(model_class, selection))\n\n            # Apply miner_name filter if provided\n            if miner_name:\n                query = query.filter(model_class.miner_name == miner_name)\n\n            # Apply time filters\n            if start_time:\n                query = query.filter(model_class.timestamp &gt;= start_time)\n            if end_time:\n                query = query.filter(model_class.timestamp &lt;= end_time)\n\n            # Apply limit\n            query = query.order_by(model_class.timestamp.desc()).limit(limit)\n\n            # Execute the query and fetch results\n            results = query.all()\n            if results:\n                data = [result._asdict() for result in results]\n            else:\n                data = \"N/A\"\n        except Exception as e:\n            raise XMRigDatabaseError(e, traceback.format_exc(), f\"An error occurred retrieving data from the database:\") from e\n        finally:\n            session.close()\n        return data\n\n    @classmethod\n    def _delete_all_miner_data_from_db(cls, miner_name, db_url):\n        \"\"\"\n        Deletes all data related to a specific miner from all tables in the database.\n\n        Args:\n            miner_name: The unique name of the miner.\n            db_url: Database URL for creating the engine.\n\n        Raises:\n            XMRigDatabaseError: If an error occurs while deleting the miner data from the database.\n        \"\"\"\n        try:\n            session = cls._get_db_session(db_url)\n\n            for table_name, model_class in cls._table_model_map.items():\n                session.query(model_class).filter(model_class.miner_name == miner_name).delete()\n\n            session.commit()\n            log.debug(f\"All data for miner '{miner_name}' has been deleted from the database\")\n        except Exception as e:\n            session.rollback()\n            raise XMRigDatabaseError(e, traceback.format_exc(), f\"An error occurred deleting miner '{miner_name}' data from the database:\") from e\n        finally:\n            session.close()\n</code></pre>"},{"location":"reference/classes/db/#xmrig.db.XMRigDatabase._delete_all_miner_data_from_db","title":"<code>_delete_all_miner_data_from_db(miner_name, db_url)</code>  <code>classmethod</code>","text":"<p>Deletes all data related to a specific miner from all tables in the database.</p> <p>Parameters:</p> Name Type Description Default <code>miner_name</code> <p>The unique name of the miner.</p> required <code>db_url</code> <p>Database URL for creating the engine.</p> required <p>Raises:</p> Type Description <code>XMRigDatabaseError</code> <p>If an error occurs while deleting the miner data from the database.</p> Source code in <code>xmrig/db.py</code> <pre><code>@classmethod\ndef _delete_all_miner_data_from_db(cls, miner_name, db_url):\n    \"\"\"\n    Deletes all data related to a specific miner from all tables in the database.\n\n    Args:\n        miner_name: The unique name of the miner.\n        db_url: Database URL for creating the engine.\n\n    Raises:\n        XMRigDatabaseError: If an error occurs while deleting the miner data from the database.\n    \"\"\"\n    try:\n        session = cls._get_db_session(db_url)\n\n        for table_name, model_class in cls._table_model_map.items():\n            session.query(model_class).filter(model_class.miner_name == miner_name).delete()\n\n        session.commit()\n        log.debug(f\"All data for miner '{miner_name}' has been deleted from the database\")\n    except Exception as e:\n        session.rollback()\n        raise XMRigDatabaseError(e, traceback.format_exc(), f\"An error occurred deleting miner '{miner_name}' data from the database:\") from e\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/classes/db/#xmrig.db.XMRigDatabase._get_db_session","title":"<code>_get_db_session(db_url)</code>  <code>classmethod</code>","text":"<p>Returns a new session for the specified database URL.</p> <p>Parameters:</p> Name Type Description Default <code>db_url</code> <code>str</code> <p>Database URL for creating the session.</p> required <p>Returns:</p> Name Type Description <code>Session</code> <p>SQLAlchemy session instance.</p> <p>Raises:</p> Type Description <code>XMRigDatabaseError</code> <p>If the database engine does not exist.</p> Source code in <code>xmrig/db.py</code> <pre><code>@classmethod\ndef _get_db_session(cls, db_url):\n    \"\"\"\n    Returns a new session for the specified database URL.\n\n    Args:\n        db_url (str): Database URL for creating the session.\n\n    Returns:\n        Session: SQLAlchemy session instance.\n\n    Raises:\n        XMRigDatabaseError: If the database engine does not exist.\n    \"\"\"\n    try:\n        engine = cls._engines[db_url]\n        Session = sessionmaker(bind=engine)\n        return Session()\n    except KeyError as e:\n        raise XMRigDatabaseError(e, traceback.format_exc(), f\"Database engine for '{db_url}' does not exist. Please initialize the database first.\") from e\n</code></pre>"},{"location":"reference/classes/db/#xmrig.db.XMRigDatabase._init_db","title":"<code>_init_db(db_url)</code>  <code>classmethod</code>","text":"<p>Initializes the database engine, if it already exists, it returns the existing engine.</p> <p>Parameters:</p> Name Type Description Default <code>db_url</code> <code>str</code> <p>Database URL for creating the engine.</p> required <p>Returns:</p> Name Type Description <code>Engine</code> <p>SQLAlchemy engine instance.</p> <p>Raises:</p> Type Description <code>XMRigDatabaseError</code> <p>If an error occurs while initializing the database.</p> Source code in <code>xmrig/db.py</code> <pre><code>@classmethod\ndef _init_db(cls, db_url):\n    \"\"\"\n    Initializes the database engine, if it already exists, it returns the existing engine.\n\n    Args:\n        db_url (str): Database URL for creating the engine.\n\n    Returns:\n        Engine: SQLAlchemy engine instance.\n\n    Raises:\n        XMRigDatabaseError: If an error occurs while initializing the database.\n    \"\"\"\n    try:\n        if db_url not in cls._engines:\n            engine = create_engine(db_url)\n            Base.metadata.create_all(engine)\n            cls._engines[db_url] = engine\n        return cls._engines[db_url]\n    except Exception as e:\n        raise XMRigDatabaseError(e, traceback.format_exc(), f\"An error occurred initializing the database:\") from e\n</code></pre>"},{"location":"reference/classes/db/#xmrig.db.XMRigDatabase._insert_backends_data","title":"<code>_insert_backends_data(session, json_data, miner, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts backend data into the database.</p> <p>This method processes JSON data representing backend information and inserts it into the database. It handles both single backend (CPU) and multiple backends (CPU, OpenCL, CUDA).</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to use for the insertion.</p> required <code>json_data</code> <code>list</code> <p>A list of dictionaries containing backend data.</p> required <code>miner</code> <code>str</code> <p>The name of the miner.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>xmrig/db.py</code> <pre><code>@classmethod\ndef _insert_backends_data(cls, session, json_data, miner, cur_time):\n    \"\"\"\n    Inserts backend data into the database.\n\n    This method processes JSON data representing backend information and inserts it into the database.\n    It handles both single backend (CPU) and multiple backends (CPU, OpenCL, CUDA).\n\n    Args:\n        session (Session): The database session to use for the insertion.\n        json_data (list): A list of dictionaries containing backend data.\n        miner (str): The name of the miner.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    if len(json_data) == 1:\n        cpu_backend_data = json_data[0]\n        backends = Backends(\n            miner_name=miner,\n            timestamp=cur_time,\n            full_json=json_data,\n            cpu=cpu_backend_data,\n            cpu_type=cpu_backend_data.get(\"type\"),\n            cpu_enabled=cpu_backend_data.get(\"enabled\"),\n            cpu_algo=cpu_backend_data.get(\"algo\"),\n            cpu_profile=cpu_backend_data.get(\"profile\"),\n            cpu_hw_aes=cpu_backend_data.get(\"hw-aes\"),\n            cpu_priority=cpu_backend_data.get(\"priority\"),\n            cpu_msr=cpu_backend_data.get(\"msr\"),\n            cpu_asm=cpu_backend_data.get(\"asm\"),\n            cpu_argon2_impl=cpu_backend_data.get(\"argon2-impl\"),\n            cpu_hugepages=cpu_backend_data.get(\"hugepages\"),\n            cpu_memory=cpu_backend_data.get(\"memory\"),\n            cpu_hashrate=cpu_backend_data.get(\"hashrate\"),\n            cpu_threads=cpu_backend_data.get(\"threads\"),\n        )\n    elif len(json_data) &gt; 1:\n        cpu_backend_data = json_data[0]\n        opencl_backend_data = json_data[1]\n        cuda_backend_data = json_data[2]\n        backends = Backends(\n            miner_name=miner,\n            timestamp=cur_time,\n            full_json=json_data,\n            cpu=cpu_backend_data,\n            cpu_type=cpu_backend_data.get(\"type\"),\n            cpu_enabled=cpu_backend_data.get(\"enabled\"),\n            cpu_algo=cpu_backend_data.get(\"algo\"),\n            cpu_profile=cpu_backend_data.get(\"profile\"),\n            cpu_hw_aes=cpu_backend_data.get(\"hw-aes\"),\n            cpu_priority=cpu_backend_data.get(\"priority\"),\n            cpu_msr=cpu_backend_data.get(\"msr\"),\n            cpu_asm=cpu_backend_data.get(\"asm\"),\n            cpu_argon2_impl=cpu_backend_data.get(\"argon2-impl\"),\n            cpu_hugepages=cpu_backend_data.get(\"hugepages\"),\n            cpu_memory=cpu_backend_data.get(\"memory\"),\n            cpu_hashrate=cpu_backend_data.get(\"hashrate\"),\n            cpu_threads=cpu_backend_data.get(\"threads\"),\n            opencl=opencl_backend_data,\n            opencl_type=opencl_backend_data.get(\"type\"),\n            opencl_enabled=opencl_backend_data.get(\"enabled\"),\n            opencl_algo=opencl_backend_data.get(\"algo\"),\n            opencl_profile=opencl_backend_data.get(\"profile\"),\n            opencl_platform=opencl_backend_data.get(\"platform\"),\n            opencl_platform_index=opencl_backend_data[\"platform\"].get(\"index\") if opencl_backend_data.get(\"platform\") else None,\n            opencl_platform_profile=opencl_backend_data[\"platform\"].get(\"profile\") if opencl_backend_data.get(\"platform\") else None,\n            opencl_platform_version=opencl_backend_data[\"platform\"].get(\"version\") if opencl_backend_data.get(\"platform\") else None,\n            opencl_platform_name=opencl_backend_data[\"platform\"].get(\"name\") if opencl_backend_data.get(\"platform\") else None,\n            opencl_platform_vendor=opencl_backend_data[\"platform\"].get(\"vendor\") if opencl_backend_data.get(\"platform\") else None,\n            opencl_platform_extensions=opencl_backend_data[\"platform\"].get(\"extensions\") if opencl_backend_data.get(\"platform\") else None,\n            opencl_hashrate=opencl_backend_data.get(\"hashrate\"),\n            opencl_threads=opencl_backend_data.get(\"threads\"),\n            cuda=cuda_backend_data,\n            cuda_type=cuda_backend_data.get(\"type\"),\n            cuda_enabled=cuda_backend_data.get(\"enabled\"),\n            cuda_algo=cuda_backend_data.get(\"algo\"),\n            cuda_profile=cuda_backend_data.get(\"profile\"),\n            cuda_versions=cuda_backend_data.get(\"versions\"),\n            cuda_versions_cuda_runtime=cuda_backend_data[\"versions\"].get(\"cuda_runtime\") if cuda_backend_data.get(\"versions\") else None,\n            cuda_versions_cuda_driver=cuda_backend_data[\"versions\"].get(\"cuda_driver\") if cuda_backend_data.get(\"versions\") else None,\n            cuda_versions_plugin=cuda_backend_data[\"versions\"].get(\"plugin\") if cuda_backend_data.get(\"versions\") else None,\n            cuda_hashrate=cuda_backend_data.get(\"hashrate\"),\n            cuda_threads=cuda_backend_data.get(\"threads\"),\n        )\n    session.add(backends)\n</code></pre>"},{"location":"reference/classes/db/#xmrig.db.XMRigDatabase._insert_config_data","title":"<code>_insert_config_data(session, json_data, miner, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts configuration data into the database.</p> <p>This method extracts various configuration parameters from the provided JSON data and creates a Config object which is then added to the database session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to add the Config object to.</p> required <code>json_data</code> <code>dict</code> <p>The JSON data containing configuration parameters.</p> required <code>miner</code> <code>str</code> <p>The name of the miner.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>xmrig/db.py</code> <pre><code>@classmethod\ndef _insert_config_data(cls, session, json_data, miner, cur_time):\n    \"\"\"\n    Inserts configuration data into the database.\n\n    This method extracts various configuration parameters from the provided JSON data\n    and creates a Config object which is then added to the database session.\n\n    Args:\n        session (Session): The database session to add the Config object to.\n        json_data (dict): The JSON data containing configuration parameters.\n        miner (str): The name of the miner.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    api_data = json_data.get(\"api\", {})\n    http_data = json_data.get(\"http\", {})\n    randomx_data = json_data.get(\"randomx\", {})\n    cpu_data = json_data.get(\"cpu\", {})\n    opencl_data = json_data.get(\"opencl\", {})\n    cuda_data = json_data.get(\"cuda\", {})\n    tls_data = json_data.get(\"tls\", {})\n    dns_data = json_data.get(\"dns\", {})\n    benchmark_data = json_data.get(\"benchmark\", {})\n    config = Config(\n        miner_name=miner,\n        timestamp=cur_time,\n        full_json=json_data,\n        api=api_data,\n        api_id=api_data.get(\"id\"),\n        api_worker_id=api_data.get(\"worker-id\"),\n        http=http_data,\n        http_enabled=http_data.get(\"enabled\"),\n        http_host=http_data.get(\"host\"),\n        http_port=http_data.get(\"port\"),\n        http_access_token=http_data.get(\"access-token\"),\n        http_restricted=http_data.get(\"restricted\"),\n        autosave=json_data.get(\"autosave\"),\n        background=json_data.get(\"background\"),\n        colors=json_data.get(\"colors\"),\n        title=json_data.get(\"title\"),\n        randomx=randomx_data,\n        randomx_init=randomx_data.get(\"init\"),\n        randomx_init_avx2=randomx_data.get(\"init-avx2\"),\n        randomx_mode=randomx_data.get(\"mode\"),\n        randomx_1gb_pages=randomx_data.get(\"1gb-pages\"),\n        randomx_rdmsr=randomx_data.get(\"rdmsr\"),\n        randomx_wrmsr=randomx_data.get(\"wrmsr\"),\n        randomx_cache_qos=randomx_data.get(\"cache_qos\"),\n        randomx_numa=randomx_data.get(\"numa\"),\n        randomx_scratchpad_prefetch_mode=randomx_data.get(\"scratchpad_prefetch_mode\"),\n        cpu=cpu_data,\n        cpu_enabled=cpu_data.get(\"enabled\"),\n        cpu_huge_pages=cpu_data.get(\"huge-pages\"),\n        cpu_huge_pages_jit=cpu_data.get(\"huge-pages-jit\"),\n        cpu_hw_aes=cpu_data.get(\"hw-aes\"),\n        cpu_priority=cpu_data.get(\"priority\"),\n        cpu_memory_pool=cpu_data.get(\"memory-pool\"),\n        cpu_yield=cpu_data.get(\"yield\"),\n        cpu_max_threads_hint=cpu_data.get(\"max-threads-hint\"),\n        cpu_asm=cpu_data.get(\"asm\"),\n        cpu_argon2_impl=cpu_data.get(\"argon2-impl\"),\n        opencl=opencl_data,\n        opencl_enabled=opencl_data.get(\"enabled\"),\n        opencl_cache=opencl_data.get(\"cache\"),\n        opencl_loader=opencl_data.get(\"loader\"),\n        opencl_platform=opencl_data.get(\"platform\"),\n        opencl_adl=opencl_data.get(\"adl\"),\n        cuda=cuda_data,\n        cuda_enabled=cuda_data.get(\"enabled\"),\n        cuda_loader=cuda_data.get(\"loader\"),\n        cuda_nvml=cuda_data.get(\"nvml\"),\n        donate_level=json_data.get(\"donate-level\"),\n        donate_over_proxy=json_data.get(\"donate-over-proxy\"),\n        log_file=json_data.get(\"log-file\"),\n        pools=json_data.get(\"pools\"),\n        print_time=json_data.get(\"print-time\"),\n        health_print_time=json_data.get(\"health-print-time\"),\n        dmi=json_data.get(\"dmi\"),\n        retries=json_data.get(\"retries\"),\n        retry_pause=json_data.get(\"retry-pause\"),\n        syslog=json_data.get(\"syslog\"),\n        tls=tls_data,\n        tls_enabled=tls_data.get(\"enabled\"),\n        tls_protocols=tls_data.get(\"protocols\"),\n        tls_cert=tls_data.get(\"cert\"),\n        tls_cert_key=tls_data.get(\"cert_key\"),\n        tls_ciphers=tls_data.get(\"ciphers\"),\n        tls_ciphersuites=tls_data.get(\"ciphersuites\"),\n        tls_dhparam=tls_data.get(\"dhparam\"),\n        dns=dns_data,\n        dns_ipv6=dns_data.get(\"ipv6\"),\n        dns_ttl=dns_data.get(\"ttl\"),\n        user_agent=json_data.get(\"user-agent\"),\n        verbose=json_data.get(\"verbose\"),\n        watch=json_data.get(\"watch\"),\n        rebench_algo=json_data.get(\"rebench-algo\"),\n        bench_algo_time=json_data.get(\"bench-algo-time\"),\n        pause_on_battery=json_data.get(\"pause-on-battery\"),\n        pause_on_active=json_data.get(\"pause-on-active\"),\n        benchmark=benchmark_data,\n        benchmark_size=benchmark_data.get(\"size\"),\n        benchmark_algo=benchmark_data.get(\"algo\"),\n        benchmark_submit=benchmark_data.get(\"submit\"),\n        benchmark_verify=benchmark_data.get(\"verify\"),\n        benchmark_seed=benchmark_data.get(\"seed\"),\n        benchmark_hash=benchmark_data.get(\"hash-num\"),\n    )\n    session.add(config)\n</code></pre>"},{"location":"reference/classes/db/#xmrig.db.XMRigDatabase._insert_data_to_db","title":"<code>_insert_data_to_db(json_data, miner, endpoint, db_url)</code>  <code>classmethod</code>","text":"<p>Inserts JSON data into the specified database table.</p> <p>Parameters:</p> Name Type Description Default <code>json_data</code> <code>dict | list</code> <p>JSON data to insert.</p> required <code>miner</code> <code>str</code> <p>Name of the miner.</p> required <code>endpoint</code> <code>str</code> <p>Endpoint from which the data is retrieved.</p> required <code>db_url</code> <code>str</code> <p>Database URL for creating the engine.</p> required <p>Raises:</p> Type Description <code>XMRigDatabaseError</code> <p>If an error occurs while inserting data into the database.</p> Source code in <code>xmrig/db.py</code> <pre><code>@classmethod\ndef _insert_data_to_db(cls, json_data, miner, endpoint, db_url):\n    \"\"\"\n    Inserts JSON data into the specified database table.\n\n    Args:\n        json_data (dict | list): JSON data to insert.\n        miner (str): Name of the miner.\n        endpoint (str): Endpoint from which the data is retrieved.\n        db_url (str): Database URL for creating the engine.\n\n    Raises:\n        XMRigDatabaseError: If an error occurs while inserting data into the database.\n    \"\"\"\n    try:\n        session = cls._get_db_session(db_url)\n        cur_time = datetime.now()\n        if endpoint == \"summary\":\n            cls._insert_summary_data(session, json_data, miner, cur_time)\n        elif endpoint == \"config\":\n            cls._insert_config_data(session, json_data, miner, cur_time)\n        elif endpoint == \"backends\":\n            cls._insert_backends_data(session, json_data, miner, cur_time)\n        session.commit()\n    except Exception as e:\n        session.rollback()\n        raise XMRigDatabaseError(e, traceback.format_exc(), f\"An error occurred inserting data to the database:\") from e\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/classes/db/#xmrig.db.XMRigDatabase._insert_summary_data","title":"<code>_insert_summary_data(session, json_data, miner, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts summary data into the database.</p> <p>This method extracts various pieces of information from the provided JSON data and creates a Summary object which is then added to the database session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to add the summary data to.</p> required <code>json_data</code> <code>dict</code> <p>The JSON data containing the summary information.</p> required <code>miner</code> <code>str</code> <p>The name of the miner.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>xmrig/db.py</code> <pre><code>@classmethod\ndef _insert_summary_data(cls, session, json_data, miner, cur_time):\n    \"\"\"\n    Inserts summary data into the database.\n\n    This method extracts various pieces of information from the provided JSON data\n    and creates a Summary object which is then added to the database session.\n\n    Args:\n        session (Session): The database session to add the summary data to.\n        json_data (dict): The JSON data containing the summary information.\n        miner (str): The name of the miner.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    resources_data = json_data.get(\"resources\", {})\n    memory_data = resources_data.get(\"memory\", {})\n    results_data = json_data.get(\"results\", {})\n    connection_data = json_data.get(\"connection\", {})\n    cpu_data = json_data.get(\"cpu\", {})\n    hashrate_data = json_data.get(\"hashrate\", {})\n    summary = Summary(\n        miner_name=miner,\n        timestamp=cur_time,\n        full_json=json_data,\n        id=json_data.get(\"id\"),\n        worker_id=json_data.get(\"worker_id\"),\n        uptime=json_data.get(\"uptime\"),\n        restricted=json_data.get(\"restricted\"),\n        resources=resources_data,\n        resources_memory=memory_data,\n        resources_memory_free=memory_data.get(\"free\"),\n        resources_memory_total=memory_data.get(\"total\"),\n        resources_memory_rsm=memory_data.get(\"resident_set_memory\"),\n        resources_load_average=resources_data.get(\"load_average\"),\n        resources_hardware_concurrency=resources_data.get(\"hardware_concurrency\"),\n        features=json_data.get(\"features\"),\n        results=results_data,\n        results_diff_current=results_data.get(\"diff_current\"),\n        results_shares_good=results_data.get(\"shares_good\"),\n        results_shares_total=results_data.get(\"shares_total\"),\n        results_avg_time=results_data.get(\"avg_time\"),\n        results_avg_time_ms=results_data.get(\"avg_time_ms\"),\n        results_hashes_total=results_data.get(\"hashes_total\"),\n        results_best=results_data.get(\"best\"),\n        algo=json_data.get(\"algo\"),\n        connection=connection_data,\n        connection_ip=connection_data.get(\"ip\"),\n        connection_uptime=connection_data.get(\"uptime\"),\n        connection_uptime_ms=connection_data.get(\"uptime_ms\"),\n        connection_ping=connection_data.get(\"ping\"),\n        connection_failures=connection_data.get(\"failures\"),\n        connection_tls=connection_data.get(\"tls\"),\n        connection_tls_fingerprint=connection_data.get(\"tls-fingerprint\"),\n        connection_algo=connection_data.get(\"algo\"),\n        connection_diff=connection_data.get(\"diff\"),\n        connection_accepted=connection_data.get(\"accepted\"),\n        connection_rejected=connection_data.get(\"rejected\"),\n        connection_avg_time=connection_data.get(\"avg_time\"),\n        connection_avg_time_ms=connection_data.get(\"avg_time_ms\"),\n        connection_hashes_total=connection_data.get(\"hashes_total\"),\n        version=json_data.get(\"version\"),\n        kind=json_data.get(\"kind\"),\n        ua=json_data.get(\"ua\"),\n        cpu=cpu_data,\n        cpu_brand=cpu_data.get(\"brand\"),\n        cpu_family=cpu_data.get(\"family\"),\n        cpu_model=cpu_data.get(\"model\"),\n        cpu_stepping=cpu_data.get(\"stepping\"),\n        cpu_proc_info=cpu_data.get(\"proc_info\"),\n        cpu_aes=cpu_data.get(\"aes\"),\n        cpu_avx2=cpu_data.get(\"avx2\"),\n        cpu_x64=cpu_data.get(\"x64\"),\n        cpu_64_bit=cpu_data.get(\"64_bit\"),\n        cpu_l2=cpu_data.get(\"l2\"),\n        cpu_l3=cpu_data.get(\"l3\"),\n        cpu_cores=cpu_data.get(\"cores\"),\n        cpu_threads=cpu_data.get(\"threads\"),\n        cpu_packages=cpu_data.get(\"packages\"),\n        cpu_nodes=cpu_data.get(\"nodes\"),\n        cpu_backend=cpu_data.get(\"backend\"),\n        cpu_msr=cpu_data.get(\"msr\"),\n        cpu_assembly=cpu_data.get(\"assembly\"),\n        cpu_arch=cpu_data.get(\"arch\"),\n        cpu_flags=cpu_data.get(\"flags\"),\n        donate_level=json_data.get(\"donate_level\"),\n        paused=json_data.get(\"paused\"),\n        algorithms=json_data.get(\"algorithms\"),\n        hashrate=hashrate_data,\n        hashrate_total=hashrate_data.get(\"total\"),\n        hashrate_highest=hashrate_data.get(\"highest\"),\n        hugepages=json_data.get(\"hugepages\"),\n    )\n    session.add(summary)\n</code></pre>"},{"location":"reference/classes/db/#xmrig.db.XMRigDatabase.retrieve_data_from_db","title":"<code>retrieve_data_from_db(db_url, table_name, miner_name=None, selection='*', start_time=None, end_time=None, limit=1)</code>  <code>classmethod</code>","text":"<p>Retrieves data from the specified database table within the given timeframe.</p> <p>Parameters:</p> Name Type Description Default <code>db_url</code> <code>str</code> <p>Database URL for creating the engine.</p> required <code>table_name</code> <code>str</code> <p>Name of the table to retrieve data from.</p> required <code>miner_name</code> <code>str</code> <p>Name of the miner to filter data by.</p> <code>None</code> <code>selection</code> <code>str</code> <p>Column(s) to select from the table. Defaults to \"*\".</p> <code>'*'</code> <code>start_time</code> <code>datetime</code> <p>Start time for the data retrieval. Defaults to None.</p> <code>None</code> <code>end_time</code> <code>datetime</code> <p>End time for the data retrieval. Defaults to None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>Limit the number of rows retrieved. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>list</code> <p>List of dictionaries containing the retrieved data or \"N/A\" if no data is found.</p> <p>Raises:</p> Type Description <code>XMRigDatabaseError</code> <p>If an error occurs while retrieving data from the database.</p> Source code in <code>xmrig/db.py</code> <pre><code>@classmethod\ndef retrieve_data_from_db(cls, db_url, table_name, miner_name = None, selection = \"*\", start_time = None, end_time = None, limit = 1):\n    \"\"\"\n    Retrieves data from the specified database table within the given timeframe.\n\n    Args:\n        db_url (str): Database URL for creating the engine.\n        table_name (str): Name of the table to retrieve data from.\n        miner_name (str): Name of the miner to filter data by.\n        selection (str, optional): Column(s) to select from the table. Defaults to \"*\".\n        start_time (datetime, optional): Start time for the data retrieval. Defaults to None.\n        end_time (datetime, optional): End time for the data retrieval. Defaults to None.\n        limit (int, optional): Limit the number of rows retrieved. Defaults to 1.\n\n    Returns:\n        list: List of dictionaries containing the retrieved data or \"N/A\" if no data is found.\n\n    Raises:\n        XMRigDatabaseError: If an error occurs while retrieving data from the database.\n    \"\"\"\n    data = \"N/A\"\n    try:\n        session = cls._get_db_session(db_url)\n\n        model_class = cls._table_model_map.get(table_name)\n        if not model_class:\n            raise ValueError(f\"Table '{table_name}' does not have a corresponding ORM model class.\")\n\n        # Build the query\n        query = session.query(model_class)\n\n        # Apply selection\n        if selection != \"*\":\n            if isinstance(selection, list):\n                query = query.with_entities(*[getattr(model_class, col) for col in selection])\n            else:\n                query = query.with_entities(getattr(model_class, selection))\n\n        # Apply miner_name filter if provided\n        if miner_name:\n            query = query.filter(model_class.miner_name == miner_name)\n\n        # Apply time filters\n        if start_time:\n            query = query.filter(model_class.timestamp &gt;= start_time)\n        if end_time:\n            query = query.filter(model_class.timestamp &lt;= end_time)\n\n        # Apply limit\n        query = query.order_by(model_class.timestamp.desc()).limit(limit)\n\n        # Execute the query and fetch results\n        results = query.all()\n        if results:\n            data = [result._asdict() for result in results]\n        else:\n            data = \"N/A\"\n    except Exception as e:\n        raise XMRigDatabaseError(e, traceback.format_exc(), f\"An error occurred retrieving data from the database:\") from e\n    finally:\n        session.close()\n    return data\n</code></pre>"},{"location":"reference/classes/manager/","title":"XMRigManager","text":"<p>A class to manage multiple XMRig miners via their APIs.</p> <p>Attributes:</p> Name Type Description <code>_miners</code> <code>dict</code> <p>A dictionary to store miner API instances.</p> <code>_api_factory</code> <code>XMRigAPI</code> <p>Factory for creating XMRigAPI instances.</p> <code>_db_url</code> <code>str</code> <p>Database URL for storing miner data.</p> Source code in <code>xmrig/manager.py</code> <pre><code>class XMRigManager:\n    \"\"\"\n    A class to manage multiple XMRig miners via their APIs.\n\n    Attributes:\n        _miners (dict): A dictionary to store miner API instances.\n        _api_factory (XMRigAPI): Factory for creating XMRigAPI instances.\n        _db_url (str): Database URL for storing miner data.\n    \"\"\"\n\n    def __init__(self, api_factory=XMRigAPI, db_url = \"sqlite:///xmrig-api.db\"):\n        \"\"\"\n        Initializes the manager with an empty collection of miners.\n\n        Args:\n            api_factory (XMRigAPI): Factory for creating XMRigAPI instances.\n            db_url (str): Database URL for storing miner data.\n        \"\"\"\n        self._miners = {}\n        self._api_factory = api_factory\n        self._db_url = db_url\n        if self._db_url is not None:\n            XMRigDatabase._init_db(self._db_url)\n\n    def add_miner(self, miner_name, ip, port, access_token = None, tls_enabled = False):\n        \"\"\"\n        Adds a new miner to the manager.\n\n        Args:\n            miner_name (str): A unique name for the miner.\n            ip (str): IP address or domain of the XMRig API.\n            port (int): Port of the XMRig API.\n            access_token (str, optional): Access token for authorization. Defaults to None.\n            tls_enabled (bool, optional): TLS status of the miner/API. Defaults to False.\n\n        Raises:\n            XMRigManagerError: If an error occurs while adding the miner.\n        \"\"\"\n        try:\n            if miner_name in self._miners:\n                raise ValueError(f\"Miner with name '{miner_name}' already exists.\")\n            # Use the injected factory to create the API instance\n            self._miners[miner_name] = self._api_factory(miner_name, ip, port, access_token, tls_enabled, self._db_url)\n            log.info(f\"Miner called '{miner_name}' added to manager.\")\n        except Exception as e:\n            raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred adding miner '{miner_name}':\") from e\n\n    def remove_miner(self, miner_name):\n        \"\"\"\n        Removes a miner from the manager.\n\n        Args:\n            miner_name (str): The unique name of the miner to remove.\n\n        Raises:\n            XMRigManagerError: If an error occurs while removing the miner.\n        \"\"\"\n        try:\n            if miner_name not in self._miners:\n                raise ValueError(f\"Miner with name '{miner_name}' does not exist.\")\n            if self._db_url is not None:\n                XMRigDatabase._delete_all_miner_data_from_db(miner_name, self._db_url)\n            del self._miners[miner_name]\n            log.info(f\"Miner '{miner_name}' removed from manager.\")\n        except Exception as e:\n            raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred removing miner '{miner_name}':\") from e\n\n    def get_miner(self, miner_name):\n        \"\"\"\n        Retrieves a specific miner's API instance.\n\n        Args:\n            miner_name (str): The unique name of the miner.\n\n        Returns:\n            XMRigAPI: The API instance for the requested miner.\n\n        Raises:\n            XMRigManagerError: If an error occurs while retrieving the miner.\n        \"\"\"\n        try:\n            if miner_name not in self._miners:\n                raise ValueError(f\"Miner with name '{miner_name}' does not exist.\")\n            return self._miners[miner_name]\n        except Exception as e:\n            raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred retrieving miner '{miner_name}':\") from e\n\n    def edit_miner(self, miner_name, new_details):\n        \"\"\"\n        Edits the details of a miner. The following details can be edited:\n\n        - miner_name (str): A unique name for the miner.\n        - ip (str): IP address or domain of the XMRig API.\n        - port (int): Port of the XMRig API.\n        - access_token (str): Access token for authorization.\n        - tls_enabled (bool): TLS status of the miner/API.\n\n        The dictionary can be in any order and can contain any number of the above keys. For example:\n\n        full_details = {\n            'miner_name': 'new_name',\n            'ip': 'new_ip_or_domain_with_tld',\n            'port': '1234',\n            'access_token': 'new-token',\n            'tls_enabled': True\n        }\n\n        partial_details = {\n            'miner_name': 'new_name',\n            'port': '1234'\n        }\n\n        Args:\n            miner_name (str): The unique name of the miner.\n            new_details (dict): The new details for the miner.\n\n        Raises:\n            XMRigManagerError: If an error occurs while editing the miner.\n        \"\"\"\n        try:\n            new_name = \"\"\n            miner_api = self.get_miner(miner_name)\n            for key, value in new_details.items():\n                if key == \"miner_name\":\n                    if value in self._miners:\n                        raise ValueError(f\"Miner with name '{value}' already exists.\")\n                    new_name = value\n                    miner_api._miner_name = new_name\n                    # Remove old entry and replace with new entry\n                    del self._miners[miner_name]\n                    self._miners[value] = miner_api\n                elif key == \"ip\":\n                    miner_api._ip = value\n                elif key == \"port\":\n                    miner_api._port = value\n                elif key == \"access_token\":\n                    miner_api.set_auth_header(value)\n                elif key == \"tls_enabled\":\n                    miner_api._tls_enabled = value\n            # Get the miner API instance with the new name to edit further and then return\n            miner_api = self.get_miner(new_name)\n            # Check if keys \"ip\", \"port\" or \"tls_enabled\" are in the new_details dictionary to construct the new base URL\n            if \"ip\" in new_details or \"port\" in new_details or \"tls_enabled\" in new_details:\n                miner_api._base_url = f\"http://{miner_api._ip}:{miner_api._port}\"\n                if miner_api._tls_enabled:\n                    self._base_url = f\"https://{miner_api._ip}:{miner_api._port}\"\n            log.info(f\"Miner called '{miner_name}' successfully edited.\" if new_name == \"\" else f\"Miner called '{miner_name}' successfully edited to '{new_name}'.\")\n            return miner_api\n        except Exception as e:\n            raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred editing miner '{miner_name}':\") from e\n\n    def perform_action_on_all(self, action):\n        \"\"\"\n        Performs the specified action on all miners.\n\n        Args:\n            action (str): The action to perform ('pause', 'resume', 'stop', 'start').\n\n        Raises:\n            XMRigManagerError: If an error occurs while performing the action on all miners.\n        \"\"\"\n        try:\n            for miner_name, miner_api in self._miners.items():\n                success = miner_api.perform_action(action)\n                if success:\n                    log.info(f\"Action '{action}' successfully performed on '{miner_name}'.\")\n                else:\n                    log.warning(f\"Action '{action}' failed on '{miner_name}'.\")\n        except Exception as e:\n            raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred performing action '{action}' on all miners:\") from e\n\n    def update_miners(self, endpoint=None):\n        \"\"\"\n        Updates all miners' cached data or calls a specific endpoint on all miners.\n\n        Args:\n            endpoint (str, optional): The endpoint to call on each miner. If None, updates all cached data. Defaults to None.\n\n        Returns:\n            bool: True if successful, or False if an error occurred.\n\n        Raises:\n            XMRigManagerError: If an error occurs while updating the miners or calling the endpoint.\n        \"\"\"\n        try:\n            for miner_name, miner_api in self._miners.items():\n                if endpoint:\n                    response = miner_api.get_endpoint(endpoint)\n                    if response:\n                        log.info(f\"{endpoint.capitalize()} endpoint successfully called on '{miner_name}'.\")\n                    else:\n                        log.warning(f\"Failed to call '{endpoint}' endpoint on '{miner_name}'.\")\n                else:\n                    success = miner_api.get_all_responses()\n                    if success:\n                        log.info(f\"Miner called '{miner_name}' successfully updated.\")\n                    else:\n                        log.warning(f\"Failed to update miner '{miner_name}'.\")\n            return True\n        except Exception as e:\n            raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred updating miners or calling endpoint '{endpoint}' on all miners:\") from e\n\n    def list_miners(self):\n        \"\"\"\n        Lists all managed miners.\n\n        Returns:\n            list: A list of miner names.\n        \"\"\"\n        return list(self._miners.keys())\n</code></pre>"},{"location":"reference/classes/manager/#xmrig.manager.XMRigManager.__init__","title":"<code>__init__(api_factory=XMRigAPI, db_url='sqlite:///xmrig-api.db')</code>","text":"<p>Initializes the manager with an empty collection of miners.</p> <p>Parameters:</p> Name Type Description Default <code>api_factory</code> <code>XMRigAPI</code> <p>Factory for creating XMRigAPI instances.</p> <code>XMRigAPI</code> <code>db_url</code> <code>str</code> <p>Database URL for storing miner data.</p> <code>'sqlite:///xmrig-api.db'</code> Source code in <code>xmrig/manager.py</code> <pre><code>def __init__(self, api_factory=XMRigAPI, db_url = \"sqlite:///xmrig-api.db\"):\n    \"\"\"\n    Initializes the manager with an empty collection of miners.\n\n    Args:\n        api_factory (XMRigAPI): Factory for creating XMRigAPI instances.\n        db_url (str): Database URL for storing miner data.\n    \"\"\"\n    self._miners = {}\n    self._api_factory = api_factory\n    self._db_url = db_url\n    if self._db_url is not None:\n        XMRigDatabase._init_db(self._db_url)\n</code></pre>"},{"location":"reference/classes/manager/#xmrig.manager.XMRigManager.add_miner","title":"<code>add_miner(miner_name, ip, port, access_token=None, tls_enabled=False)</code>","text":"<p>Adds a new miner to the manager.</p> <p>Parameters:</p> Name Type Description Default <code>miner_name</code> <code>str</code> <p>A unique name for the miner.</p> required <code>ip</code> <code>str</code> <p>IP address or domain of the XMRig API.</p> required <code>port</code> <code>int</code> <p>Port of the XMRig API.</p> required <code>access_token</code> <code>str</code> <p>Access token for authorization. Defaults to None.</p> <code>None</code> <code>tls_enabled</code> <code>bool</code> <p>TLS status of the miner/API. Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>XMRigManagerError</code> <p>If an error occurs while adding the miner.</p> Source code in <code>xmrig/manager.py</code> <pre><code>def add_miner(self, miner_name, ip, port, access_token = None, tls_enabled = False):\n    \"\"\"\n    Adds a new miner to the manager.\n\n    Args:\n        miner_name (str): A unique name for the miner.\n        ip (str): IP address or domain of the XMRig API.\n        port (int): Port of the XMRig API.\n        access_token (str, optional): Access token for authorization. Defaults to None.\n        tls_enabled (bool, optional): TLS status of the miner/API. Defaults to False.\n\n    Raises:\n        XMRigManagerError: If an error occurs while adding the miner.\n    \"\"\"\n    try:\n        if miner_name in self._miners:\n            raise ValueError(f\"Miner with name '{miner_name}' already exists.\")\n        # Use the injected factory to create the API instance\n        self._miners[miner_name] = self._api_factory(miner_name, ip, port, access_token, tls_enabled, self._db_url)\n        log.info(f\"Miner called '{miner_name}' added to manager.\")\n    except Exception as e:\n        raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred adding miner '{miner_name}':\") from e\n</code></pre>"},{"location":"reference/classes/manager/#xmrig.manager.XMRigManager.edit_miner","title":"<code>edit_miner(miner_name, new_details)</code>","text":"<p>Edits the details of a miner. The following details can be edited:</p> <ul> <li>miner_name (str): A unique name for the miner.</li> <li>ip (str): IP address or domain of the XMRig API.</li> <li>port (int): Port of the XMRig API.</li> <li>access_token (str): Access token for authorization.</li> <li>tls_enabled (bool): TLS status of the miner/API.</li> </ul> <p>The dictionary can be in any order and can contain any number of the above keys. For example:</p> <p>full_details = {     'miner_name': 'new_name',     'ip': 'new_ip_or_domain_with_tld',     'port': '1234',     'access_token': 'new-token',     'tls_enabled': True }</p> <p>partial_details = {     'miner_name': 'new_name',     'port': '1234' }</p> <p>Parameters:</p> Name Type Description Default <code>miner_name</code> <code>str</code> <p>The unique name of the miner.</p> required <code>new_details</code> <code>dict</code> <p>The new details for the miner.</p> required <p>Raises:</p> Type Description <code>XMRigManagerError</code> <p>If an error occurs while editing the miner.</p> Source code in <code>xmrig/manager.py</code> <pre><code>def edit_miner(self, miner_name, new_details):\n    \"\"\"\n    Edits the details of a miner. The following details can be edited:\n\n    - miner_name (str): A unique name for the miner.\n    - ip (str): IP address or domain of the XMRig API.\n    - port (int): Port of the XMRig API.\n    - access_token (str): Access token for authorization.\n    - tls_enabled (bool): TLS status of the miner/API.\n\n    The dictionary can be in any order and can contain any number of the above keys. For example:\n\n    full_details = {\n        'miner_name': 'new_name',\n        'ip': 'new_ip_or_domain_with_tld',\n        'port': '1234',\n        'access_token': 'new-token',\n        'tls_enabled': True\n    }\n\n    partial_details = {\n        'miner_name': 'new_name',\n        'port': '1234'\n    }\n\n    Args:\n        miner_name (str): The unique name of the miner.\n        new_details (dict): The new details for the miner.\n\n    Raises:\n        XMRigManagerError: If an error occurs while editing the miner.\n    \"\"\"\n    try:\n        new_name = \"\"\n        miner_api = self.get_miner(miner_name)\n        for key, value in new_details.items():\n            if key == \"miner_name\":\n                if value in self._miners:\n                    raise ValueError(f\"Miner with name '{value}' already exists.\")\n                new_name = value\n                miner_api._miner_name = new_name\n                # Remove old entry and replace with new entry\n                del self._miners[miner_name]\n                self._miners[value] = miner_api\n            elif key == \"ip\":\n                miner_api._ip = value\n            elif key == \"port\":\n                miner_api._port = value\n            elif key == \"access_token\":\n                miner_api.set_auth_header(value)\n            elif key == \"tls_enabled\":\n                miner_api._tls_enabled = value\n        # Get the miner API instance with the new name to edit further and then return\n        miner_api = self.get_miner(new_name)\n        # Check if keys \"ip\", \"port\" or \"tls_enabled\" are in the new_details dictionary to construct the new base URL\n        if \"ip\" in new_details or \"port\" in new_details or \"tls_enabled\" in new_details:\n            miner_api._base_url = f\"http://{miner_api._ip}:{miner_api._port}\"\n            if miner_api._tls_enabled:\n                self._base_url = f\"https://{miner_api._ip}:{miner_api._port}\"\n        log.info(f\"Miner called '{miner_name}' successfully edited.\" if new_name == \"\" else f\"Miner called '{miner_name}' successfully edited to '{new_name}'.\")\n        return miner_api\n    except Exception as e:\n        raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred editing miner '{miner_name}':\") from e\n</code></pre>"},{"location":"reference/classes/manager/#xmrig.manager.XMRigManager.get_miner","title":"<code>get_miner(miner_name)</code>","text":"<p>Retrieves a specific miner's API instance.</p> <p>Parameters:</p> Name Type Description Default <code>miner_name</code> <code>str</code> <p>The unique name of the miner.</p> required <p>Returns:</p> Name Type Description <code>XMRigAPI</code> <p>The API instance for the requested miner.</p> <p>Raises:</p> Type Description <code>XMRigManagerError</code> <p>If an error occurs while retrieving the miner.</p> Source code in <code>xmrig/manager.py</code> <pre><code>def get_miner(self, miner_name):\n    \"\"\"\n    Retrieves a specific miner's API instance.\n\n    Args:\n        miner_name (str): The unique name of the miner.\n\n    Returns:\n        XMRigAPI: The API instance for the requested miner.\n\n    Raises:\n        XMRigManagerError: If an error occurs while retrieving the miner.\n    \"\"\"\n    try:\n        if miner_name not in self._miners:\n            raise ValueError(f\"Miner with name '{miner_name}' does not exist.\")\n        return self._miners[miner_name]\n    except Exception as e:\n        raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred retrieving miner '{miner_name}':\") from e\n</code></pre>"},{"location":"reference/classes/manager/#xmrig.manager.XMRigManager.list_miners","title":"<code>list_miners()</code>","text":"<p>Lists all managed miners.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of miner names.</p> Source code in <code>xmrig/manager.py</code> <pre><code>def list_miners(self):\n    \"\"\"\n    Lists all managed miners.\n\n    Returns:\n        list: A list of miner names.\n    \"\"\"\n    return list(self._miners.keys())\n</code></pre>"},{"location":"reference/classes/manager/#xmrig.manager.XMRigManager.perform_action_on_all","title":"<code>perform_action_on_all(action)</code>","text":"<p>Performs the specified action on all miners.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>The action to perform ('pause', 'resume', 'stop', 'start').</p> required <p>Raises:</p> Type Description <code>XMRigManagerError</code> <p>If an error occurs while performing the action on all miners.</p> Source code in <code>xmrig/manager.py</code> <pre><code>def perform_action_on_all(self, action):\n    \"\"\"\n    Performs the specified action on all miners.\n\n    Args:\n        action (str): The action to perform ('pause', 'resume', 'stop', 'start').\n\n    Raises:\n        XMRigManagerError: If an error occurs while performing the action on all miners.\n    \"\"\"\n    try:\n        for miner_name, miner_api in self._miners.items():\n            success = miner_api.perform_action(action)\n            if success:\n                log.info(f\"Action '{action}' successfully performed on '{miner_name}'.\")\n            else:\n                log.warning(f\"Action '{action}' failed on '{miner_name}'.\")\n    except Exception as e:\n        raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred performing action '{action}' on all miners:\") from e\n</code></pre>"},{"location":"reference/classes/manager/#xmrig.manager.XMRigManager.remove_miner","title":"<code>remove_miner(miner_name)</code>","text":"<p>Removes a miner from the manager.</p> <p>Parameters:</p> Name Type Description Default <code>miner_name</code> <code>str</code> <p>The unique name of the miner to remove.</p> required <p>Raises:</p> Type Description <code>XMRigManagerError</code> <p>If an error occurs while removing the miner.</p> Source code in <code>xmrig/manager.py</code> <pre><code>def remove_miner(self, miner_name):\n    \"\"\"\n    Removes a miner from the manager.\n\n    Args:\n        miner_name (str): The unique name of the miner to remove.\n\n    Raises:\n        XMRigManagerError: If an error occurs while removing the miner.\n    \"\"\"\n    try:\n        if miner_name not in self._miners:\n            raise ValueError(f\"Miner with name '{miner_name}' does not exist.\")\n        if self._db_url is not None:\n            XMRigDatabase._delete_all_miner_data_from_db(miner_name, self._db_url)\n        del self._miners[miner_name]\n        log.info(f\"Miner '{miner_name}' removed from manager.\")\n    except Exception as e:\n        raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred removing miner '{miner_name}':\") from e\n</code></pre>"},{"location":"reference/classes/manager/#xmrig.manager.XMRigManager.update_miners","title":"<code>update_miners(endpoint=None)</code>","text":"<p>Updates all miners' cached data or calls a specific endpoint on all miners.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint to call on each miner. If None, updates all cached data. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if successful, or False if an error occurred.</p> <p>Raises:</p> Type Description <code>XMRigManagerError</code> <p>If an error occurs while updating the miners or calling the endpoint.</p> Source code in <code>xmrig/manager.py</code> <pre><code>def update_miners(self, endpoint=None):\n    \"\"\"\n    Updates all miners' cached data or calls a specific endpoint on all miners.\n\n    Args:\n        endpoint (str, optional): The endpoint to call on each miner. If None, updates all cached data. Defaults to None.\n\n    Returns:\n        bool: True if successful, or False if an error occurred.\n\n    Raises:\n        XMRigManagerError: If an error occurs while updating the miners or calling the endpoint.\n    \"\"\"\n    try:\n        for miner_name, miner_api in self._miners.items():\n            if endpoint:\n                response = miner_api.get_endpoint(endpoint)\n                if response:\n                    log.info(f\"{endpoint.capitalize()} endpoint successfully called on '{miner_name}'.\")\n                else:\n                    log.warning(f\"Failed to call '{endpoint}' endpoint on '{miner_name}'.\")\n            else:\n                success = miner_api.get_all_responses()\n                if success:\n                    log.info(f\"Miner called '{miner_name}' successfully updated.\")\n                else:\n                    log.warning(f\"Failed to update miner '{miner_name}'.\")\n        return True\n    except Exception as e:\n        raise XMRigManagerError(e, traceback.format_exc(), f\"An error occurred updating miners or calling endpoint '{endpoint}' on all miners:\") from e\n</code></pre>"},{"location":"reference/exceptions/xmrigapierror/","title":"XMRigAPIError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a general error occurs with the XMRig API.</p> <p>Attributes:</p> Name Type Description <code>error</code> <code>str</code> <p>Specific error message.</p> <code>traceback</code> <code>str</code> <p>Traceback of the error.</p> <code>message</code> <code>str</code> <p>Error message explaining the API issue.</p> Source code in <code>xmrig/exceptions.py</code> <pre><code>class XMRigAPIError(Exception):\n    \"\"\"\n    Exception raised when a general error occurs with the XMRig API.\n\n    Attributes:\n        error (str): Specific error message.\n        traceback (str): Traceback of the error.\n        message (str): Error message explaining the API issue.\n    \"\"\"\n    def __init__(self, error = None, traceback = None, message = \"An error occurred with the XMRig API:\"):\n        \"\"\"\n        Initialize the API error.\n\n        Args:\n            error (str, optional): Specific error message. Defaults to None.\n            traceback (str, optional): Traceback of the error. Defaults to None.\n            message (str): Error message explaining the API issue. Defaults to a generic API error message.\n        \"\"\"\n        error_message = f\" {error}\" if error else \"\"\n        traceback_message = f\"\\n{traceback}\" if traceback else \"\"\n        self.message = message + error_message + traceback_message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/xmrigapierror/#xmrig.exceptions.XMRigAPIError.__init__","title":"<code>__init__(error=None, traceback=None, message='An error occurred with the XMRig API:')</code>","text":"<p>Initialize the API error.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>str</code> <p>Specific error message. Defaults to None.</p> <code>None</code> <code>traceback</code> <code>str</code> <p>Traceback of the error. Defaults to None.</p> <code>None</code> <code>message</code> <code>str</code> <p>Error message explaining the API issue. Defaults to a generic API error message.</p> <code>'An error occurred with the XMRig API:'</code> Source code in <code>xmrig/exceptions.py</code> <pre><code>def __init__(self, error = None, traceback = None, message = \"An error occurred with the XMRig API:\"):\n    \"\"\"\n    Initialize the API error.\n\n    Args:\n        error (str, optional): Specific error message. Defaults to None.\n        traceback (str, optional): Traceback of the error. Defaults to None.\n        message (str): Error message explaining the API issue. Defaults to a generic API error message.\n    \"\"\"\n    error_message = f\" {error}\" if error else \"\"\n    traceback_message = f\"\\n{traceback}\" if traceback else \"\"\n    self.message = message + error_message + traceback_message\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/xmrigauthorizationerror/","title":"XMRigAuthorizationError","text":"<p>               Bases: <code>XMRigAPIError</code></p> <p>Exception raised when an authorization error occurs with the XMRig API.</p> Source code in <code>xmrig/exceptions.py</code> <pre><code>class XMRigAuthorizationError(XMRigAPIError):\n    \"\"\"\n    Exception raised when an authorization error occurs with the XMRig API.\n    \"\"\"\n    def __init__(self, error = None, traceback = None, message = \"Access token is required but not provided. Please provide a valid access token.\"):\n        super().__init__(error, traceback, message)\n</code></pre>"},{"location":"reference/exceptions/xmrigconnectionerror/","title":"XMRigConnectionError","text":"<p>               Bases: <code>XMRigAPIError</code></p> <p>Exception raised when a connection error occurs with the XMRig API.</p> Source code in <code>xmrig/exceptions.py</code> <pre><code>class XMRigConnectionError(XMRigAPIError):\n    \"\"\"\n    Exception raised when a connection error occurs with the XMRig API.\n    \"\"\"\n    def __init__(self, error = None, traceback = None, message = \"Failed to connect to the XMRig API. Please check the IP, port, and network connection.\"):\n        super().__init__(error, traceback, message)\n</code></pre>"},{"location":"reference/exceptions/xmrigdatabaseerror/","title":"XMRigDatabaseError","text":"<p>               Bases: <code>XMRigAPIError</code></p> <p>Exception raised when a database error occurs with the XMRig API.</p> Source code in <code>xmrig/exceptions.py</code> <pre><code>class XMRigDatabaseError(XMRigAPIError):\n    \"\"\"\n    Exception raised when a database error occurs with the XMRig API.\n    \"\"\"\n    def __init__(self, error = None, traceback = None, message = \"An error occurred with the XMRig database. Please check the database configuration.\"):\n        super().__init__(error, traceback, message)\n</code></pre>"},{"location":"reference/exceptions/xmrigmanagererror/","title":"XMRigManagerError","text":"<p>               Bases: <code>XMRigAPIError</code></p> <p>Exception raised when a manager error occurs with the XMRig API.</p> Source code in <code>xmrig/exceptions.py</code> <pre><code>class XMRigManagerError(XMRigAPIError):\n    \"\"\"\n    Exception raised when a manager error occurs with the XMRig API.\n    \"\"\"\n    def __init__(self, error = None, traceback = None, message = \"An error occurred with the XMRig manager.\"):\n        super().__init__(error, traceback, message)\n</code></pre>"},{"location":"reference/models/backends/","title":"Backends","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the 'backends' table.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>miner_name</code> <code>str</code> <p>Name of the miner.</p> <code>timestamp</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> <code>cpu</code> <code>dict</code> <p>CPU data.</p> <code>cpu_type</code> <code>str</code> <p>CPU type.</p> <code>cpu_enabled</code> <code>bool</code> <p>Whether CPU is enabled.</p> <code>cpu_algo</code> <code>str</code> <p>CPU algorithm.</p> <code>cpu_profile</code> <code>str</code> <p>CPU profile.</p> <code>cpu_hw_aes</code> <code>bool</code> <p>Whether CPU hardware AES is enabled.</p> <code>cpu_priority</code> <code>int</code> <p>CPU priority.</p> <code>cpu_msr</code> <code>bool</code> <p>Whether CPU MSR is enabled.</p> <code>cpu_asm</code> <code>str</code> <p>CPU assembly.</p> <code>cpu_argon2_impl</code> <code>str</code> <p>CPU Argon2 implementation.</p> <code>cpu_hugepages</code> <code>dict</code> <p>CPU hugepages data.</p> <code>cpu_memory</code> <code>int</code> <p>CPU memory.</p> <code>cpu_hashrate</code> <code>dict</code> <p>CPU hashrate data.</p> <code>cpu_threads</code> <code>dict</code> <p>CPU threads data.</p> <code>opencl</code> <code>dict</code> <p>OpenCL data.</p> <code>opencl_type</code> <code>str</code> <p>OpenCL type.</p> <code>opencl_enabled</code> <code>bool</code> <p>Whether OpenCL is enabled.</p> <code>opencl_algo</code> <code>str</code> <p>OpenCL algorithm.</p> <code>opencl_profile</code> <code>str</code> <p>OpenCL profile.</p> <code>opencl_platform</code> <code>dict</code> <p>OpenCL platform data.</p> <code>opencl_platform_index</code> <code>int</code> <p>OpenCL platform index.</p> <code>opencl_platform_profile</code> <code>str</code> <p>OpenCL platform profile.</p> <code>opencl_platform_version</code> <code>str</code> <p>OpenCL platform version.</p> <code>opencl_platform_name</code> <code>str</code> <p>OpenCL platform name.</p> <code>opencl_platform_vendor</code> <code>str</code> <p>OpenCL platform vendor.</p> <code>opencl_platform_extensions</code> <code>str</code> <p>OpenCL platform extensions.</p> <code>opencl_hashrate</code> <code>dict</code> <p>OpenCL hashrate data.</p> <code>opencl_threads</code> <code>dict</code> <p>OpenCL threads data.</p> <code>cuda</code> <code>dict</code> <p>CUDA data.</p> <code>cuda_type</code> <code>str</code> <p>CUDA type.</p> <code>cuda_enabled</code> <code>bool</code> <p>Whether CUDA is enabled.</p> <code>cuda_algo</code> <code>str</code> <p>CUDA algorithm.</p> <code>cuda_profile</code> <code>str</code> <p>CUDA profile.</p> <code>cuda_versions</code> <code>dict</code> <p>CUDA versions data.</p> <code>cuda_versions_cuda_runtime</code> <code>str</code> <p>CUDA runtime version.</p> <code>cuda_versions_cuda_driver</code> <code>str</code> <p>CUDA driver version.</p> <code>cuda_versions_plugin</code> <code>str</code> <p>CUDA plugin version.</p> <code>cuda_hashrate</code> <code>dict</code> <p>CUDA hashrate data.</p> <code>cuda_threads</code> <code>dict</code> <p>CUDA threads data.</p> Source code in <code>xmrig/models.py</code> <pre><code>class Backends(Base):\n    \"\"\"\n    ORM model for the 'backends' table.\n\n    Attributes:\n        uid (int): Primary key.\n        miner_name (str): Name of the miner.\n        timestamp (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n        cpu (dict): CPU data.\n        cpu_type (str): CPU type.\n        cpu_enabled (bool): Whether CPU is enabled.\n        cpu_algo (str): CPU algorithm.\n        cpu_profile (str): CPU profile.\n        cpu_hw_aes (bool): Whether CPU hardware AES is enabled.\n        cpu_priority (int): CPU priority.\n        cpu_msr (bool): Whether CPU MSR is enabled.\n        cpu_asm (str): CPU assembly.\n        cpu_argon2_impl (str): CPU Argon2 implementation.\n        cpu_hugepages (dict): CPU hugepages data.\n        cpu_memory (int): CPU memory.\n        cpu_hashrate (dict): CPU hashrate data.\n        cpu_threads (dict): CPU threads data.\n        opencl (dict): OpenCL data.\n        opencl_type (str): OpenCL type.\n        opencl_enabled (bool): Whether OpenCL is enabled.\n        opencl_algo (str): OpenCL algorithm.\n        opencl_profile (str): OpenCL profile.\n        opencl_platform (dict): OpenCL platform data.\n        opencl_platform_index (int): OpenCL platform index.\n        opencl_platform_profile (str): OpenCL platform profile.\n        opencl_platform_version (str): OpenCL platform version.\n        opencl_platform_name (str): OpenCL platform name.\n        opencl_platform_vendor (str): OpenCL platform vendor.\n        opencl_platform_extensions (str): OpenCL platform extensions.\n        opencl_hashrate (dict): OpenCL hashrate data.\n        opencl_threads (dict): OpenCL threads data.\n        cuda (dict): CUDA data.\n        cuda_type (str): CUDA type.\n        cuda_enabled (bool): Whether CUDA is enabled.\n        cuda_algo (str): CUDA algorithm.\n        cuda_profile (str): CUDA profile.\n        cuda_versions (dict): CUDA versions data.\n        cuda_versions_cuda_runtime (str): CUDA runtime version.\n        cuda_versions_cuda_driver (str): CUDA driver version.\n        cuda_versions_plugin (str): CUDA plugin version.\n        cuda_hashrate (dict): CUDA hashrate data.\n        cuda_threads (dict): CUDA threads data.\n    \"\"\"\n    __tablename__ = \"backends\"\n    uid = Column(Integer, primary_key=True)\n    miner_name = Column(String)\n    timestamp = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n    cpu = Column(JSON)\n    cpu_type = Column(String)\n    cpu_enabled = Column(Boolean)\n    cpu_algo = Column(String)\n    cpu_profile = Column(String)\n    cpu_hw_aes = Column(Boolean)\n    cpu_priority = Column(Integer)\n    cpu_msr = Column(Boolean)\n    cpu_asm = Column(String)\n    cpu_argon2_impl = Column(String)\n    cpu_hugepages = Column(JSON)\n    cpu_memory = Column(Integer)\n    cpu_hashrate = Column(JSON)\n    cpu_threads = Column(JSON)\n    opencl = Column(JSON)\n    opencl_type = Column(String)\n    opencl_enabled = Column(Boolean)\n    opencl_algo = Column(String)\n    opencl_profile = Column(String)\n    opencl_platform = Column(JSON)\n    opencl_platform_index = Column(Integer)\n    opencl_platform_profile = Column(String)\n    opencl_platform_version = Column(String)\n    opencl_platform_name = Column(String)\n    opencl_platform_vendor = Column(String)\n    opencl_platform_extensions = Column(String)\n    opencl_hashrate = Column(JSON)\n    opencl_threads = Column(JSON)\n    cuda = Column(JSON)\n    cuda_type = Column(String)\n    cuda_enabled = Column(Boolean)\n    cuda_algo = Column(String)\n    cuda_profile = Column(String)\n    cuda_versions = Column(JSON)\n    cuda_versions_cuda_runtime = Column(String)\n    cuda_versions_cuda_driver = Column(String)\n    cuda_versions_plugin = Column(String)\n    cuda_hashrate = Column(JSON)\n    cuda_threads = Column(JSON)\n</code></pre>"},{"location":"reference/models/config/","title":"Config","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the 'config' table.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>miner_name</code> <code>str</code> <p>Name of the miner.</p> <code>timestamp</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> <code>api</code> <code>dict</code> <p>API data.</p> <code>api_id</code> <code>str</code> <p>API ID.</p> <code>api_worker_id</code> <code>str</code> <p>API worker ID.</p> <code>http</code> <code>dict</code> <p>HTTP data.</p> <code>http_enabled</code> <code>bool</code> <p>Whether HTTP is enabled.</p> <code>http_host</code> <code>str</code> <p>HTTP host.</p> <code>http_port</code> <code>int</code> <p>HTTP port.</p> <code>http_access_token</code> <code>str</code> <p>HTTP access token.</p> <code>http_restricted</code> <code>bool</code> <p>Whether HTTP is restricted.</p> <code>autosave</code> <code>bool</code> <p>Whether autosave is enabled.</p> <code>background</code> <code>bool</code> <p>Whether background mode is enabled.</p> <code>colors</code> <code>bool</code> <p>Whether colors are enabled.</p> <code>title</code> <code>dict</code> <p>Title data.</p> <code>randomx</code> <code>dict</code> <p>RandomX data.</p> <code>randomx_init</code> <code>int</code> <p>RandomX initialization.</p> <code>randomx_init_avx2</code> <code>int</code> <p>RandomX AVX2 initialization.</p> <code>randomx_mode</code> <code>str</code> <p>RandomX mode.</p> <code>randomx_1gb_pages</code> <code>bool</code> <p>Whether RandomX 1GB pages are enabled.</p> <code>randomx_rdmsr</code> <code>bool</code> <p>Whether RandomX RDMSR is enabled.</p> <code>randomx_wrmsr</code> <code>dict</code> <p>RandomX WRMSR data.</p> <code>randomx_cache_qos</code> <code>bool</code> <p>Whether RandomX cache QoS is enabled.</p> <code>randomx_numa</code> <code>bool</code> <p>Whether RandomX NUMA is enabled.</p> <code>randomx_scratchpad_prefetch_mode</code> <code>int</code> <p>RandomX scratchpad prefetch mode.</p> <code>cpu</code> <code>dict</code> <p>CPU data.</p> <code>cpu_enabled</code> <code>bool</code> <p>Whether CPU is enabled.</p> <code>cpu_huge_pages</code> <code>dict</code> <p>CPU huge pages data.</p> <code>cpu_huge_pages_jit</code> <code>bool</code> <p>Whether CPU huge pages JIT is enabled.</p> <code>cpu_hw_aes</code> <code>bool</code> <p>Whether CPU hardware AES is enabled.</p> <code>cpu_priority</code> <code>int</code> <p>CPU priority.</p> <code>cpu_memory_pool</code> <code>dict</code> <p>CPU memory pool data.</p> <code>cpu_yield</code> <code>bool</code> <p>Whether CPU yield is enabled.</p> <code>cpu_max_threads_hint</code> <code>int</code> <p>CPU max threads hint.</p> <code>cpu_asm</code> <code>dict</code> <p>CPU assembly data.</p> <code>cpu_argon2_impl</code> <code>str</code> <p>CPU Argon2 implementation.</p> <code>opencl</code> <code>dict</code> <p>OpenCL data.</p> <code>opencl_enabled</code> <code>bool</code> <p>Whether OpenCL is enabled.</p> <code>opencl_cache</code> <code>bool</code> <p>Whether OpenCL cache is enabled.</p> <code>opencl_loader</code> <code>str</code> <p>OpenCL loader.</p> <code>opencl_platform</code> <code>dict</code> <p>OpenCL platform data.</p> <code>opencl_adl</code> <code>bool</code> <p>Whether OpenCL ADL is enabled.</p> <code>cuda</code> <code>dict</code> <p>CUDA data.</p> <code>cuda_enabled</code> <code>bool</code> <p>Whether CUDA is enabled.</p> <code>cuda_loader</code> <code>str</code> <p>CUDA loader.</p> <code>cuda_nvml</code> <code>bool</code> <p>Whether CUDA NVML is enabled.</p> <code>donate_level</code> <code>int</code> <p>Donation level.</p> <code>donate_over_proxy</code> <code>int</code> <p>Donation over proxy.</p> <code>log_file</code> <code>str</code> <p>Log file.</p> <code>pools</code> <code>dict</code> <p>Pools data.</p> <code>print_time</code> <code>int</code> <p>Print time.</p> <code>health_print_time</code> <code>int</code> <p>Health print time.</p> <code>dmi</code> <code>bool</code> <p>Whether DMI is enabled.</p> <code>retries</code> <code>int</code> <p>Number of retries.</p> <code>retry_pause</code> <code>int</code> <p>Retry pause.</p> <code>syslog</code> <code>bool</code> <p>Whether syslog is enabled.</p> <code>tls</code> <code>dict</code> <p>TLS data.</p> <code>tls_enabled</code> <code>bool</code> <p>Whether TLS is enabled.</p> <code>tls_protocols</code> <code>str</code> <p>TLS protocols.</p> <code>tls_cert</code> <code>str</code> <p>TLS certificate.</p> <code>tls_cert_key</code> <code>str</code> <p>TLS certificate key.</p> <code>tls_ciphers</code> <code>str</code> <p>TLS ciphers.</p> <code>tls_ciphersuites</code> <code>str</code> <p>TLS ciphersuites.</p> <code>tls_dhparam</code> <code>str</code> <p>TLS DH parameters.</p> <code>dns</code> <code>dict</code> <p>DNS data.</p> <code>dns_ipv6</code> <code>bool</code> <p>Whether DNS IPv6 is enabled.</p> <code>dns_ttl</code> <code>int</code> <p>DNS TTL.</p> <code>user_agent</code> <code>str</code> <p>User agent.</p> <code>verbose</code> <code>int</code> <p>Verbose level.</p> <code>watch</code> <code>bool</code> <p>Whether watch mode is enabled.</p> <code>rebench_algo</code> <code>bool</code> <p>Whether rebench algorithm is enabled.</p> <code>bench_algo_time</code> <code>int</code> <p>Benchmark algorithm time.</p> <code>pause_on_battery</code> <code>bool</code> <p>Whether to pause on battery.</p> <code>pause_on_active</code> <code>dict</code> <p>Pause on active data.</p> <code>benchmark</code> <code>dict</code> <p>Benchmark data.</p> <code>benchmark_size</code> <code>str</code> <p>Benchmark size.</p> <code>benchmark_algo</code> <code>str</code> <p>Benchmark algorithm.</p> <code>benchmark_submit</code> <code>bool</code> <p>Whether to submit benchmark.</p> <code>benchmark_verify</code> <code>str</code> <p>Benchmark verification.</p> <code>benchmark_seed</code> <code>str</code> <p>Benchmark seed.</p> <code>benchmark_hash</code> <code>str</code> <p>Benchmark hash.</p> Source code in <code>xmrig/models.py</code> <pre><code>class Config(Base):\n    \"\"\"\n    ORM model for the 'config' table.\n\n    Attributes:\n        uid (int): Primary key.\n        miner_name (str): Name of the miner.\n        timestamp (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n        api (dict): API data.\n        api_id (str): API ID.\n        api_worker_id (str): API worker ID.\n        http (dict): HTTP data.\n        http_enabled (bool): Whether HTTP is enabled.\n        http_host (str): HTTP host.\n        http_port (int): HTTP port.\n        http_access_token (str): HTTP access token.\n        http_restricted (bool): Whether HTTP is restricted.\n        autosave (bool): Whether autosave is enabled.\n        background (bool): Whether background mode is enabled.\n        colors (bool): Whether colors are enabled.\n        title (dict): Title data.\n        randomx (dict): RandomX data.\n        randomx_init (int): RandomX initialization.\n        randomx_init_avx2 (int): RandomX AVX2 initialization.\n        randomx_mode (str): RandomX mode.\n        randomx_1gb_pages (bool): Whether RandomX 1GB pages are enabled.\n        randomx_rdmsr (bool): Whether RandomX RDMSR is enabled.\n        randomx_wrmsr (dict): RandomX WRMSR data.\n        randomx_cache_qos (bool): Whether RandomX cache QoS is enabled.\n        randomx_numa (bool): Whether RandomX NUMA is enabled.\n        randomx_scratchpad_prefetch_mode (int): RandomX scratchpad prefetch mode.\n        cpu (dict): CPU data.\n        cpu_enabled (bool): Whether CPU is enabled.\n        cpu_huge_pages (dict): CPU huge pages data.\n        cpu_huge_pages_jit (bool): Whether CPU huge pages JIT is enabled.\n        cpu_hw_aes (bool): Whether CPU hardware AES is enabled.\n        cpu_priority (int): CPU priority.\n        cpu_memory_pool (dict): CPU memory pool data.\n        cpu_yield (bool): Whether CPU yield is enabled.\n        cpu_max_threads_hint (int): CPU max threads hint.\n        cpu_asm (dict): CPU assembly data.\n        cpu_argon2_impl (str): CPU Argon2 implementation.\n        opencl (dict): OpenCL data.\n        opencl_enabled (bool): Whether OpenCL is enabled.\n        opencl_cache (bool): Whether OpenCL cache is enabled.\n        opencl_loader (str): OpenCL loader.\n        opencl_platform (dict): OpenCL platform data.\n        opencl_adl (bool): Whether OpenCL ADL is enabled.\n        cuda (dict): CUDA data.\n        cuda_enabled (bool): Whether CUDA is enabled.\n        cuda_loader (str): CUDA loader.\n        cuda_nvml (bool): Whether CUDA NVML is enabled.\n        donate_level (int): Donation level.\n        donate_over_proxy (int): Donation over proxy.\n        log_file (str): Log file.\n        pools (dict): Pools data.\n        print_time (int): Print time.\n        health_print_time (int): Health print time.\n        dmi (bool): Whether DMI is enabled.\n        retries (int): Number of retries.\n        retry_pause (int): Retry pause.\n        syslog (bool): Whether syslog is enabled.\n        tls (dict): TLS data.\n        tls_enabled (bool): Whether TLS is enabled.\n        tls_protocols (str): TLS protocols.\n        tls_cert (str): TLS certificate.\n        tls_cert_key (str): TLS certificate key.\n        tls_ciphers (str): TLS ciphers.\n        tls_ciphersuites (str): TLS ciphersuites.\n        tls_dhparam (str): TLS DH parameters.\n        dns (dict): DNS data.\n        dns_ipv6 (bool): Whether DNS IPv6 is enabled.\n        dns_ttl (int): DNS TTL.\n        user_agent (str): User agent.\n        verbose (int): Verbose level.\n        watch (bool): Whether watch mode is enabled.\n        rebench_algo (bool): Whether rebench algorithm is enabled.\n        bench_algo_time (int): Benchmark algorithm time.\n        pause_on_battery (bool): Whether to pause on battery.\n        pause_on_active (dict): Pause on active data.\n        benchmark (dict): Benchmark data.\n        benchmark_size (str): Benchmark size.\n        benchmark_algo (str): Benchmark algorithm.\n        benchmark_submit (bool): Whether to submit benchmark.\n        benchmark_verify (str): Benchmark verification.\n        benchmark_seed (str): Benchmark seed.\n        benchmark_hash (str): Benchmark hash.\n    \"\"\"\n    __tablename__ = \"config\"\n    uid = Column(Integer, primary_key=True)\n    miner_name = Column(String)\n    timestamp = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n    api = Column(JSON)\n    api_id = Column(String)\n    api_worker_id = Column(String)\n    http = Column(JSON)\n    http_enabled = Column(Boolean)\n    http_host = Column(String)\n    http_port = Column(Integer)\n    http_access_token = Column(String)\n    http_restricted = Column(Boolean)\n    autosave = Column(Boolean)\n    background = Column(Boolean)\n    colors = Column(Boolean)\n    title = Column(JSON)\n    randomx = Column(JSON)\n    randomx_init = Column(Integer)\n    randomx_init_avx2 = Column(Integer)\n    randomx_mode = Column(String)\n    randomx_1gb_pages = Column(Boolean)\n    randomx_rdmsr = Column(Boolean)\n    randomx_wrmsr = Column(JSON)\n    randomx_cache_qos = Column(Boolean)\n    randomx_numa = Column(Boolean)\n    randomx_scratchpad_prefetch_mode = Column(Integer)\n    cpu = Column(JSON)\n    cpu_enabled = Column(Boolean)\n    cpu_huge_pages = Column(JSON)\n    cpu_huge_pages_jit = Column(Boolean)\n    cpu_hw_aes = Column(Boolean)\n    cpu_priority = Column(Integer)\n    cpu_memory_pool = Column(JSON)\n    cpu_yield = Column(Boolean)\n    cpu_max_threads_hint = Column(Integer)\n    cpu_asm = Column(JSON)\n    cpu_argon2_impl = Column(String)\n    opencl = Column(JSON)\n    opencl_enabled = Column(Boolean)\n    opencl_cache = Column(Boolean)\n    opencl_loader = Column(String)\n    opencl_platform = Column(JSON)\n    opencl_adl = Column(Boolean)\n    cuda = Column(JSON)\n    cuda_enabled = Column(Boolean)\n    cuda_loader = Column(String)\n    cuda_nvml = Column(Boolean)\n    donate_level = Column(Integer)\n    donate_over_proxy = Column(Integer)\n    log_file = Column(String)\n    pools = Column(JSON)\n    print_time = Column(Integer)\n    health_print_time = Column(Integer)\n    dmi = Column(Boolean)\n    retries = Column(Integer)\n    retry_pause = Column(Integer)\n    syslog = Column(Boolean)\n    tls = Column(JSON)\n    tls_enabled = Column(Boolean)\n    tls_protocols = Column(String)\n    tls_cert = Column(String)\n    tls_cert_key = Column(String)\n    tls_ciphers = Column(String)\n    tls_ciphersuites = Column(String)\n    tls_dhparam = Column(String)\n    dns = Column(JSON)\n    dns_ipv6 = Column(Boolean)\n    dns_ttl = Column(Integer)\n    user_agent = Column(String)\n    verbose = Column(Integer)\n    watch = Column(Boolean)\n    rebench_algo = Column(Boolean)\n    bench_algo_time = Column(Integer)\n    pause_on_battery = Column(Boolean)\n    pause_on_active = Column(JSON)\n    benchmark = Column(JSON)\n    benchmark_size = Column(String)\n    benchmark_algo = Column(String)\n    benchmark_submit = Column(Boolean)\n    benchmark_verify = Column(String)\n    benchmark_seed = Column(String)\n    benchmark_hash = Column(String)\n</code></pre>"},{"location":"reference/models/summary/","title":"Summary","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the 'summary' table.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>miner_name</code> <code>str</code> <p>Name of the miner.</p> <code>timestamp</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> <code>id</code> <code>str</code> <p>ID of the summary.</p> <code>worker_id</code> <code>str</code> <p>Worker ID.</p> <code>uptime</code> <code>int</code> <p>Uptime of the miner.</p> <code>restricted</code> <code>bool</code> <p>Whether the miner is restricted.</p> <code>resources</code> <code>dict</code> <p>Resources data.</p> <code>resources_memory</code> <code>dict</code> <p>Memory resources data.</p> <code>resources_memory_free</code> <code>int</code> <p>Free memory.</p> <code>resources_memory_total</code> <code>int</code> <p>Total memory.</p> <code>resources_memory_rsm</code> <code>int</code> <p>RSM memory.</p> <code>resources_load_average</code> <code>dict</code> <p>Load average data.</p> <code>resources_hardware_concurrency</code> <code>int</code> <p>Hardware concurrency.</p> <code>features</code> <code>dict</code> <p>Features data.</p> <code>results</code> <code>dict</code> <p>Results data.</p> <code>results_diff_current</code> <code>int</code> <p>Current difficulty.</p> <code>results_shares_good</code> <code>int</code> <p>Good shares.</p> <code>results_shares_total</code> <code>int</code> <p>Total shares.</p> <code>results_avg_time</code> <code>int</code> <p>Average time.</p> <code>results_avg_time_ms</code> <code>int</code> <p>Average time in milliseconds.</p> <code>results_hashes_total</code> <code>int</code> <p>Total hashes.</p> <code>results_best</code> <code>dict</code> <p>Best results data.</p> <code>algo</code> <code>str</code> <p>Algorithm.</p> <code>connection</code> <code>dict</code> <p>Connection data.</p> <code>connection_pool</code> <code>str</code> <p>Connection pool.</p> <code>connection_ip</code> <code>str</code> <p>Connection IP.</p> <code>connection_uptime</code> <code>int</code> <p>Connection uptime.</p> <code>connection_uptime_ms</code> <code>int</code> <p>Connection uptime in milliseconds.</p> <code>connection_ping</code> <code>int</code> <p>Connection ping.</p> <code>connection_failures</code> <code>int</code> <p>Connection failures.</p> <code>connection_tls</code> <code>dict</code> <p>TLS connection data.</p> <code>connection_tls_fingerprint</code> <code>dict</code> <p>TLS fingerprint data.</p> <code>connection_algo</code> <code>str</code> <p>Connection algorithm.</p> <code>connection_diff</code> <code>int</code> <p>Connection difficulty.</p> <code>connection_accepted</code> <code>int</code> <p>Accepted connections.</p> <code>connection_rejected</code> <code>int</code> <p>Rejected connections.</p> <code>connection_avg_time</code> <code>int</code> <p>Average connection time.</p> <code>connection_avg_time_ms</code> <code>int</code> <p>Average connection time in milliseconds.</p> <code>connection_hashes_total</code> <code>int</code> <p>Total connection hashes.</p> <code>version</code> <code>str</code> <p>Version.</p> <code>kind</code> <code>str</code> <p>Kind.</p> <code>ua</code> <code>str</code> <p>User agent.</p> <code>cpu</code> <code>dict</code> <p>CPU data.</p> <code>cpu_brand</code> <code>str</code> <p>CPU brand.</p> <code>cpu_family</code> <code>int</code> <p>CPU family.</p> <code>cpu_model</code> <code>int</code> <p>CPU model.</p> <code>cpu_stepping</code> <code>int</code> <p>CPU stepping.</p> <code>cpu_proc_info</code> <code>int</code> <p>CPU processor info.</p> <code>cpu_aes</code> <code>bool</code> <p>CPU AES support.</p> <code>cpu_avx2</code> <code>bool</code> <p>CPU AVX2 support.</p> <code>cpu_x64</code> <code>bool</code> <p>CPU x64 support.</p> <code>cpu_64_bit</code> <code>bool</code> <p>CPU 64-bit support.</p> <code>cpu_l2</code> <code>int</code> <p>CPU L2 cache size.</p> <code>cpu_l3</code> <code>int</code> <p>CPU L3 cache size.</p> <code>cpu_cores</code> <code>int</code> <p>Number of CPU cores.</p> <code>cpu_threads</code> <code>int</code> <p>Number of CPU threads.</p> <code>cpu_packages</code> <code>int</code> <p>Number of CPU packages.</p> <code>cpu_nodes</code> <code>int</code> <p>Number of CPU nodes.</p> <code>cpu_backend</code> <code>str</code> <p>CPU backend.</p> <code>cpu_msr</code> <code>str</code> <p>CPU MSR.</p> <code>cpu_assembly</code> <code>str</code> <p>CPU assembly.</p> <code>cpu_arch</code> <code>str</code> <p>CPU architecture.</p> <code>cpu_flags</code> <code>dict</code> <p>CPU flags.</p> <code>donate_level</code> <code>int</code> <p>Donation level.</p> <code>paused</code> <code>bool</code> <p>Whether the miner is paused.</p> <code>algorithms</code> <code>dict</code> <p>Algorithms data.</p> <code>hashrate</code> <code>dict</code> <p>Hashrate data.</p> <code>hashrate_total</code> <code>dict</code> <p>Total hashrate.</p> <code>hashrate_highest</code> <code>float</code> <p>Highest hashrate.</p> <code>hugepages</code> <code>dict</code> <p>Hugepages data.</p> Source code in <code>xmrig/models.py</code> <pre><code>class Summary(Base):\n    \"\"\"\n    ORM model for the 'summary' table.\n\n    Attributes:\n        uid (int): Primary key.\n        miner_name (str): Name of the miner.\n        timestamp (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n        id (str): ID of the summary.\n        worker_id (str): Worker ID.\n        uptime (int): Uptime of the miner.\n        restricted (bool): Whether the miner is restricted.\n        resources (dict): Resources data.\n        resources_memory (dict): Memory resources data.\n        resources_memory_free (int): Free memory.\n        resources_memory_total (int): Total memory.\n        resources_memory_rsm (int): RSM memory.\n        resources_load_average (dict): Load average data.\n        resources_hardware_concurrency (int): Hardware concurrency.\n        features (dict): Features data.\n        results (dict): Results data.\n        results_diff_current (int): Current difficulty.\n        results_shares_good (int): Good shares.\n        results_shares_total (int): Total shares.\n        results_avg_time (int): Average time.\n        results_avg_time_ms (int): Average time in milliseconds.\n        results_hashes_total (int): Total hashes.\n        results_best (dict): Best results data.\n        algo (str): Algorithm.\n        connection (dict): Connection data.\n        connection_pool (str): Connection pool.\n        connection_ip (str): Connection IP.\n        connection_uptime (int): Connection uptime.\n        connection_uptime_ms (int): Connection uptime in milliseconds.\n        connection_ping (int): Connection ping.\n        connection_failures (int): Connection failures.\n        connection_tls (dict): TLS connection data.\n        connection_tls_fingerprint (dict): TLS fingerprint data.\n        connection_algo (str): Connection algorithm.\n        connection_diff (int): Connection difficulty.\n        connection_accepted (int): Accepted connections.\n        connection_rejected (int): Rejected connections.\n        connection_avg_time (int): Average connection time.\n        connection_avg_time_ms (int): Average connection time in milliseconds.\n        connection_hashes_total (int): Total connection hashes.\n        version (str): Version.\n        kind (str): Kind.\n        ua (str): User agent.\n        cpu (dict): CPU data.\n        cpu_brand (str): CPU brand.\n        cpu_family (int): CPU family.\n        cpu_model (int): CPU model.\n        cpu_stepping (int): CPU stepping.\n        cpu_proc_info (int): CPU processor info.\n        cpu_aes (bool): CPU AES support.\n        cpu_avx2 (bool): CPU AVX2 support.\n        cpu_x64 (bool): CPU x64 support.\n        cpu_64_bit (bool): CPU 64-bit support.\n        cpu_l2 (int): CPU L2 cache size.\n        cpu_l3 (int): CPU L3 cache size.\n        cpu_cores (int): Number of CPU cores.\n        cpu_threads (int): Number of CPU threads.\n        cpu_packages (int): Number of CPU packages.\n        cpu_nodes (int): Number of CPU nodes.\n        cpu_backend (str): CPU backend.\n        cpu_msr (str): CPU MSR.\n        cpu_assembly (str): CPU assembly.\n        cpu_arch (str): CPU architecture.\n        cpu_flags (dict): CPU flags.\n        donate_level (int): Donation level.\n        paused (bool): Whether the miner is paused.\n        algorithms (dict): Algorithms data.\n        hashrate (dict): Hashrate data.\n        hashrate_total (dict): Total hashrate.\n        hashrate_highest (float): Highest hashrate.\n        hugepages (dict): Hugepages data.\n    \"\"\"\n    __tablename__ = \"summary\"\n    uid = Column(Integer, primary_key=True)\n    miner_name = Column(String)\n    timestamp = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n    id = Column(String)\n    worker_id = Column(String)\n    uptime = Column(Integer)\n    restricted = Column(Boolean)\n    resources = Column(JSON)\n    resources_memory = Column(JSON)\n    resources_memory_free = Column(Integer)\n    resources_memory_total = Column(Integer)\n    resources_memory_rsm = Column(Integer)\n    resources_load_average = Column(JSON)\n    resources_hardware_concurrency = Column(Integer)\n    features = Column(JSON)\n    results = Column(JSON)\n    results_diff_current = Column(Integer)\n    results_shares_good = Column(Integer)\n    results_shares_total = Column(Integer)\n    results_avg_time = Column(Integer)\n    results_avg_time_ms = Column(Integer)\n    results_hashes_total = Column(Integer)\n    results_best = Column(JSON)\n    algo = Column(String)\n    connection = Column(JSON)\n    connection_pool = Column(String)\n    connection_ip = Column(String)\n    connection_uptime = Column(Integer)\n    connection_uptime_ms = Column(Integer)\n    connection_ping = Column(Integer)\n    connection_failures = Column(Integer)\n    connection_tls = Column(JSON)\n    connection_tls_fingerprint = Column(JSON)\n    connection_algo = Column(String)\n    connection_diff = Column(Integer)\n    connection_accepted = Column(Integer)\n    connection_rejected = Column(Integer)\n    connection_avg_time = Column(Integer)\n    connection_avg_time_ms = Column(Integer)\n    connection_hashes_total = Column(Integer)\n    version = Column(String)\n    kind = Column(String)\n    ua = Column(String)\n    cpu = Column(JSON)\n    cpu_brand = Column(String)\n    cpu_family = Column(Integer)\n    cpu_model = Column(Integer)\n    cpu_stepping = Column(Integer)\n    cpu_proc_info = Column(Integer)\n    cpu_aes = Column(Boolean)\n    cpu_avx2 = Column(Boolean)\n    cpu_x64 = Column(Boolean)\n    cpu_64_bit = Column(Boolean)\n    cpu_l2 = Column(Integer)\n    cpu_l3 = Column(Integer)\n    cpu_cores = Column(Integer)\n    cpu_threads = Column(Integer)\n    cpu_packages = Column(Integer)\n    cpu_nodes = Column(Integer)\n    cpu_backend = Column(String)\n    cpu_msr = Column(String)\n    cpu_assembly = Column(String)\n    cpu_arch = Column(String)\n    cpu_flags = Column(JSON)\n    donate_level = Column(Integer)\n    paused = Column(Boolean)\n    algorithms = Column(JSON)\n    hashrate = Column(JSON)\n    hashrate_total = Column(JSON)\n    hashrate_highest = Column(Float)\n    hugepages = Column(JSON)\n</code></pre>"}]}